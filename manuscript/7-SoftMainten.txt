# Συντήρηση λογισμικού {#softmaint}


## Ακρωνύμια

|API  |Application Programming Interface |
|CI   |Continuous Integration            |
|IEC  |The International Electrotechnical 
Commission                               |
|IEEE |The Institute of Electrical and
Electronics Engineers                    |
|ISO  |International Organization for
Standardization                          |
|KA   |Knowledge Area                    |
|LOC  |Lines Of Code                     |
|MR   |Modification request              |
|PR   |Problem report                    |
|SCM	|Software Configuration Management |
|SEE  |Software Engineering Environment  |
|SLA	|Service-Level Agreement           |
|SLI  |Service-Level Indicators          |
|SLO  |Service-Level Objectives          |  
|SQA	|Software Quality Assurance        |
|V&V  |Verification and Validation       |
|XaaS |Anything as a Service             |


## Εισαγωγή

Οι επιτυχημένες προσπάθειες για την ανάπτυξη λογισμικού αποφέρουν ένα
προϊόν λογισμικού που ικανοποιεί τις απαιτήσεις των χρηστών. Όσο αυτές
οι απαιτήσεις και άλλοι παράγοντες αλλάζουν, το προϊόν λογισμικού
πρέπει να εξελίσσεται: Από την στιγμή που το λογισμικό μπαίνει σε
λειτουργία, ελαττώματα αποκαλύπτονται, το περιβάλλον λειτουργίας
αλλάζει και νέες απαιτήσεις χρηστών κάνουν την εμφάνιση τους. Η φάση
συντήρησης του κύκλου ζωής (του λογισμικού) ξεκινάει μετά από την
περίοδο εγγύησης ή μετά την παροχή υποστήριξης της εφαρμογής, αλλά οι
δραστηριότητες συντήρησης ξεκινούν πολύ νωρίτερα.

Η συντήρηση είναι ένα αναπόσπαστο κομμάτι του κύκλου ζωής του
λογισμικού. Παρ’ όλα αυτά δεν έχει δεχθεί την ίδια προσοχή με τις
υπόλοιπες δραστηριότητες τεχνολογίας λογισμικού. Ιστορικά, η ανάπτυξη
λογισμικού έχει πολύ υψηλότερο κύρος, σε σχέση με την συντήρηση. Αυτή η
τάση τείνει να αλλάξει στις μέρες μας, με τους περισσότερους
οργανισμούς να προσπαθούν να μεγιστοποιήσουν την επένδυση τους για
ανάπτυξη λογισμικού εξασφαλίζοντας συνεχή ανάπτυξη, συντήρηση και
λειτουργία, σταδιακά εξαλείφοντας τα οργανωτικά σιλό σε αυτές τις
περιοχές. Η αυξανόμενη αποδοχή των πρακτικών και των εργαλείων των
DevOps, έχουν επιστήσει περαιτέρω προσοχή στην ανάγκη για συνεχή
εξέλιξη του λογισμικού, ενώ διασφαλίζουν την ομαλή λειτουργία του για
να ικανοποιήσουν τους χρήστες, οι οποίοι απαιτούν ταχύτερη ανατροπή από
τους μηχανικούς λογισμικού από ότι στο παρελθόν.

Σε αυτόν τον *Οδηγό SWEBOK*, η συντήρηση λογισμικού ορίζεται σαν το σύνολο
από τις δραστηριότητες που απαιτούνται για να παρέχουν αποδοτική
υποστήριξη στο λογισμικό σε λειτουργία. Οι δραστηριότητες που
υποστηρίζουν τη λειτουργία λογισμικού και τη συντήρηση εκτελούνται τόσο
πριν όσο και μετά την παράδοση του λογισμικού. Οι δραστηριότητες πριν
την παράδοση του λογισμικού περιλαμβάνουν τον σχεδιασμό των μετά την
παράδοση δραστηριοτήτων, την συντηρησιμότητα και τον καθορισμό της
λογιστικής υποστήριξης που χρειάζεται για την μεταβίβαση από την
ανάπτυξη στην συντήρηση. Οι δραστηριότητες μετά την παράδοση
περιλαμβάνουν την παρακολούθηση, την τροποποίηση, την εκπαίδευση και
την εκτέλεση μιας διαδικασίας υποστήριξης ή την σύνδεση με μια
υπάρχουσα.

Το γνωστικό πεδίο Συντήρηση λογισμικού συνδέεται με όλες τις πτυχές της
τεχνολογίας λογισμικού. Ως εκ τούτου, η περιγραφή αυτού του γνωστικού
πεδίου συνδέεται με όλα τα υπόλοιπα στοιχεία της τεχνολογίας σε αυτόν
τον *Οδηγό*.

## Κατανομή των θεμάτων για την συντήρηση λογισμικού 

{id="fig-softmainten-tree"}
![Σχήμα 1 Κατανομή των θεμάτων στο γνωστικό πεδίο Συντήρηση λογισμικού.]
 (images/7-SoftMainten.png)

Η κατανομή των θεμάτων για τα γνωστικά πεδία της συντήρηση λογισμικού
απεικονίζεται στο [Σχήμα 1](#fig-softmainten-tree).

## Βασικές αρχές της συντήρησης λογισμικού

Αυτή η ενότητα εισάγει το πλαίσιο και την ορολογία που αποτελούν την
βάση για την κατανόηση του ρόλου και της οπτικής της συντήρησης
λογισμικού. Μεταξύ αυτών των εννοιών υπάρχουν διαφορετικές κατηγορίες
της συντήρησης λογισμικού. Η εκμάθηση αυτών των κατηγοριών είναι
κρίσιμη για την κατανόηση του τι περιβάλλει αυτό το γνωστικό πεδίο και
γιατί είναι τόσο σημαντικό.

###  *Ορισμοί και ορολογία*
    [1, s3.1][2*, c1s1.2, c2s2,2]

Ο σκοπός της συντήρησης λογισμικού ορίζεται στο διεθνές πρότυπο για
συντήρηση λογισμικού: ISO/IEC/IEEE 14764. Στο πλαίσιο της τεχνολογίας
λογισμικού, η συντήρηση λογισμικού είναι ουσιαστικά μια εκ των πολλών
τεχνικών διεργασιών. Ο στόχος της συντήρησης λογισμικού είναι η
τροποποίηση του υπάρχοντος λογισμικού με ταυτόχρονη διατήρηση της
ακεραιότητας του. Το διεθνές πρότυπο επίσης τονίζει την σημασία
εκτέλεσης κάποιων δραστηριοτήτων συντήρησης, πριν της τελικής παράδοσης
του λογισμικού (pre-delivery activities). Η συντήρηση λογισμικού
μοιράζεται γνώση και εργαλεία με την ανάπτυξη λογισμικού και τη
λειτουργία λογισμικού και επίσης έχει τις δικές της διαδικασίες και
τεχνικές.

###  *Η φύση της συντήρησης*
    [2*, c1s1.3]

Η συντήρηση λογισμικού συντηρεί το προϊόν λογισμικού σε όλη τη διάρκεια
του κύκλου ζωής του από την ανάπτυξη, έως την λειτουργία του. Το
λογισμικό παρακολουθείται για την χωρητικότητα, την συνέχεια και τη
διαθεσιμότητα. Τα αιτήματα τροποποίησης και οι αναφορές περιστατικών ή
προβλημάτων καταγράφονται και παρακολουθούνται, προσδιορίζεται η
επίδραση των προτεινόμενων αλλαγών, παραμετροποιείται ο κώδικας και τα
άλλα αντικείμενα λογισμικού, γίνεται έλεγχος και μια νέα έκδοση του
λογισμικού εκδίδεται για λειτουργία. Επίσης, παρέχεται στους χρήστες
εκπαίδευση και συνεχής καθημερινή υποστήριξη. Ένας *συντηρητής
λογισμικού* (maintainer) ορίζεται ως ένας ρόλος ή ένας οργανισμός, ο
οποίος εκτελεί δραστηριότητες συντήρησης. Σε αυτό το γνωστικό πεδίο ο
όρος κάποιες φορές θα αναφέρεται σε άτομα που εκτελούν αυτές τις
δραστηριότητες, για να αντιπαραβάλλουν το ρόλο τους με τον ρόλο του
προγραμματιστή.

Οι συντηρητές μπορούν να «μάθουν» από τις γνώσεις των προγραμματιστών
και των χειριστών για το λογισμικό. Η επαφή με τους προγραμματιστές και
η εμπλοκή των συντηρητών από νωρίς μπορεί να μειώσει τη συνολική
προσπάθεια και τα έξοδα συντήρησης. Μία επιπρόσθετη πρόκληση
δημιουργείται όταν οι συντηρητές προσχωρούν στο έργο αφού οι αρχικοί
προγραμματιστές έχουν φύγει ή δεν είναι πλέον διαθέσιμοι. Οι συντηρητές
πρέπει να κατανοούν και να χρησιμοποιούν στοιχεία λογισμικού από την
ανάπτυξη (π.χ. κώδικα, δοκιμές ή τεκμηρίωση), να τα υποστηρίζει άμεσα,
και  έπειτα να τα εξελίσσει και να τα διατηρεί σταδιακά με την πάροδο
του χρόνου.

###  Ανάγκη για συντήρηση
    [2*, c1s1.5]

Η συντήρηση λογισμικού είναι απαραίτητη για να διασφαλίζεται ότι το
λογισμικό συνεχίζει να ικανοποιεί τις απαιτήσεις του χρήστη καθ'όλη τη
διάρκεια ζωής του.Η συντήρηση είναι απαραίτητη ανεξαρτήτως από τον τύπο
μοντέλου κύκλου ζωής λογισμικού που χρησιμοποιείται για την αναπτυξή
του (π.χ. καταρράκτη ή ευέλικτου). Τα προϊόντα λογισμικού αλλάζουν ως
αποτέλεσμα τόσο διορθωτικών, όσο και μη διορθωτικών δράσεων. Η
συντήρηση λογισμικού συνήθως πραγματοποιείται ώστε να επιτυγχάνεται:
  * η διόρθωση λαθών και κρυμμένων ελλατώματα,
  * η βελτίωση του σχεδιασμού ή της απόδοσης του λειτουργικού
    λογισμικού,
  * η εφαρμογή ενισχύσεων,
  * η βοήθεια των χρηστών να κατανοήσουν τη λειτουργικότητα του
    λογισμικού,
  * η προσαρμογή σε αλλαγές σε διεπαφή συστήματα ή υποδομές,
  * η αποτροπή απειλών στην ασφάλεια,
  * η αποκατάσταση της τεχνικής απαξίωσης στοιχείων συστήματος ή
    λογισμικού
  * η απόσυρση του λογισμικού.

### *Η πλειοψηφία κόστους συντήρησης*
    [2*, c4s4.3, c5s5.2]

Είναι γενικά αποδεκτό ότι το σχετικό κόστος της διόρθωσης σφαλμάτων
αυξάνεται σε μεταγενέστερα στάδια του κύκλου ζωής του λογισμικού. Η
συντήρηση επίσης, καταναλώνει ένα μεγάλο μερίδιο από τους συνολικούς
οικονομικούς πόρους που αποδίδονται στη διάρκεια ζωής του λογισμικού.
Μια συχνή αντίληψη για την συντήρηση λογισμικού είναι ότι κυρίως
διορθώνει λάθη. Παρ’ όλα αυτά μελέτες και έρευνες τα τελευταία χρόνια
έχουν δείξει ότι η περισσότερη συντήρηση λογισμικού -- πάνω από το
80% -- χρησιμοποιείται για τη βελτίωση και την προσαρμογή λογισμικού. Η
ομαδοποίηση βελτιώσεων και διορθώσεων στις αναφορές διοίκησης συμβάλλει
στην παρανόηση ότι οι διορθώσει κοστίζουν παραπάνω απ'ότι κάνουν
πραγματικά. Η κατανόηση των κατηγοριών της συντήρησης μας βοηθάει στο
να γίνει αντιληπτή η δομή του κόστους της συντήρησης λογισμικού -- εκεί
είναι που πάνε οι περισσότερες από τις δαπάνες.  Επίσης, η κατανόηση
των παραγόντων που επηρεάζουν την συντηρησιμότητα του λογισμικού μπορεί
να βοηθήσει τους οργανισμούς στο να περιορίσουν το κόστος. Οι
περιβαλλοντικοί παράγοντες που επηρεάζουν το κόστος συντήρησης
λογισμικού περιλαμβάνουν τα εξής:

  * το λειτουργικό περιβάλλον (το υλικό και το λογισμικό)
  * το οργανωσιακό περιβάλλον (οι πολιτικές, ο ανταγωνισμός,η διεργασία,
    το προϊόν και το προσωπικό)

### *Η εξέλιξη λογισμικού*
    [2*, c3s3.5]

Η συντήρηση λογισμικού σαν δραστηριότητα που υποστηρίζει την εξέλιξη
λογισμικού αναφέρθηκε για πρώτη φορά στα τέλη της δεκαετίας του 1960. Η
έρευνα, από τον Lehman και άλλους, σε μία περίοδο είκοσι χρόνων οδήγησε
στην διατύπωση των οκτώ Νόμων της Εξέλιξης Λογισμικού:
* Συνεχής Αλλαγή -- Το λογισμικό πρέπει συνέχεια να εξελίσσεται, ή
  γίνεται όλοι και λιγότερο ικανοποιητικό.
* Αυξανόμενη Πολυπλοκότητα -- Όπως εξελίσσεται το λογισμικό, η
  πολυπλοκότητα του αυξάνεται εκτός κι αν γίνουν ενέργειες για την
  διατήρηση ή μείωση αυτής της πολυπλοκότητας.
* Αυτορρύθμιση -- Η Διαδικασία εξέλιξης του προγράμματος είναι
  αυτορρυθμιζόμενη με σχεδόν κανονική κατανομή από μετρήσεις
  χαρακτηριστικών του προϊόντος και της διαδικασίας.
* Αμετάβλητο Ποσοστό Εργασίας -- Ο μέσος όρος αποτελεσματικού παγκόσμιου
  ποσοστού δραστηριότητας σε ένα εξελισσόμενο πακέτο  λογισμικού είναι
  αμετάβλητο στην διάρκεια ζωή του προϊόντος.
* Διατήρηση της Οικειότητας -- Όπως εξελίσσεται το λογισμικό, όλα όσα
  συσχετίζονται με αυτό (π.χ. προγραμματιστές, προσωπικό πωλήσεων και
  χρήστες) πρέπει να διατηρήσουν την κυριαρχία τους στο περιεχόμενο και
  στη συμπριφορά του για να επιτύχουν ικανοποιητική ανάπτυξη. Η
  υπερβολική ανάπτυξη μειώνει αυτή την κυριαρχία. Ως εκ τούτου, η μέση
  σταδιακή ανάπτυξη παραμένει αμετάβλητη όσο εξελίσσεται το σύστημα.
* Συνεχής Ανάπτυξη -- Το λειτουργικό περιεχόμενο ενός προγράμματος
  πρέπει συνεχώς να αυξάνεται για να διατηρεί την ικανοποίηση χρήστη
  στη διάρκεια ζωής του.
* Πτώση Ποιότητας -- Η ποιότητα του λογισμικού θα φαίνεται να μειώνεται
  εκτός αν συτηρείται αυστηρά και προσαρμόζεται στις αλλαγές του
  λειτουργικού περιβάλλοντος.
* Σύστημα Ανατροφοδότησης -- Οι διαδικασίες εξέλιξης του λογισμικού
  αποτελούν πολυεπίπεδα, πολλαπλών βρόχων και πολλαπλών πρακτόρων
  συστήματα ανατροφοδότησης και πρέπει να αντιμετωπίζονται σαν τέτοια
  για να καταφέρουν σημαντική βελτίωση σε κάθε λογική βάση (με άλλα
  λόγια, η διαδικασία συντήρησης είναι παρόμοια με μια ευέλικτη
  διαδικασία).

Ένα από τα πιο σημαντικά ευρήματα της έρευνας του Lehman ήταν, ότι η
συντήρηση είναι εξελικτική ανάπτυξη και ότι οι αποφάσεις συντήρησης
διευκολύνονται με μια κατανόηση του τι συμβαίνει στο λογισμικό με την
πάροδο του χρόνου. Ένας άλλος τρόπος να σκεφτόμαστε την συντήρηση είναι
ως μια συνεχή ανάπτυξη που φιλοξενεί επιπλέον εισόδους(ή περιορισμούς)-
με άλλα λόγια, μεγάλα λογισμικά προγράμματα δεν είναι ποτέ ολοκληρωμένο
και συνεχίζει να εξελίσσεται. Όσο εξελίσσονται γίνονται πιο περίπλοκα
εκτός και εάν γίνει κάποια δράση για να μειωθεί η πολυπλοκότητα του. 

### *Κατηγορίες συντήρησης*
    [1, s3.1.8][2*, c1s1.8, c3s3.3]

Έχουν καθιερωθεί πέντε κατηγορίες (τύποι) συντήρησης για να ταξινομηθεί
ένα αίτημα συντήρησης: διορθωτική (corrective), προληπτική
(preventive), προσαρμοστική (adaptive), προσθετική (additive) και
βελτιωτική(perfective). Το πρότυπο ISO/IEC/IEEE 14764, 
επαναπανασυγκροτεί αυτές τις κατηγορίες συντήρησης ως είτε
διορθώσεις, ή βελτιώσεις, όπως φαίνεται στο [Σχήμα 2](#fig-softmainten-categ). 

{id="fig-softmainten-categ"}
![Σχήμα 2 Κατηγορίες Συντήρησης Λογισμικού.]
 (images/7.2-SoftMainten.png)

Το πρότυπο ISO/IEC/IEEE 14764 επίσης ορίζει μια έκτη κατηγορία 
-- έκτακτη συντήρηση:
  * Διορθωτική συντήρηση: η διαδραστική τροποποίηση ή διόρθωση ενός
    προϊόντος λογισμικού, που εκτελείται μετά την παράδοση με σκοπό να
    διορθώσει προβλήματα που εντοπίστηκαν.
  * Προληπτική συντήρηση: η τροποποίηση του προϊόντος λογισμικού μετά
    την παράδοση για να διορθωθούν κρυμμένα λάθη στο προϊόν λογισμικού
    πριν συμβούν στο ζωντανό σύστημα.
  * Προσαρμοστική συντήρηση: η τροποποίηση ενός προϊόντος λογισμικού,
    που εκτελείται μετά την παράδοση του με σκοπό να το διατηρήσει
    λειτουργικό σε περιβάλλον που μεταβάλλεται ή έχει μεταβληθεί. Η
    προσαρμοστική συντήρηση παρέχει βελτιώσεις απαραίτητες για να
    φιλοξενήσει τις αλλαγές στο περιβάλλον στο οποίο το προϊόν
    λογισμικού λειτουργεί (π.χ. μια αναβάθμιση στο λειτουργικό σύστημα
    οδηγεί σε αλλαγές στις εφαρμογές).
  * Προσθετική συντήρηση: η τροποποίηση ενός προϊόντος λογισμικού που
    εκτελείται μετά την παράδοση για να προσθέσει λειτουργικότητα ή
    χαρακτηριστικά για να βελτιώσει τη χρησιμότητα του προϊόντος. Η
    προσθετική συντήρηση διαφέρει από την βελτιωτική συντήρηση σε α)
    παρέχει επιπλέον νέες λειτουργίες ή χαρακτηριστικά για την βελτίωση
    της χρησιμότητας λογισμικού, απόδοσης, συντηρισημότητας ή άλλα
    χαρακτηριστικά ποιότητας λογισμικού και β) προσθέτει
    λειτουργικότητα ή χαρακτηριστικά με σχετικά μεγάλες προσθήκες ή
    αλλαγές για τη βελτίωση των γνωρισμάτων λογισμικού μετά την
    παράδοση.
  * Βελτιωτική συντήρηση: η τροποποίηση ενός προϊόντος λογισμικού μετά
    την παράδοση του με σκοπό να παρέχει βελτιώσεις στους χρήστες,
    βελτιώσεις στην τεκμηρίωση του και βελτίωση του κώδικα ώστε να
    βελτιωθούν οι επιδόσεις, συντηρησιμότητα ή άλλα χαρακτηριστικά
    λογισμικού.
  * Έκτακτη συντήρηση: Μη προγραμματισμένη τροποποίηση που
    πραγματοποιείται για να κρατησει ένα σύστημα λειτουργικό προσωρινά,
    ενώ εκκρεμεί διορθωτική συντήρηση. 


## Βασικά ζητήματα συντήρησης λογισμικού

Ένα σύνολο ζητημάτων πρέπει να τεθούν υπό διαχείριση, ώστε η συντήρηση
λογισμικούνα είναι αποτελεσματική. Η συντήρηση λογισμικού αναδεικνύει
ιδιαίτερες τεχνικές και διοικητικές προκλήσεις, για τους μηχανικούς
λογισμικού(π.χ. η πρόκληση του να προσπαθούν να βρουν το λάθος σε
μεγάλο περίπλοκο λογισμικό που έχει συγγραφεί από κάποιον άλλο). 

Ομοίως, σε μία ευέλικτη ρύθμιση, οι συντηρητές και οι προγραμματιστές
προσπαθούν συνεχώς να βεβαιωθούν ότι οι πελάτες βλέπουν την αξία στο
τέλος κάθε επανάληψης, ώστε οι δραστηριότητες συντήρησης ανταγωνίζονται
με την ανάπτυξη νέων χαρακτηριστικών για έγκριση από τον πελάτη. Ο
σχεδιασμόςμιας μελλοντικής έκδοσης, που συχνά συμπίπτει με την εφαρμογή
έκτακτων διορθώσεων για την τωρινή, μπορεί επίσης να αποβεί μια
πρόκληση στη ζυγοστάθμιση των έργων συντήρησης και ανάπτυξης. Η ενότητα
που ακολουθεί παρουσιάζει τεχνικά και διοικητικά ζητήματα, που
σχετίζονται με την συντήρηση λογισμικού. Έχουν ομαδοποιηθεί βάσει των
παρακάτω θεμάτων:

  * Τεχνικά ζητήματα
  * Διοικητικά ζητήματα
  * Κόστος συντήρησης
  * Μετρικές συντήρησης.

### *Τεχνικά ζητήματα*

#### Περιορισμένη κατανόηση
    [2*, c6s6.9]

Η περιορισμένη κατανόηση περιγράφει την αρχική κατανόηση ενός μηχανικού
λογισμικού πάνω σε λογισμικό που έχει δημιουργήσει κάποιος άλλος. Αυτό
απεικονίζεται στο πόσο γρήγορα ένας μηχανικός λογισμικού μπορεί να
καταλάβει που να αλλάξει ή να διορθώσει το λογισμικό. αναφέρεται στο
πόσο γρήγορα ένας μηχανικός λογισμικού μπορεί να καταλάβει, που να
κάνει αλλαγή ή διόρθωση σε ένα λογισμικό που δεν έχει αναπτύξει ο
ίδιος. Έρευνες δείχνουν ότι τουλάχιστον η μισή από την συνολική
προσπάθεια που καταβάλλεται για την συντήρηση λογισμικού, δαπανάται
στην κατανόηση του. Έτσι, φυσικά το θέμα της κατανόησης λογισμικού
φέρει μεγάλο ενδιαφέρον για τους μηχανικούς λογισμικού. Ένας αριθμός
από παράγοντες κατανόησης έχουν αναγνωριστεί: 1) τομέας γνώσης, 2)
πρακτικές προγραμματισμού (π.χ. ζητήματα εφαρμογής), 3) τεκμηρίωση, και
4) θέματα οργάνωσης και παρουσίασης. Η κατανόηση είναι πιο δύσκολή σε
μια απεικόνιση μέσω κειμένου (π.χ. στον πηγαίο κώδικα), όπου είναι
συχνά δύσκολο να παρακολουθήσεις την εξέλιξη του λογισμικού μέσα από
τις διάφορες εκδόσεις ή εκδοχές, αν οι αλλαγές δεν έχουν τεκμηριωθεί
και οι προγραμματιστές δεν είναι διαθέσιμοι για να τις εξηγήσουν. Ως εκ
τούτου, οι μηχανικοί λογισμικού αρχικά κατανοούν εν μέρει μόνο το
λογισμικό και πρέπει επομένως να γίνουν πολλά από τους μηχανικούς
λογισμικού για τον περιορισμό του φαινομένου αυτού. Πολλές τεχνικές
μπορούν να βοηθήσουν τους μηχανικούς να καταλάβουν το υπάρχον
λογισμικό, όπως η απεικόνιση και η αντίστροφη μηχανική χρησιμοποιώντας
βασισμένη στα εργαλεία γραφικές αναπαραστάσεις του κώδικα.

#### Έλεγχος
    [1, s6.2][2*, c9, c13s13.4.4]

Ο προγραμματισμός ελέγχου και οι δραστηριότητες συμβαίνουν κατά τη
διάρκεια επεξεργασίας των αιτημάτων τροποποίησης(MR) και των αναφορών
προβλημάτων(PR). Το κόστος, τόσο σε όρους χρήματος, όσο και χρόνου, του
επαναληπτικού ελέγχου σε μεγάλο μέρος του λογισμικό είναι αρκετά
σημαντικό. Ο συντηρητής πρέπει να αναπαράγει και να επαληθεύει τις
αλλαγές προγραμματίζοντας και τρέχοντας τις κατάλληλες δοκιμές -π.χ. η
παλινδρομική δοκιμή είναι σημαντική για την συντήρηση-, ώστε να
διασφαλίσει ότι οι αναφορές προβλημάτων είναι έγκυρες. Ο έλεγχος
παλινδρόμησης είναι η επιλεκτική δοκιμή του λογισμικού ή τμήματος του
για να επαληθευτεί ότι οι τροποποιήσεις δεν έχουν απρόβλεπτα
αποτελέσματα. Μια ακόμη πρόκληση είναι η εύρεση χρόνου για την
διεξαγωγή όσο περισσότερου ελέγχου γίνεται. Όταν διαφορετικά μέλη της
ομάδας συντήρησης δουλεύουν πάνω σε διαφορετικά προβλήματα, ο
συντονισμός μιας δοκιμής μπορεί να αποτελέσει πρόκληση. Να αποσυνδέεις
το λογισμικό για να το ελέγχεις μπορεί να φανεί δύσκολο αν το λογισμικό
εκτελεί κρίσιμες λειτουργίες. Το γνωστικό πεδίο Έλεγχος λογισμικού
παρέχει επιπλέον πληροφορίες και αναφορές στον έλεγχο λογισμικού και
στην υπόπαράγραφο του Ελέγχου παλινδρόμησης.

#### Ανάλυση επίδρασης {#impact-analysis}
    [1, s5.1.6][2*, c13s13.3]

Η ανάλυση επίδρασης είναι μια ολόκληρωμένη ανάλυση για την επίδραση μίας
προτεινόμενης αλλαγής στο υπάρχον λογισμικό. Οι συντηρητές χρειάζονται
λεπτομερή γνώση της δομής του λογισμικού και του περιεχομένου.
Χρησιμοποιούν αυτή τη πληροφορία για να εκτελέσουν την ανάλυση
επίδρασης, που εντοπίζει όλα τα συστήματα και τα προϊόντα λογισμικού,
που θα επηρεαστούν από την αίτηση αλλαγής λογισμικού και παρουσιάζει
μια εκτίμηση για τους απαιτούμενους πόρους για την επίτευξη αυτής της
αλλαγής. Η ανάλυση καθορίζει επίσης το ρίσκο που περιέχεται στην
υλοποίηση της αλλαγής. Το αίτημα αλλαγής, που μερικές φορές αναφέρεται
ως αίτημα τροποποίησης και συχνά ως Αναφορά προβλήματος, πρέπει αρχικά
να αναλυθεί και να μεταφραστεί σε όρους λογισμικού. Η ανάλυση επίδρασης
πραγματοποιείται αφού το αίτημα αλλαγής μπει στη διαδικασία διαχείρισης
σχηματισμών λογισμικού. Το πρότυπο ISO/IEC/IEEE 14764 αναφέρει ότι οι
εργασίες για την ανάλυση επίδρασης κάνουν τα εξής:

  * Αναπτύσσουν ένα σχέδιο αναγνώρισης για Αιτήματα
    τροποποίησης/Αναφορές προβλήματος,
  * Αναπτύσσουν ένα σχέδιο αναγνώρισης για κατηγοριοποίηση και δίνοντας
    προτεραιότητα στα Αιτήματα τροποποίησης/Αναφορές προβλήματος,
  * Καθορίζουν τις διαδικασίες για έναν χειριστή ναι υποβάλλει Αιτήματα
    τροποποίησης/Αναφορές προβλήματος,
  * Αναγνωρίζουν τις ανάγκες και τα ζητήματα πληροφόρησης που πρέπει να
    παρακολουθούνται και να αναφέρονται στους χρήστες και προσδιορίζουν
    τις μετρήσεις που παρέχουν σχόλια σχετικά με αυτές τις ανάγκες και
    και τα ζητήματα,
  * Καθορίζουν πως τρόποι υλοποίησης θα παρέχονται προσωρινά στους
    χειριστές,
  * Παρακολουθούν τις εργασίες μέχρι την αφαίρεση,
  * Καθορίζουν την ακόλουθη ανατροφοδότηση που παρέχεται στους χρήστες.

Οι συντηρητές λογισμικού συχνά χρησιμοποιούν τη σοβαρότητα ενός
προβλήματος σαν οδηγό όταν αποφασίζουν το πώς και πότε θα διορθωθεί ένα
πρόβλημα. Έπειτα ο συντηρητής εντοπίζει ποια εξαρτήματα του λογισμικού
επηρεάζονται, αναπτύσσουν διάφορες πιθανές λύσεις και τελικά,
προτείνουν ένα σχέδιο δράσης.

Αναλύσεις επιπτώσεων των προτεινόμενων αλλαγών συντήρησης συχνά
λαμβάνουν υπόψη διάφορους παράγοντες, όπως την κατηγορία δράσης, το
μέγεθος της τροποποίησης, το εμπεριεχόμενο κόστος, και οποιαδήποτε
επίπτωση στην απόδοση και στην ασφάλεια. Το λογισμικό που έχει
σχεδιαστεί λαμβάνοντας υπόψη την δυνατότητα συντήρησης διευκολύνει κατά
πολύ την ανάλυση επίδρασης. Περισσότερες πληροφορίες μπορούν να βρεθούν
στο γνωστικό πεδίο Διαχείριση σχηματισμών λογισμικού.

#### Συντηρησιμότητα
    [1, s8.8][2*, c12s12.5.5]

Το πρότυπο ISO/IEC/IEEE 14764 ορίζει την συντηρησιμότητα ως την ικανότητα
του προϊόντος λογισμικού να τροποποιείται. Τροποποιήσεις μπορεί να
περιλαμβάνουν διορθώσεις, βελτιώσεις ή προσαρμογές του λογισμικού στις
αλλαγές του περιβάλλοντος, καθώς και σε αλλαγές στις προδιαγραφές
απαιτήσεων και στις λειτουργικές προδιαγραφές.

Ως ένα σημαντικό χαρακτηριστικό της ποιότητας του λογισμικού, η
συντηρησιμότητα πρέπει να έχει προσδιοριστεί, αξιολογηθεί και ελεγχθεί
στη διάρκεια της ανάπτυξης του λογισμικού ώστε να μειωθεί το κόστος
συντήρησης. Όταν αυτές οι δραστηριότητες διεξάγονται επιτυχώς, η
συντηρησιμότητα του λογισμικού θα οφεληθεί. Η συντηρησιμότητα είναι
συχνά δύσκολο να επιτευχθεί γιατί δεν λαμβάνεται συχνά αρχικά υπόψη
στην διάρκεια της ανάπτυξης. Οι προγραμματιστές είναι συνήθως πιο
συγκεντρωμένοι σε άλλες δραστηριότητες και μπορεί να μην δώσουν αρκετή
σημασία στις απαιτήσεις συντήρησης. Αυτό μπορεί να οδηγήσει σε κακή
αρχιτεκτονική, έλλειψη  τεκμηρίωσης ή περιβάλλοντων ελέγχου λογισμικού,
που είναι κάποιοι από τους κύριους λόγους για την δυσκολία κατανόησης
του προγράμματος και την ανεπαρκή ανάλυση επίδρασης κατά τη διάρκεια
της συντήρησης. Η παρουσία συστηματικών και ώριμων διαδικασιών,
τεχνικών και εργαλείων, βοηθάει στην βελτίωση της συντηρησιμότητας του
λογισμικού.

Η διακυβευμένη δυνατότητα συντήρησης λογισμικού συνήθως αυξάνει το βάρος
των μηχανικών λογισμικού που το διατηρούν στο μέλλον. Με άλλλα λόγια
δημιουργεί τεχνικό χρέος. Τεχνικό χρέος συνήθως επικρατεί όταν οι
μηχανικοί λογισμικού επιδιώκουν να λήξουν εργασίες ανάπτυξης ή
συντήρησης πριν εξεταστούν διεξοδικά από ομότιμους. Αυτή η πρακτική
γενικά δημιουργεί ένα τεχνικό κόστος που θα απαιτήσει επιπλέον χρόνο
και προσπάθεια για να αντιμετωπιστούν κατά τη συντήρηση. Ειδικά, οι
μηχανικοί λογισμικού πρέπει να διερευνήσουν τρείς περιοχές σε βάθος
όταν αναφέρονται σε τεχνικό χρέος: 
1. Ποιότητα κώδικα έναντι συνάφειας: Δεν είναι όλα τα τεχνικά 
χρέη επείγοντα. 
2. Ευθυγράμμιση με οργανωσιακούς στόχους: Η αρχιτεκτονική 
λογισμικού πρέπει να αντικατοπτρίζει τους στόχους του οργανισμού. 
3. Απώλεια διαδικασίας: Εξασφάλιση συμπληρωματικών δεξιοτήτων των 
μηχανικών λογισμικού που εμπλέκονται.

### *Διοικητικά ζητήματα*


#### Ευθυγράμμιση με τους οργανωσιακούς στόχους
    [1, s9.1.8][2*, c2s2.3.1.2, c3s3.4]

Αυτή η ενότητα περιγράφει πως να βελτιστοποιηθούν δραστηριότητες και
οικονομικά συντήρησης λογισμικού για να ευθυγραμμιστούν με τους
οργανωτικούς στόχους και προτεραιότητες της επιχείρησης, των πελατών
και των χρηστών.

Σε πολλούς οργανισμούς η αρχική ανάπτυξη λογισμικού είναι βασισμένη σε
έργα(projects) με καθορισμένο χρόνο και κόστος. Ο κύριος στόχος είναι η
παράδοση ενός προϊόντος που ανταποκρίνεται στις ανάγκες των χρηστών,
χωρίς επιπλέον κόστος, και στην ώρα του. Αντίθετα, η συντήρηση
λογισμικού έχει ως στόχο την παράταση της ζωής του λογισμικού και την
διατήρησης της λειτουργικότητάς του για όσο το δυνατόν περισσότερο.
Μπορεί επίσης να εκτελείται για να ικανοποιήσει τις απαιτήσεις των
χρηστών για βελτιώσεις και αναβαθμίσεις λογισμικού.

Και στις δύο περιπτώσεις, τα οικονομικά της συντήρησης λογισμικού δεν
είναι τόσο προφανή όσο αυτά της ανάπτυξης λογισμικού. Σε οργανωτικό
επίπεδο, μπορεί να φανεί ώς μια δραστηριότητα που καταναλώνει
σημαντικούς πόρους χωρίς ξεκάθαρο μετρήσιμο όφελος για τον οργανισμό.
Κατά συνέπεια, δίνεται μεγαλύτερη βαρύτητα στην προσθήκη νέων
χαρακτηριστικών παρά σε άλλες δραστηριότητες συντήρησης(όπως η
ανακατασκευή, η ασφάλεια ή η βελτίωση της απόδοσης) ώστε να επιτευχθούν
οι σκοποί και οι στόχοι των πελατών λογισμικού, όπως επίσης και οι
περιορισμοί χρόνοι και προϋπολογισμού. Ωστόσο, τέτοιοι οργανωτικοί
στόχοι και περιορισμοί πρέπει να εξισοροοπούνται με τη συντήρηση
λογιμικού και τα μηχανολογικά πρότυπα, ώστε να αποφευχθεί η αποσύνθεση
του κώδικα και τεχνικά χρέη. 

Η εφαρμογή προσεγγίσεων διαχείρισης προϊόντος στη διαχείριση της
ανάπτυξης και συντήρησης λογισμικού μπορεί να βοήθησει τους
οργανισμούς:
  * Στην κατανόηση του συνολικού κόστους του λειτουργικού λογισμικού στη
    διάρκεια όλης της ζωής του
  * Στην σύγκριση κόστους και πλεονεκτημάτων της ανάπτυξης νέου
    λογισμικού έναντι της ενίσχυσης ήδη υπάρχοντος λογισμικού
  * Στην επίλυση ζητημάτων προσωπικού και και δεξιοτήτητων, αφού η ίδια
    ομάδα είναι υπεύθυνη για τη συντήρηση και την ανάπτυξη
  * Στην εστίαση στις απαιτήσεις συντηρησιμότητας από την αρχή, καθώς η
    ίδια ομάδα έχει ευθύνη τόσο για την ανάπτυξη όσο και για την
    συντήρηση.

#### Στελέχωση
    [1*, s6.4.13.3c][2*, c2s2.3.1.5, c10s10.4]

Καθώς η συντήρηση χρειάζεται λεπτομερή γνώση λογισμικού, οι οργανισμοί
πρέπει να είναι ενήμεροι για την ανάγκη να προσελκύουν και να διατηρούν
προσωπικό για την συντήρηση λογισμικού. Έφόσον η ενασχόληση μόνο με την
συντήρηση μπορεί να θεωρηθεί λιγότερο ενδιαφέρουσα, οι συντηρητές
λογισμικού μπορεί να νιώσουν σαν "πολίτες δεύτερης κλάσης", και ηθικά 
μπορεί να υποφέρει ως αποτέλεσμα, οδηγώντας σε φτωχή απόδοση ή υψηλή 
εναλλαγή προσωπικού. Οι οργανισμοί πρέπει να σχεδιάσουν της ομάδες 
και τους ρόλους ανάπτυξης και συντήρησης προσεκτικά και να προσφέρουν 
επαγγελματικές ευκαιρίες ανάπτυξης για το προσωπικό.

#### Διεργασία
    [1*, s6][2*, c5]

Ο κύκλος ζωής λογισμικού είναι μια σειρά από δραστηριότητες, μεθόδους,
πρακτικές και μετατροπές που χρησιμοποιούνται για την ανάπτυξη και την
συντήρηση του λογισμικού και των σχετικών προϊόντων. Σε επίπεδο
διαδικασίας οι δραστηριότητες συντήρησης λογισμικού μοιράζονται πολλά
κοινά με την ανάπτυξη λογισμικού (π.χ. η διαχείριση σχηματισμών
λογισμικού (SCM) είναι σημαντική και για τις δύο. Η συντήρηση απαιτεί
ωστόσο αρκετές δραστηριότητες που δεν εντοπίζονται στην ανάπτυξη
λογισμικού(βλ. παράγραφο[Μοναδικές δραστηριότητες](#uniq-activities)).

#### Διαχείριση προμηθευτών
    [1*, s6.1.2, s8.3, s8.8.2]

Η διαχείριση προμηθευτή διασφαλίζει ότι οι προμηθευτές της επιχείρησης
και οι επιδόσεις τους διαχειρίζονται κατάλληλα για να υποστηρίξουν την
απρόσκοπτη παροχή ποιότητας προϊόντος και υπηρεσιών όταν οι συντήρηση
σθμβδίζει με τους προμηθευτές. Η φύση της σχέσης του οργανισμού με τους
προμηθευτές και η προσέγγισή της στη διαχείριση προμηθευτών πρέπει να
καθορίζεται από τη φύση αυτών αυτών των προϊόντων και υπηρεσιών. Οι
εργολάβοι μπορούν να προσλαμβάνονται για την εκτέλεση εργασιών
συντήρησης και την εξωτερική ανάθεση και εξωχώρηση συντήρησης
λογισμικού είναι μια σημαντική βιομηχανία. Η εξωτερική ανάθεση
συντήρησης σημαίνει αντικατάσταση εσωτερικής δυνατότητας με δυνατότητα
εξωτερικών προμηθευτών. Προσεγγίσεις στις συμβάσεις συντήρησης
περιλαμβάνει τα ακόλουθα:
* Ατομική πηγή ή συνεργασία: Ένας προμηθευτής παρέχει όλες τις
  υπηρεσίες, ή ένας εξωτερικός ενοποιητής υπηρεσίας διαχειρίζεται την
  σχέση του οργανισμού με όλους τους προμηθευτές.
* Πολλαπλοί προμηθευτές: Τα προϊόντα και οι υπηρεσίες παρέχονται από
  περισσότερες από έναν ανεξάρτητους προμηθευτές. Αυτά συνδυάζονται σε
  μία ενιαία (ενεργοποιημένο μέσω λογισμικού) υπηρεσία. Οι πολλαπλοί
  προμηθευτές στις υπηρεσίες λογισμικού είναι ολοένα αυξανόμενα κοινές,
  επιτρέπονται από την ανάπτυξη του "οτιδήποτε σαν υπηρεσία"
  (XaaS) διεπαφές προγραμματισμού εφαρμογών(API), και πηγές δεδομένων.

Πολλοί οργανισμοί αναθέτουν εξωτερικά ολόκληρα χαρτοφυλάκια λογισμικών.
Τυπικά, αυτά τα χαρτοφυλάκια περιλαμβάνουν λογισμικό λογισμικό που δεν
είναι κρίσιμης σημασίας, αφού οι οργανισμοί δεν θέλουν να χάνουν τον
έλεγχο του λογισμικού που χρησιμοποιούνται στην βασική επιχείρηση. Μια
σημαντική πρόκληση για τους εξωτερικούς συνεργάτες είναι ο καθορισμός
του πεδίου εφαρμογής της υπηρεσίας συντήρησης που απαιτείται, τους
όρους της συμφωνίας υπηρεσίας-επιπέδου (SLA), και οι λεπτομέρειες
σύμβασης. Οι εξωτερικοί συνεργάτες πρέπει να επενδύουν σε υποδομές
καλής επικοινωνίας και ένα αποτελεσματικό γραφείο βοήθειας στελεχωμένο
με ανθρώπους που μπορούν να επικοινωνήσουν αποτελεσματικά με πελάτες
και χρήστες. Η εξωτερική ανάθεση απαιτεί σημαντική αρχική επένδυση και
την εγκατάσταση και την ανασκόπηση των διαδικασιών συντήρησης
λογισμικού που απαιτούν αυτοματοποίηση.

#### Οργανωσιακές πτυχές της συντήρησης
    [1, s9.1.8][2*, c10]

Οι οργανωσιακές πτυχές της συντήρησης περιέχουν τον καθορισμό των ομάδων
που θα είναι υπεύθυνες για τη συντήρηση λογισμικού. Όταν χρησιμοποιούμε
ευκίνητα μοντέλα κύκλου ζωής, ο προγραμματιστής διεξάγει επίσης
διαδικασίες συντήρησης, συμπεριφερόμενος ως προγραμματιστής και
συντηρητής. Άλλοι οργανισμοί προτιμούν η ομάδα που αναπτύσσει το
λογισμικό δεν το συντηρεί απαραίτητα όταν είναι λειτουργικό. Στην
απόφαση του που θα τοποθετηθεί η λειτουργία της συντήρησης λογισμικού,
πρέπει να αναρωτηθούν τα θετικά και τα αρνητικά κάθε εναλλακτικής.
Υπάρχουν ορισμένα μειονεκτήματα στο να συντηρεί ο προγραμματιστής το
λογισμικό αφού τεθεί στην παραγωγή, όπως ο κίνδυνος ότι η νέα ανάπτυξη
θα διαταράσσεται όταν οι προγραμματιστές πρέπει να παρευρεθούν σε
αποτυχίες και η πιθανή απώλεια γνώσης όταν οι προγραμματιστές
εγκαταλείπουν την οργανισμό, δεδομένου ότι λιγότερα άτομα είναι
εξοικειωμένα με το λογισμικό- αυτό θα μπορούσε επίσης να να οδηγήσει σε
χαμηλότερης ποιότητας τεκμηρίωση, καθώς λιγότερα άτομα εμπλέκονται.
Ωστόσο, η ύπαρξη χωριστής λειτουργίας συντήρησης έχει τις προκλήσεις
της, καθώς σε πολλούς μηχανικούς λογισμικού δεν αρέσει να περιορίζουν
την εργασία τους στην συντήρησης και μπορεί να είναι πιο πιθανό να
εγκαταλείψουν για μια πιο ενδιαφέρουσα εργασία. Επιπλέον, μια
διαδικασία παράδοσης πρέπει να τεθεί σε εφαρμογή μεταξύ προγραμματιστών
και συντηρητών, η οποία μερικές φορές οδηγεί σε τριβές μεταξύ των
ομάδων. 

Η εισαγωγή των διαδικασιών διαχείρισης προϊόντων έχει
ενθαρρύνει την προσέγγιση δημιουργίας μιας ενιαίας ομάδας, ιδίως για
την ανάπτυξη και συντήρησης λογισμικού που πρέπει να ανταποκρίνεται
γρήγορα σε αλλαγές στις ανάγκες πελατών και χρηστών. Επειδή υπάρχουν
πολλά πλεονεκτήματα και μειονεκτήματα σε κάθε επιλογή, η απόφαση θα
πρέπει να ληφθεί για κάθε περίπτωση ξεχωριστά. Αυτό που είναι σημαντικό
είναι ότι ο οργανισμός αναθέτει την καθήκοντα συντήρησης σε μια έμπειρη
ομάδα ή άτομο και να τηρεί ποιοτική τεκμηρίωση σχετικά με τις εργασίες
συντήρησης και όλες τις αλλαγές που γίνονται σε στο λογισμικό,
ανεξάρτητα από τις δομή του οργανισμού.


### *Κόστος συντήρησης λογισμικού* {#soft-maint-costs}

Οι μηχανικοί λογισμικού πρέπει να κατανοήσουν τις διάφορες κατηγορίες
συντήρησης λογισμικού που περιγράφονται στο 1.6. Η παρουσίαση των
τάσεων του κόστους ανά κατηγορίες συντήρησης μπορεί να δείξει στους
πελάτες πού δαπανάται η προσπάθεια συντήρησης για κάθε υποστηριζόμενο
σύστημα. Τα δεδομένα σχετικά με προσπάθεια συντήρησης ανά κατηγορία
μπορούν επίσης να χρησιμοποιηθούν για την ακριβή εκτίμηση του κόστους
της συντήρησης λογισμικού. Η εκτίμηση του κόστους είναι μια σημαντική
πτυχή του σχεδιασμού λογισμικού συντήρησης λογισμικού.


#### Τεχνικό χρέος και εκτίμηση κόστους
    [1, s6.1.7, s8.8.3.6][2*, c12.12.5]

Το τεχνικό χρέος γενικά κάνει τον κώδικα πιο ακριβό στη συντήρησή του
απ' ό,τι πρέπει να είναι. Το τεχνικό χρέος αντιπροσωπεύει την
προσπάθεια που απαιτείται για τη διόρθωση προβλημάτων που παραμένουν
στον κώδικα όταν μια εφαρμογή κυκλοφορεί. Αρκετές τεχνικές και δείκτες
μπορούν να βοηθήσουν τους μηχανικούς να μετρήσουν τεχνικό χρέος, όπως
το μέγεθος, την πολυπλοκότητα και τον αριθμό των τεχνικών ατελειών και
παραβιάσεων του ορθού αρχιτεκτονικού σχεδιασμού και πρακτικών
κωδικοποίησης στον πηγαίο κώδικα. Το πρότυπο ISO/IEC/IEEE 14764 παρέχει
προτάσεις για τη βελτίωση της συντηρησιμότητας, μεταξύ άλλων:
διασφάλιση της αναγνωσιμότητας, επιδίωξη δομημένου κώδικα, μείωση της
πολυπλοκότητας του κώδικα, παροχή ακριβή σχολίων κώδικα, χρήση
αναγνωριστικών και λευκών κενών, εξάλειψη των γλωσσικών αδυναμιών και
δομές που εξαρτώνται από τον μεταγλωττιστή, διευκόλυνση ανίχνευσης
σφαλμάτων, εξασφάλιση της ιχνηλασιμότητας του σχεδιασμού κώδικα,
διεξαγωγή επιθεωρήσεων και ελέγχου του κώδικα. Ένα προϊόν λογισμικού
πρέπει να εξελίσσεται, με την προσθήκη νέων χαρακτηριστικών και
δυνατοτήτων, και η βάση του κώδικά πρέπει να παραμένει συντηρήσιμη,
εύκολα κατανοητή και εύκολη στην περαιτέρω εξέλιξή της. Ένα κοινό
εμπόδιο για την αντιμετώπιση των τεχνικών χρέους - ή, στην
πραγματικότητα, της εφαρμογής οποιασδήποτε δυνητικής βελτίωσης - είναι
η αβέβαιη ανταμοιβή γι' αυτό. Αυτός είναι ο λόγος για τον οποίο είναι
τόσο σημαντικό για τους οργανισμούς να καθορίσουν τα ακόλουθα:
* την ποιότητα του τρέχοντος λογισμικού τους
* το τρέχον κόστος του τεχνικού τους χρέους
* τη δυνητική εξοικονόμηση από την επένδυση στη βελτίωση της ποιότητας
* τον αντίκτυπο των τρεχόντων ζητημάτων ποιότητας στην επιχείρησή τους

Επιπλέον, το τεχνικό χρέος είναι μόνο ένας παράγοντας από τους
πολλούς που συμβάλλουν στην υπερβολική απρογραμμάτιστη δουλειά -
θέματα ομάδας ή διαδικασίας μπορεί επίσης να χρειαστεί να κατανοηθούν
και να αντιμετωπιστούν. Τα σύγχρονα εργαλεία μπορούν να βοηθήσουν
στον εντοπισμό τέτοιων ζητημάτων, που σημαίνει ότι το τεχνικό χρέος
δεν πρέπει να αντιμετωπίζεται απομονωμένα, αλλά μέσω της εξέτασης
βαθύτερων αιτιών.


#### Εκτίμηση κόστους συντήρησης
    [1, s6.2.2, s9.1.4, s9.1.9-10][2*, c12s12.5.6]

Μια εκτίμηση του κόστους συντήρησης του λογισμικού θα πρέπει να
προετοιμάζεται νωρίς στην διαδικασία προετοιμασίας του λογισμικού. Το
κόστος θα πρέπει να είναι συνάρτηση του πεδίου εφαρμογής των
δραστηριοτήτων συντήρησης. Το πρότυπο ISO/IEC/IEEE 14764
προσδιόρισε διάφορους παράγοντες που θα πρέπει να περιλαμβάνονται, όπως
οι ακόλουθοι:
* Μετακινήσεις προς τις τοποθεσίες των χρηστών
* Εκπαίδευση για τους συντηρητές καθώς και τους χρήστες
* Κόστος και ετήσια συντήρηση για το περιβάλλον μηχανικής λογισμικού
  (SEE) και δοκιμές λογισμικού
* Κόστος προσωπικού (π.χ. μισθοί, παροχές)
* Άλλες δαπάνες πόρων, όπως αναλώσιμα
* Κόστος συντήρησης αδειών χρήσης λογισμικού
* Αλλαγές προϊόντων, διαχείριση προγραμμάτων 
* Μηχανικοί τοπικής εξυπηρέτησης
* Ενοικίαση εγκαταστάσεων για συντήρηση 

Επιπλέον, καθώς η συντήρηση και
η προσπάθειες ανάπτυξης εξελίσσονται, οι εκτιμήσεις θα πρέπει να
τροποποιούνται. Τα δεδομένα ιστορικής μέτρησης θα πρέπει να
χρησιμοποιούνται ως εισροές για την εκτίμηση κόστους συντήρησης.
Επιπλέον, οι εκτιμήσεις κόστους απαιτούνται επίσης κατά τη διάρκεια
των επιπτώσεων ανάλυσης ενός αιτήματος τροποποίησης (MR) ή μιας
αναφοράς προβλημάτος(PR). Η μέθος εκτίμησης του κόστους
(π.χ. παραμετρικό μοντέλο, σύγκριση με αναλογικά συστήματα, χρήση
εμπειρικών και ιστορικών δεδομένων) θα πρέπει να περιγράφεται. Οι
εκτιμήσεις των μεμονωμένων MRs ή PRs συνήθως περιλαμβάνουν την
εκτιμώμενη προσπάθεια που σχετίζεται με εκτέλεση μιας αλλαγής,
εκτιμήσεις πόρων και ένα εκτιμώμενο χρονοδιάγραμμα για την εφαρμογή
της αλλαγής.

### Μετρικές συντήρησης λογισμικού
    [1, s6.1.7][2*, c12]

Τα μετρήσιμα αντικείμενα συντήρησης λογισμικού περιλαμβάνουν διαδικασίες
συντήρησης, πόρους και προϊόντα. Οι μετρήσεις περιλαμβάνουν το μέγεθος,
την πολυπλοκότητα, την ποιότητα, την κατανοησιμότητα, την
συντηρησιμότητα και την προσπάθεια. Ένα χρήσιμο μέγεθος είναι το ποσό της
προσπάθειας (σε θέμα πόρων) που δαπανάται για τη διορθωτική, προληπτική,
προσαρμοστική, προσθετική και τελειοποιητική συντήρηση. 

Τα μέτρα πολυπλοκότητας και τεχνικού χρέους του λογισμικού μπορούν επίσης 
να ληφθούν με τη χρήση των διαθέσιμων εργαλείων. Τα μέτρα αυτά αποτελούν
ένα καλό σημείο εκκίνησης για τη μέτρηση της ποιότητας του λογισμικού.
Οι συντηρητές θα πρέπει να καθορίζουν ποια μέτρα είναι κατάλληλα για
έναν συγκεκριμένο οργανισμό με βάση τις ανάγκες του συγκεκριμένου
οργανισμού. Τα προγράμματα μέτρησης λογισμικού συζητούνται στο γνωστικό
χώρο της διαχείρισης μηχανικής λογισμικού. 

Το μοντέλο ποιότητας λογισμικού που περιγράφεται στο γνωστικό χώρο 
ποιότητας λογισμικού περιγράφει το προϊόν λογισμικού και τις διαδικασίες 
μέτρησης ειδικά για τη συντήρηση λογισμικού. Μετρήσιμα χαρακτηριστικά 
της συντηρησιμότητας περιλαμβάνουν τα ακόλουθα:
* Η διαδοχικότητα μετρά το βαθμό στον οποίο ένα σύστημα ή λογισμικό
  αποτελείται από συστατικά που είναι ανεξάρτητα, τέτοια ώστε μια
  αλλαγή σε ένα συστατικό να έχει ελάχιστη επίπτωση σε άλλα στοιχεία.
* Η δυνατότητα επαναχρησιμοποίησης μετρά πόσο καλά ένα συστατικό μπορεί
  να επαναχρησιμοποιηθεί.
* Η αναλυσιμότητα μετρά την προσπάθεια ή τους πόρους που πρέπει να
  δαπανήσει ο συντηρητής είτε για να διαγνώσει ελλείψεις ή αιτίες
  αποτυχίας ή να εντοπίσουν τα εξαρτήματα που πρέπει να να
  τροποποιηθούν.
* Η δυνατότητα τροποποίησης μετράει τη προσπάθεια του συντηρητή που
  συνδέεται με την εφαρμογή μιας συγκεκριμένης τροποποίησης χωρίς την
  εισαγωγή ελαττωμάτων ή την υποβάθμιση της υπάρχουσας ποιότητας του
  προϊόντος.
* Η δυνατότητα δοκιμής μετρά την προσπάθεια των συντηρητών και οι
  χρηστών για τη δοκιμή του τροποποιημένου λογισμικού. 

Άλλα μέτρα που χρησιμοποιούν οι συντηρητές λογισμικού περιλαμβάνουν 
τα ακόλουθα:
* Αξιοπιστία: Ο βαθμός στον οποίο ένα σύστημα ή λογισμικό εκτελεί
  συγκεκριμένες λειτουργίες κάτω από συγκεκριμένες συνθήκες για μια
  συγκεκριμένη περίοδο, συμπεριλαμβανομένων των εξής χαρακτηριστικών: 
    * Ωριμότητα: Πόσο καλά ένα σύστημα ή λογισμικό μπορεί να ανταποκριθεί
    στην ανάγκη για αξιοπιστία 
    * Διαθεσιμότητα: Αν ένα σύστημα ή λογισμικό είναι λειτουργικό και 
    προσβάσιμο 
    * Ανοχή σφαλμάτων: Πόσο καλά ένα σύστημα ή λογισμικό λειτουργεί παρά 
    το υλικά ή το λογισμικά σφάλματα 
    * Ανακτησιμότητα: Πόσο καλά ένα σύστημα ή λογισμικό μπορεί να να 
    ανακτήσει δεδομένα κατά τη διάρκεια ενός διακοπή ή αποτυχία
* Μέγεθος του λογισμικού (π.χ. λειτουργικό μέγεθος, LOC) 
* Αριθμός αιτήσεων συντήρησης, ανά χρονική περίοδο 
* Προσπάθεια ανά αίτηση συντήρησης 
* Χαρακτηριστικά του λογισμικού (π.χ., πλατφόρμα, υλικό,
  γλώσσα προγραμματισμού, πλαίσια).

Οι μετρήσεις συντήρησης μπορεί να να συλλέγονται, αναλύονται και
εξελίσσονται ανά κατηγορία για τη διευκόλυνση βελτίωσης και την παροχή
εικόνας για το πού δαπανάται το κόστος συντήρησης. Ο βαθμός της
προσπάθειας συντήρησης λογισμικού που δαπανάται για διάφορες εφαρμογές,
καταγεγραμμένες ανά κατηγορία, αποτελεί πολύτιμη επιχειρηματική
πληροφορία για χρήστες και τους οργανισμούς τους. Μπορεί επίσης να
επιτρέψει στον οργανισμό να προβεί σε μια εσωτερική σύγκριση των προφίλ
συντήρησης λογισμικού.


## Διεργασίες συντήρησης

Εκτός από τις τυπικές διαδικασίες μηχανικής λογισμικού και τις
δραστηριότητες που περιγράφονται στο πρότυπο ISO/IEC/IEEE 14764, μια 
σειρά από δραστηριότητες είναι μοναδικές για τους συντηρητές.

### *Διεργασίες συντήρησης λογισμικού*
    [1, s5.2][2*, c5]

{id="fig-softmainten-process"}
![Σχήμα 3 Διεργασίες Συντήρησης Λογισμικού (ISO/IEC/IEEE 14764).]
 (images/7.3-SoftMainten.png)

Οι διαδικασίες συντήρησης παρέχουν τις απαιτούμενες ενέργειες και τις
εισόδους και εξόδους για αυτές, όπως περιγράφονται στο πρότυπο 
ISO/IEC/IEEE 14764. Η συντήρηση είναι μια από τις τεχνικές διαδικασίες 
του κύκλου ζωής που παρουσιάζονται στο στο πρότυπο ISO/IEC/IEEE 12207. 
Το [Σχήμα 3](#fig-softmainten-process) δείχνει πώς οι διαδικασίες συντήρησης συνδέονται με άλλες 
διαδικασίες μηχανικής λογισμικού, οι οποίες αλληλεπιδρούν για να 
υποστηρίξουν το λειτουργικό λογισμικό. Οι διαδικασίες συντήρησης 
λογισμικού περιλαμβάνουν τα ακόλουθα:
* Προετοιμασία για συντήρηση
* Εκτέλεση της συντήρησης
* Εκτέλεση υλικοτεχνικής υποστήριξης
* Διαχείριση των αποτελεσμάτων της συντήρησης και λογιστικής

Πρόσφατα, οι ευέλικτες μεθοδολογίες, οι οποίες προωθούν ελαφρές
διαδικασίες, έχουν επίσης προσαρμοστεί στη συντήρηση. Αυτή η απαίτηση
προέκυψε από την ολοένα και αυξανόμενη ζήτηση για γρήγορη ανάκαμψη της
υπηρεσιών συντήρησης. Βελτίωση στις διαδικασίες συντήρησης λογισμικού
υποστηρίζεται από τα μοντέλα ωριμότητας της συντήρησης λογισμικού.


### *Δραστηριότητες συντήρησης λογισμικού και καθήκοντα* 
    [1, s6.1][2*, c6, c7]

Η διαδικασία συντήρησης περιλαμβάνει τις δραστηριότητες και καθήκοντα
που είναι απαραίτητα για τη λειτουργία και τροποποίηση ενός υπάρχοντος
συστήματος λογισμικού, ενώ ταυτόχρονα διατηρώντας την ακεραιότητά του.
Αυτές οι δραστηριότητες και τα καθήκοντα είναι ευθύνες του χειριστή και
του συντηρητή. Όπως έχει ήδη σημειωθεί, πολλά δραστηριότητες συντήρησης
είναι παρόμοιες με εκείνες των ανάπτυξης λογισμικού. Οι συντηρητές
εκτελούν ανάλυση, σχεδιασμό, κωδικοποίηση, δοκιμές και τεκμηρίωση.
Πρέπει να παρακολουθούν απαιτήσεις στις δραστηριότητές τους - όπως
ακριβώς και στην ανάπτυξη - και να ενημερώνουν την τεκμηρίωση όπως
αλλάζουν οι βασικές γραμμές. Το πρότυπο ISO/IEC/IEEE 14764 συνιστά όταν ένας
συντηρητής χρησιμοποιεί μια διαδικασία ανάπτυξης, η διαδικασία πρέπει
να είναι προσαρμοσμένη ώστε να ανταποκρίνεται σε συγκεκριμένες ανάγκες.

Ωστόσο, υπάρχει ένας αριθμός διαδικασιών, δραστηριοτήτων και πρακτικών
που εξειδικεύονται στη συντήρηση λογισμικού:
* Κατανόηση του προγράμματος: Αυτό περιλαμβάνει τις δραστηριότητες που
  απαιτούνται για την απόκτηση γενικής γνώσης του τι κάνει ένα προϊόν
  λογισμικού και πώς συνεργάζονται τα επιμέρους μέρη του.
* Μετάβαση: Πρόκειται για μια ελεγχόμενη και συντονισμένη ακολουθία
  δραστηριοτήτων κατά τη διάρκεια κατά την οποία το λογισμικό
  μεταφέρεται προοδευτικά από τον προγραμματιστή στην ομάδα λειτουργίας
  και συντήρησης.
* Αποδοχή/απόρριψη Αιτήσεων Τροποποίησης: Τροποποιήσεις που ζητούν
  εργασίες μεγαλύτερες από το συμφωνημένο μέγεθος, επίπεδο προσπάθειας
  ή επίπεδο πολυπλοκότητας μπορεί να απορριφθούν από τους συντηρητές
  και να αναδρομολογηθούν σε έναν προγραμματιστή.
* Γραφείο βοήθειας συντήρησης: Το γραφείο βοήθειας είναι ένα
  συντονισμένο από τους τελικούς χρήστες και τη συντήρηση σύστημα
  υποστήριξης που ενεργοποιεί την αξιολόγηση, την ιεράρχηση και την
  κοστολόγηση των αιτημάτων τροποποίησης και περιστατικών.
* Ανάλυση επιπτώσεων: Η ανάλυση επιπτώσεων προσδιορίζει τις περιοχές που
  επηρεάζονται από μια πιθανή αλλαγή.
* Δείκτες επιπέδου υπηρεσιών συντήρησης(SLIs), στόχοι επιπέδου υπηρεσιών
  (SLOs), SLAs, και λογισμικό συντήρησης και οι άδειες και συμβάσεις
  υλικού: Αυτές είναι συμβατικές συμφωνίες που περιγράφουν τις
  υπηρεσίες και τους ποιοτικούς στόχους της τρίτων μελών.

#### Δραστηριότητες παρακολούθησης και υποστήριξης
    [s6.4.13.3d5, s6.1.8][2*, c3s3.4]

Οι συντηρητές μπορούν επίσης να εκτελούν συνεχείς δραστηριότητες
υποστήριξης, όπως η τεκμηρίωση, SCM, επαλήθευση και επικύρωση
(V&V), επίλυση προβλημάτων, επιβεβαίωση ποιότητας λογισμικού
(SQA), ανασκοπήσεις και έλεγχοι. Μια άλλη σημαντική διαχείριση των των
αποτελεσμάτων της συντήρησης είναι αυτή της παρακολούθησης της
ικανοποίησης των πελατών.

#### Δραστηριότητες σχεδιασμού
    [1, s6.1.3, s8.7.2][2*, c10]

Μια σημαντική δραστηριότητα για τη συντήρηση λογισμικού είναι ο
σχεδιασμός, και αυτή η διαδικασία πρέπει να αντιμετωπίζει τα ζητήματα
που σχετίζονται με έναν αριθμό προοπτικών σχεδιασμού, όπως τις
ακόλουθες:
* Επιχειρησιακός σχεδιασμός (οργανωτικό επίπεδο)
* Σχεδιασμός συντήρησης (επίπεδο μετάβασης)
* Σχεδιασμός έκδοσης (επίπεδο λογισμικού)
* Σχεδιασμός ατομικού αιτήματος αλλαγής λογισμικού (επίπεδο αιτήματος)

Σε επίπεδο ατομικού αιτήματος, ο σχεδιασμός πραγματοποιείται κατά τη
διάρκεια της ανάλυσης επιπτώσεων. (Βλέπε ενότητα 2.1.3, Ανάλυση
επιπτώσεων). Η δραστηριότητα σχεδιασμού έκδοσης απαιτεί ο συντηρητής να
κάνει τα εξής:
* Συλλέγει τις ημερομηνίες διαθεσιμότητας των μεμονωμένων αιτημάτων
* Συμφωνεί με τους χρήστες σχετικά με το περιεχόμενο των επόμενων
  εκδόσεων
* Εντοπίζει πιθανές συγκρούσεις και αναπτύσσει εναλλακτικές λύσεις
* Αξιολογεί τον κίνδυνο μιας δεδομένης έκδοσης και αναπτύσσει ένα
  εφεδρικό σχέδιο σε περίπτωση που προκύψουν προβλήματα
* Ενημερώνει όλα τα ενδιαφερόμενα μέλη

Ενώ τα έργα ανάπτυξης λογισμικού έχουν τυπική διάρκεια από μήνες έως
μερικά χρόνια, η φάση της συντήρησης διαρκεί συνήθως πολλά χρόνια. Η
εκτίμηση των πόρων αποτελεί βασικό στοιχείο του σχεδιασμού της
συντήρησης. Ο σχεδιασμός της συντήρησης λογισμικού πρέπει να ξεκινά με
την απόφαση για την ανάπτυξη ενός νέου προϊόντος λογισμικού και θα
πρέπει να λαμβάνει υπόψη τους στόχους ποιότητας. Θα πρέπει να
αναπτυχθεί ένα έγγραφο σύλληψης, ακολουθούμενο από ένα σχέδιο
συντήρησης, και αυτά θα πρέπει να καλύπτουν τα ακόλουθα:
* Πεδίο εφαρμογής της συντήρησης λογισμικού
* Προσαρμογή των διαδικασιών και εργαλείων συντήρησης λογισμικού
* Προσδιορισμός της οργάνωσης συντήρησης του λογισμικού
* Εκτίμηση του κόστους συντήρησης λογισμικού

Ένα σχέδιο συντήρησης λογισμικού θα πρέπει να προετοιμάζεται κατά τη
διάρκεια της ανάπτυξης λογισμικού και θα πρέπει να καθορίζει τον τρόπο
με τον οποίο οι χρήστες θα ζητούν τροποποιήσεις και να αναφέρουν
προβλήματα ή ζητήματα. Ο σχεδιασμός της συντήρησης λογισμικού
αντιμετωπίζεται στο πρότυπο ISO/IEC/IEEE 14764. Τέλος, στο υψηλότερο επίπεδο
διαχείρισης, ο οργανισμός συντήρησης πρέπει να διεξάγει επιχειρησιακό
σχεδιασμό των διαδικασιών συντήρησης λογισμικού(π.χ. επικοινωνίες,
προϋπολογισμός, οικονομικές δραστηριότητες και δραστηριότητες
ανθρώπινων πόρων).

#### Διαχείριση διαμόρφωσης
    [1, s6.1.3c, s6.4.13.3d4][2*, c11s11.3]

Το πρότυπο ISO/IEC/IEEE 14764 περιγράφει την SCM ως ένα σύστημα ή μια υπηρεσία
που επιτρέπει την υποστήριξη της διαδικασία συντήρησης. Η διαδικασία
SCM θα πρέπει να προβλέπει την επαλήθευση, επικύρωση και τον έλεγχο
κάθε βήματος που απαιτείται για τον εντοπισμό, την εξουσιοδότηση, την
εφαρμογή και την έκδοση του προϊόντος λογισμικού και των περιουσιακών
στοιχείων του που υποβάλλονται σε αλλαγή.

Δεν αρκεί η παρακολούθηση μόνο των αιτημάτων τροποποίησης (MRs) ή των
αναφορών προβλημάτων (PRs). Κάθε αλλαγή που πραγματοποιείται στο προϊόν
λογισμικού και στην υποδομή του πρέπει να να ελέγχεται. Ο έλεγχος αυτός
καθιερώνεται με την εφαρμογή και την επιβολή μιας εγκεκριμένης
διαδικασίας SCM. Ο γνωστικός τομέας SCM εξετάζει το SCM λεπτομερέστερα,
καθώς και τη διαδικασία με την οποία υποβάλλονται, αξιολογούνται και
εγκρίνονται οι αιτήσεις τροποποίησης. Το SCM για τη συντήρηση
λογισμικού διαφέρει από το SCM για την ανάπτυξη λογισμικού στον αριθμό
των μικρών αλλαγών που πρέπει να ελεγχθούν στο επιχειρησιακό
περιβάλλον. Η διαδικασία SCM υλοποιείται με ανάπτυξη και τήρηση ενός
σχεδίου SCM και τις λειτουργικές διαδικασίες. Οι συντηρητές συμμετέχουν
σε συμβούλια ελέγχου διαμόρφωσης για τον προσδιορισμό του περιεχομένου
της επόμενης έκδοσης ή εκδοχής στην παραγωγή.

#### Ποιότητα λογισμικού
    [1, s6.1.6, s8.7.2][2*, c13s13.4]

Δεν αρκεί απλώς να ελπίζουμε ότι η συντήρηση του λογισμικού θα παράγει
υψηλότερη ποιότητα λογισμικού. Οι συντηρητές θα πρέπει να έχουν
αποτελεσματικό πρόγραμμα ποιότητας. Πρέπει να να εφαρμόζουν διαδικασίες
για την υποστήριξη της συνεχής βελτίωσης των διαδικασιών συντήρησης του
λογισμικού. Οι δραστηριότητες και τεχνικές για SQA, V&V, ανασκοπήσεις
και ελέγχους πρέπει να επιλέγονται σε συνεννόηση με όλες τις άλλες
διαδικασίες για να επιτευχθεί το επιθυμητό επίπεδο ποιότητας.
Συνιστάται επίσης ότι τόσο οι λειτουργίες, όσο και η συντήρηση
λογισμικού προσαρμόζονται και χρησιμοποιούν την παραγωγή της
διαδικασίας ανάπτυξης του λογισμικού, των τεχνικών και των παραδοτέων
(π.χ. εργαλεία δοκιμών και τεκμηρίωση) και τα αποτελέσματα των ελέγχων.
Περισσότερες λεπτομέρειες σχετικά με την ποιότητα του λογισμικού
μπορείτε να βρείτε στο γνωστικό τομέα της ποιότητας λογισμικού.

## Τεχνικές συντήρησης

Αυτό το θέμα εισάγει τις γενικά αποδεκτές τεχνικές που χρησιμοποιούνται
στη συντήρηση λογισμικού.

### *Κατανόηση προγράμματος*
    [2*, c6, c14s14.5]

Οι προγραμματιστές ξοδεύουν σημαντικό χρόνο διαβάζοντας και κατανοώντας
προγράμματα προκειμένου να να εφαρμόσουν αλλαγές. Οι περιηγητές κώδικα
είναι βασικά εργαλεία για την κατανόηση προγραμμάτων και είναι χρήσιμα
για την οργάνωση και την παρουσίαση του πηγαίου κώδικα. Η σαφής και
συνοπτική τεκμηρίωση βοηθά επίσης την κατανόηση του προγράμματος.

### *Ανασχεδιασμός λογισμικού*
    [2*, c7]

Η αναδιοργάνωση λογισμικού αναφέρεται στην εξέταση και τροποποίηση του
λογισμικού για να να το επανασυστήσει σε μια νέα μορφή. Περιλαμβάνει
την την επακόλουθη εφαρμογή της νέας μορφής. Συχνά αναλαμβάνεται όχι
για να βελτιώσει την συντηρησιμότητα, αλλά για να αντικαταστήσει το
παλιό κληρονομημένο λογισμικό. 
Η αναδιαμόρφωση είναι μια τεχνική ανασχεδιασμού που στοχεύει στην 
αναδιοργάνωση ενός προγράμματος χωρίς αλλαγή της συμπεριφοράς του. Η 
αναδιαμόρφωση επιδιώκει τη βελτίωση της εσωτερικής δομής και της 
συντηρησιμότητα του λογισμικού. Οι διαδικασίες αναδιαμόρφωσης μπορούν 
να χρησιμοποιηθούν κατά τη διάρκεια της συντήρησης για τον καθαρισμό 
της βάσης κώδικα πριν και μετά τις αλλαγές κώδικα. 
Στο πλαίσιο της ευέλικτης ανάπτυξης λογισμικού, η σταδιακή φύση
της συνεχούς ενσωμάτωσης (CI) συχνά απαιτεί ο κώδικας να
αναδιαμορφώνεται συνεχώς για να να διατηρηθεί η ποιότητα και η
αξιοπιστία του. Ως εκ τούτου, η συνεχής αναδόμηση υποστηρίζει τον
πτητικό κύκλο ζωής του λογισμικού παρέχοντας καλύτερους τρόπους για τη
μείωση και τη διαχείριση της αυξανόμενης πολυπλοκότητας των συστημάτων
λογισμικού, ταυτόχρονα βελτιώνοντας την παραγωγικότητα των
προγραμματιστών.

### *Αντίστροφη μηχανική*
    [2*, c7, c14s14.5]

Η αντίστροφη μηχανική είναι η διαδικασία ανάλυσης λογισμικού για τον
εντοπισμό των συστατικών στοιχείων του λογισμικού και των μεταξύ τους
σχέσεων και τη δημιουργία αναπαραστάσεων του λογισμικού σε σε άλλη
μορφή ή σε υψηλότερα επίπεδα αφαιρετικότητας. Η αντίστροφη μηχανική
είναι παθητική: δεν αλλάζει το λογισμικό ούτε οδηγεί σε νέο λογισμικό.
Προσπάθειες αντίστροφης μηχανικής παράγουν συνήθως γραφικές
αναπαραστάσεις διαφορετι γραφήματα ροής ελέγχου από τον πηγαίο κώδικα.
Οι τύποι αντίστροφης μηχανικής περιλαμβάνουν τα ακόλουθα:
* Επανα-τεκμηρίωση
* Ανάκτηση σχεδιασμού
* Αντίστροφη μηχανική δεδομένων - ανάκτηση λογικών σχημάτων από φυσικές
  βάσεις δεδομένων

Τα εργαλεία είναι το κλειδί για την αντίστροφη μηχανική και συναφείς
εργασίες, όπως η ανα-τεκμηρίωση και η ανάκτηση σχεδιασμού. Η
οπτικοποίηση λογισμικού είναι μια κοινή τεχνική αντίστροφης μηχανικής
που βοηθά τους μηχανικούς να εξερευνήσουν, να αναλύσουν και να να
κατανοήσουν τη δομή των συστημάτων λογισμικού, καθώς και την ανάπτυξη
και την εξέλιξή τους. Η οπτικοποίηση λογισμικού περιλαμβάνει την οπτική
κωδικοποίηση και την ανάλυση των συστημάτων λογισμικού,
συμπεριλαμβανομένων των πρακτικών ανάπτυξης λογισμικού, την εξέλιξη, τη
δομή και τον χρόνο εκτέλεσης της συμπεριφοράς του λογισμικού με τη
χρήση οπτικοποίησης πληροφοριών, γραφικών υπολογιστών και αλληλεπίδραση
ανθρώπου-υπολογιστή. Γενικά, τα εργαλεία οπτικοποίησης λογισμικού
συνοδεύονται από διάφορα ποιοτικά χαρακτηριστικά διασφάλισης, όπως
υπολογισμό μετρικών ποιότητας, εκτίμηση τεχνικού χρέους και ανίχνευση
κακών πρακτικών σχεδιασμού και κωδικοποίησης (κώδικας που βρωμάει).

### Συνεχής ολοκλήρωση, παράδοση, δοκιμές και ανάπτυξη
    [1, s6.4.13.3 Note 1]

Η αυτοματοποίηση της ανάπτυξης, λειτουργίας και εργασιών που σχετίζονται
με τη συντήρηση εξοικονομεί μηχανικούς πόρους. Όταν εφαρμόζεται
κατάλληλα, τέτοιες αυτοματοποιημένες εργασίες είναι γενικά ταχύτερες,
ευκολότερες και πιο αξιόπιστες από ό,τι θα ήταν αν εκτελούνταν
χειροκίνητα. Στο ISO14764 η αυτοματοποίηση αυτή περιλαμβάνει τη διανομή
και την εγκατάσταση του λογισμικού. Το DevOps υποστηρίζει την εν λόγω
αυτοματοποίηση, καθώς και τη δημιουργία, τη συσκευασία και την ανάπτυξη
αξιόπιστων και ασφαλή συστημάτων. Συνδυάζει την ανάπτυξη, τις
λειτουργίες και τη συντήρηση πόρων και διαδικασιών για την εκτέλεση CI,
την παράδοση, τη δοκιμή και την ανάπτυξη. 

Το CI είναι μια πρακτική μηχανικής λογισμικού που συγχωνεύει συνεχώς
τεχνουργήματα, συμπεριλαμβανομένου τις τροποποιήσεις του πηγαίου κώδικα
από όλους τους προγραμματιστές μιας ομάδας, σε μια κοινή κεντρική
γραμμή για την κατασκευή και δοκιμή του συστήματος που αναπτύσσεται. Με
το CI, τα μέλη μιας ομάδας μπορούν να ενσωματώσουν τις αλλαγές συχνά,
και κάθε ενσωμάτωση μπορεί να να επαληθεύεται από μια αυτοματοποιημένη
κατασκευή(συμπεριλαμβανομένων των δοκιμών) για τον εντοπισμό σφαλμάτων
το συντομότερο δυνατό. Ο θεμελιώδης στόχος του CI είναι να συλλαμβάνει
αυτόματα τις προβληματικές αλλαγές,όσο το δυνατόν νωρίτερα. Το CI
συμβάλλει στη διασφάλιση της κατάσταση λειτουργίας ενός συστήματος
λογισμικού σε διάφορα σημεία από τη δημιουργία έως την έκδοση, με
αποτέλεσμα τη βελτίωση της εμπιστοσύνης και της ποιότητας του προϊόντος
λογισμικού και τη βελτίωση της παραγωγικότητας στις ομάδες.
Συγκεκριμένα, το CI αυτοματοποιεί την κατασκευή και τις διαδικασίες
έκδοσης με τη συνεχή κατασκευή, συνεχή παράδοση, συνεχείς δοκιμές και
συνεχή ανάπτυξη.

*Η συνεχής παράδοση* είναι μια πρακτική μηχανικής λογισμικού που επιτρέπει
τις συχνές εκδόσεις νέων συστημάτων (συμπεριλαμβανομένου του
λογισμικού) σε περιβάλλοντα προσωρινής αποθήκευσης ή σε διάφορα
περιβάλλοντα δοκιμών μέσω της χρήσης αυτοματοποιημένων εργαλείων. Η
συνεχής παράδοση συγκεντρώνει συνεχώς τον πιο πρόσφατο κώδικα και τη
διαμόρφωση για τη δημιουργία υποψήφιων εκδόσεων.

*Η συνεχής δοκιμή* είναι μια πρακτική δοκιμής λογισμικού που περιλαμβάνει
τη δοκιμή του λογισμικού σε κάθε στάδιο του κύκλου της ζωής του
λογισμικού. Ο στόχος της συνεχούς δοκιμής είναι να η αξιολόγηση της
ποιότητας του λογισμικού σε κάθε βήμα της διαδικασίας συνεχούς
παράδοσης με δοκιμές νωρίς και συχνά. Η συνεχής δοκιμή περιλαμβάνει
διάφορα ενδιαφερόμενα μέρη, όπως προγραμματιστές και DevOps, SQA και
ομάδες λειτουργικών συστημάτων.

*Η συνεχής ανάπτυξη* είναι μια αυτοματοποιημένη διαδικασία ανάπτυξης
αλλαγών στην παραγωγή επαληθεύοντας τα προβλεπόμενα χαρακτηριστικά και
τις επικυρώσεις για τη μείωση του κινδύνου. Ο Martin Fowler, στο βιβλίο
του *Continuous Delivery*, επεσήμανε: "Ο μεγαλύτερος κίνδυνος για κάθε
προσπάθεια λογισμικού είναι ότι καταλήγετε να κατασκευάζετε κάτι που
δεν είναι χρήσιμο. Όσο νωρίτερα και συχνότερα έχετε λειτουργικό
λογισμικό μπροστά σε πραγματικούς χρήστες, τόσο γρηγορότερα θα
λαμβάνεις ανατροφοδότηση για να μαθαίνεις όσο πραγματικά πολύτιμο
είναι".

## Εργαλεία συντήρησης λογισμικού
    [1, c6s4][2*, c14]

Αυτό το θέμα περιλαμβάνει εργαλεία που είναι ιδιαίτερα σημαντικά στο
λογισμικό συντήρησης όπου το υπάρχον λογισμικό τροποποιείται. Τα
εργαλεία συντήρησης είναι αλληλένδετα με τα εργαλεία ανάπτυξης και
λειτουργίας. Μαζί, αποτελούν μέρος της SEE. Τα ακόλουθα είναι
παραδείγματα εργαλείων συντήρησης:
* Διαχείριση παραμέτρων, έκδοση κώδικας και εργαλεία αναθεώρησης κώδικα
* εργαλεία δοκιμής λογισμικού,
* εργαλεία αξιολόγησης της ποιότητας του λογισμικού (για αξιολόγηση του
  τεχνικού χρέους και της ποιότητας του κώδικα)
* Φέτες προγράμματος, οι οποίες επιλέγουν μόνο τα τμήματα ενός
  προγράμματος που επηρεάζονται από μια αλλαγή
* Στατικοί αναλυτές, οι οποίοι επιτρέπουν τη γενική προβολή και
  περιλήψεις του περιεχομένου του προγράμματος
* Δυναμικοί αναλυτές, οι οποίοι επιτρέπουν την συντηρητή να παρακολουθεί
  τη διαδρομή εκτέλεσης του ενός προγράμματος
* Αναλυτές ροής δεδομένων, οι οποίοι επιτρέπουν στον συντηρητή να
  παρακολουθεί όλες τις πιθανές ροές δεδομένων ενός προγράμματος
* Διασταυρωτές παραπομπών, οι οποίοι δημιουργούν ευρετήρια των στοιχείων
  του προγράμματος
* Αναλυτές εξαρτήσεων, οι οποίοι βοηθούν τους συντηρητές να αναλύσουν
  και να κατανοήσουν τις αλληλεπιδράσεις μεταξύ των συστατικών ενός
  προγράμματος

Τα εργαλεία αντίστροφης μηχανικής υποστηρίζουν την τη διαδικασία
δουλεύοντας προς τα πίσω από ένα υπάρχον προϊόν για τη δημιουργία
αντικειμένων όπως προδιαγραφές και περιγραφές σχεδιασμού, τα οποία
μπορούν στη συνέχεια να μετασχηματιστούν για να δημιουργήσουν ένα νέο
προϊόν από ένα παλιό. Οι συντηρητές χρησιμοποιούν επίσης δοκιμές
λογισμικού, SCM, τεκμηρίωση λογισμικού και εργαλεία μέτρησης
λογισμικού.
