# Έλεγχος λογισμικού {#softtesting}

## Ακρωνύμια

|API	|Application Program Interface
|TDD	|Test-Driven Development
|XP 	|Extreme Programming


## Εισαγωγή

Οι έλεγχοι λογισμικού αποτελούνται από τη *δυναμική* επικύρωση, ότι ένα 
σύστημα υπό δοκιμή (SUT) παρέχει *αναμενόμενες* συμπεριφορές σε ένα *πεπερασμένο*
σύνολο από περιπτώσεις δοκιμής, κατάλληλα *επιλεγμένες* από τον ως
συνήθως άπειρο τομέα εκτέλεσης.
Στην παραπάνω δήλωση, οι λέξεις σε πλάγια γραφή αντιστοιχούν σε βασικά
ζητήματα στην περιγραφή του γνωστικού πεδίου Έλεγχος Λογισμικού. Αυτοί 
οι όροι συζητούνται παρακάτω.

  * Σύστημα υπό Δοκιμή: Αυτός ο όρος μπορεί να αναφέρεται στο
  αντικείμενο ελέγχου, το οποίο θα μπορούσε να είναι ένα πρόγραμμα, ένα
  προϊόν λογισμικού, μια εφαρμογή, μια εφαρμογή προσανατολισμένη στις υπηρεσίες 
  (π.χ. υπηρεσίες ιστού, μικροϋπηρεσίες), ενδιάμεσο λογισμικό (Υλικό/Λογισμικό), 
  μια σύνθεση υπηρεσιών, ένα σύστημα, ένα σύστημα συστημάτων ή ένα Οικοσύστημα. 

  * Δοκιμαστική Περίπτωση: Μια δοκιμαστική περίπτωση αποτελεί τον προσδιορισμό όλων
  των οντοτήτων που είναι απαραίτητες για την εκτέλεση, όπως οι τιμές εισόδου, 
  οι συνθήκες εκτέλεσης και οι χρονικές συνθήκες, η διαδικασία δοκιμής και τα αναμενόμενα
  αποτελέσματα (π.χ. παραγόμενες τιμές, αλλαγές κατάστασης, μηνύματα εξόδου).
  Οι τιμές εισόδου από μόνες τους δεν είναι πάντα αρκετές για την περιγραφή των 
  δοκιμαστικών περιπτώσεων, διότι το σύστημα υπό δοκιμή μπορεί να αντιδράσει με 
  διαφορετικές συμπεριφορές στην ίδια είσοδο, ανάλογα, για παράδειγμα, με την κατάσταση
  του συστήματος ή τις συνθήκες του περιβάλλοντος. Ένα σύνολο δοκιμαστικών περιπτώσεων
  ονομάζεται συνήθως *σύνολο δοκιμών* (test suite).

  * Δυναμική: Η δυναμική επικύρωση απαιτεί την εκτέλεση του συστήματος υπό δοκιμή 
  σε ένα σύνολο δοκιμών. Οι στατικές τεχνικές συμπληρώνουν τις δυναμικές δοκιμές
  και καλύπτονται στην ενότητα Ποιότητα Λογισμικού. Αξίζει να σημειωθεί ότι η ορολογία
  δεν είναι ενιαία μεταξύ διαφορετικών κοινοτήτων, και κάποιες χρησιμοποιούν τον όρο *έλεγχος*
  για να αναφερθούν και στις στατικές τεχνικές.

  * Πεπερασμένο: Ακόμα και σε ένα απλό σύστημα υπό δοκιμή, η εκτέλεση όλων των 
  δυνατών δοκιμαστικών περιπτώσεων (δηλαδή η εξαντλητική δοκιμή) θα μπορούσε να 
  διαρκέσει μήνες ή και χρόνια. Συνεπώς, στην πράξη, οι δοκιμές στοχεύουν σε ένα
  υποσύνολο από όλες τις δυνατές δοκιμαστικές περιπτώσεις που καθορίζονται από διαφορετικά
  κριτήρια. Η δοκιμή αποτελεί πάντα έναν συμβιβασμό μεταξύ περιορισμένων πόρων και 
  προγραμματισμένων χρονοδιαγραμμάτων αφενός και απαραίτητων απεριόριστων απαιτήσεων δοκιμής αφετέρου.

  * Επιλεγμένες: Ο εντοπισμός του καταλληλότερου κριτηρίου επιλογής υπό δεδομένες 
  συνθήκες είναι ένα πολύπλοκο πρόβλημα. Διάφορες τεχνικές μπορούν να ληφθούν υπόψη και 
  να συνδυαστούν για να αντιμετωπιστεί αυτό το πρόβλημα, όπως η ανάλυση κινδύνου, 
  οι απαιτήσεις λογισμικού, η μείωση κόστους, η ικανοποίηση χαρακτηριστικών ποιότητας, ο καθορισμός 
  προτεραιότητας και η ανίχνευση αποτυχιών. Οι πολλές προτεινόμενες τεχνικές ελέγχου διαφέρουν 
  στον τρόπο με τον οποίο επιλέγεται το σύνολο δοκιμών, και οι μηχανικοί λογισμικού πρέπει να
  γνωρίζουν ότι διαφορετικά κριτήρια επιλογής μπορεί να οδηγήσουν σε πολύ διαφορετικούς βαθμούς αποτελεσματικότητας.

  * Αναμενόμενες: Για κάθε εκτελεσθείσα δοκιμή, πρέπει να είναι δυνατό, αν και 
  δεν είναι πάντα εύκολο, να αποφασιστεί εάν τα παρατηρούμενα αποτελέσματα του 
  συστήματος υπό δοκιμή αντιστοιχούν στα αναμενόμενα. Πράγματι, η παρατηρούμενη
  συμπεριφορά μπορεί να ελεγχθεί έναντι των αναγκών του χρήστη (συνήθως αναφέρεται
  ως έλεγχος επικύρωσης), έναντι μιας προδιαγραφής (έλεγχος επαλήθευσης) ή ίσως έναντι
  της προβλεπόμενης συμπεριφοράς από τις σιωπηρές απαιτήσεις ή προσδοκίες.
 (βλ. Ενότητα 4.3, Προδιαγραφή Απαιτήσεων Βασισμένη σε Κριτήρια Αποδοχής στο 
 γνωστικό πεδίο Απαιτήσεις λογισμικού).

Όπως φαίνεται και από αυτήν τη συζήτηση, ο έλεγχος λογισμικού είναι μια διαδεδομένη 
και ολιστική δραστηριότητα που περιλαμβάνει όλα τα βήματα του κύκλου ζωής ανάπτυξης
μιας διεργασίας (π.χ. παραδοσιακή ανάπτυξη ή ανάπτυξη αριστερής μετατόπισης). 
Το υπόλοιπο του κεφαλαίου παρουσιάζει τα βασικά στοιχεία του ελέγχου λογισμικού και 
τις προκλήσεις του, θέματα και κοινώς αποδεκτές πρακτικές και λύσεις.


## Κατανομή των θεμάτων για τον έλεγχο λογισμικού

![Σχήμα 5.1 Κατανομή των θεμάτων στο γνωστικό πεδίο Έλεγχος λογισμικού.](images/5-SoftTest.png)

Στο Σχήμα 5.1 απεικονίζεται η κατανομή των θεμάτων
για τα γνωστικά πεδία του ελέγχου λογισμικού. Ο πίνακας των Θεμάτων έναντι των Αναφορικών Υλικών παρέχει μια πιο 
λεπτομερή ανάλυση στο τέλος αυτής της ενότητας.Το πρώτο θέμα, οι βασικές αρχές στον έλεγχο λογισμικού, καλύπτει
τους βασικούς ορισμούς στο πεδίο Έλεγχος Λογισμικού, τη βασική
ορολογία, τα βασικά ζητήματα και τη σχέση των δοκιμών λογισμικού με
άλλες δραστηριότητες.

Το δεύτερο θέμα, Επίπεδα Δοκιμών, περιλαμβάνει δύο (ορθογώνια)
υποθέματα. Το πρώτο υπο-θέμα, o στόχος του ελέγχου, καταγράφει 
τα επίπεδα στα οποία παραδοσιακά διαχωρίζονται οι δοκιμές μεγάλων 
λογισμικών, και το δεύτερο υπο-θέμα, οι Στόχοι Ελέγχου, αφορά
τις δοκιμές υπό συγκεκριμένων συνθηκών ή ιδιοτήτων.
Δεν εφαρμόζονται όλοι οι τύποι δοκιμών σε κάθε προϊόν λογισμικού,
ούτε και καταγράφεται κάθε πιθανός τύπος. Ο στόχος και ο σκοπός του ελέγχου μαζί καθορίζουν πως ορίζεται το
σύνολο δοκιμών, αναφορικά με την συνοχή του (πόσες δοκιμές είναι
αρκετές για την επίτευξη του καθορισμένου σκοπού;) όσο και  με τη
σύνθεση του (ποιες περιπτώσεις δοκιμών πρέπει να επιλεχθούν για την
επίτευξη του καθορισμένου σκοπού;). (Παρ'όλα αυτά, συνήθως, η τοποθέτηση 
« για την επίτευξη του καθορισμένου σκοπού » παραμένει υπονοουμένη και
τίθεται μόνο το πρώτο μέρος των δύο παραπάνω ερωτήσεων).
Τα κριτήρια, που απευθύνονται στην πρώτη ερώτηση, είναι τα κριτήρια
επάρκειας ελέγχου, ενώ αυτά που απευθύνονται στη δεύτερη ερώτηση
είναι τα κριτήρια επιλογής ελέγχου.

Αρκετές Τεχνικές Δοκιμών έχουν αναπτυχθεί τις τελευταίες δεκαετίες
και ακόμη προτείνονται νέες.
Συνεπώς, το τρίτο θέμα καλύπτει γενικώς αποδεκτές και τυποποιημένες τεχνικές.

Οι μετρικές, που σχετίζονται με τον έλεγχο, αντιμετωπίζονται στο τέταρτο
θέμα, ενώ θέματα σχετικά με τη διεργασία ελέγχου καλύπτονται στο πέμπτο.

Ο Έλεγχος Λογισμικού στις Διαδικασίες Ανάπτυξης και τους Τομείς Εφαρμογής 
περιγράφεται στο έκτο θέμα, και ο Έλεγχος των και μέσω Αναδυόμενων Τεχνολογιών 
περιγράφεται στο έβδομο θέμα.

Τέλος, τα εργαλεία ελέγχου λογισμικού παρουσιάζονται στο όγδοο θέμα.

## Βασικές αρχές  στον έλεγχο λογισμικού

Αυτή η ενότητα παρέχει μια επισκόπηση των ζητημάτων που αφορούν το κύριο έλεγχοο 
και τη σχέση του ελέγχου με τις άλλες δραστηριότητες. Οι περισσότεροι όροι ελέγχου που 
χρησιμοποιούνται εδώ επίσης ορίζονται. 
Μια πιο κατανοητική επισκόπηση της ορολογίας που σχετίζεται με τον έλεγχο μπορεί 
να βρεθεί στις αναφορές.

### Σφάλματα έναντι αποτυχιών

Πολλοί όροι χρησιμοποιούνται στη βιβλιογραφία τεχνολογίας λογισμικού
για να περιγράψουν μια δυσλειτουργία: ιδίως η έννοια του **σφάλματος** 
(βλ. για σύγκριση, τον όρο **ελάττωμα** στην Ενότητα 3.2, Χαρακτηρισμός Ελαττωμάτων
στην Ποιότητα Λογισμικού), της **αποτυχίας** και του **λάθους**. 

Είναι απαραίτητος ο ξεκάθαρος διαχωρισμός μεταξύ της **αιτίας** μιας δυσλειτουργίας 
(για την οποία χρησιμοποιείται ο όρος **σφάλμα**) και ενός ανεπιθύμητου
αποτελέσματος που παρατηρείται στη διανεμόμενη υπηρεσία του συστήματος (μια **αποτυχία**). 
Πράγματι, μπορεί να υπάρχουν σφάλματα στο λογισμικό, τα οποία δεν εκδηλώνονται 
ποτέ ως αποτυχίες (βλ. θέμα [Θεωρητικοί και πρακτικοί περιορισμοί του ελέγχου](#theor-practical-limit-testing),
στην Ενότητα 1.2.8).
Ως εκ τούτου, οι δοκιμές μπορούν να αποκαλύψουν αποτυχίες, αλλά τα
σφάλματα που τα προκαλούν είναι αυτά που μπορούν και πρέπει να αφαιρεθούν.

Πάραυτα, πρέπει να αναγνωριστεί ότι η αιτία της αποτυχίας δεν μπορεί
να καθοριστεί απερίφραστα. Γενικά, δεν υπάρχουν θεωρητικά κριτήρια
τα οποία να μπορούν να προσδιορίσουν οριστικά το σφάλμα που προκάλεσε
μια παρατηρούμενη αποτυχία. Το σφάλμα μπορεί να πρέπει να τροποποιηθεί 
για να αφαιρεθεί η αποτυχία, αλλά και άλλες τροποποιήσεις μπορεί να δουλεύουν.
Για να αποφευχθεί η **ασάφεια**, μπορεί κάποιος να αναφερθεί σε **αποτυχίες
προκαλούμενες από εισροές** αντί σφαλμάτων, αυτά τα σύνολα εισόδων
που προκάλεσαν την αποτυχία.


### Βασικά ζητήματα 

Αυτή η υποκατηγορία παρέχει μία επισκόπηση των κύριων θεμάτων ελέγχου.

#### Δημιουργία Περιπτώσεων Ελέγχου

Η **δημιουργία** ή **παραγωγή περιπτώσεων ελέγχου** (test case) δημιουργεί το σύνολο 
δοκιμών (test suite) που είναι χρήσιμο για τον έλεγχο του συστήματος υπό δοκιμή (SUT) 
για συγκεκριμένους σκοπούς (π.χ. καταλληλότητα, ακρίβεια ή αξιολόγηση).
Καθώς η παραγωγή περιπτώσεων ελέγχου είναι μία από τις πιο σημαντικές και εντατικές 
δραστηριότητες του ελέγχου λογισμικού, συνήθως υποστηρίζεται από προσεγγίσεις, 
τεχνικές και εργαλεία για την αυτοματοποίηση της διαδικασίας.

#### Κριτήρια επιλογής και επάρκειας ελέγχου 

Ένα κριτήριο επιλογής ελέγχου είναι ένα μέσο για την επιλογή των περιπτώσεων
ελέγχου ή για τον καθορισμό ότι ένα σύνολο δοκιμών είναι
επαρκές για έναν συγκεκριμένο σκοπό. Η επιλογή των περιπτώσεων ελέγχου,
αποσκοπεί στο να μειώσει την πληθικότητα (cardinality) του συνόλου δοκιμών ενώ
ταυτόχρονα να διατηρήσει την ίδια αποτελεσματικότητα σε όρους κάλυψης ή 
ρυθμού ανίχνευσης αποτυχιών. Τα κριτήρια επάρκειας ελέγχου μπορούν να 
χρησιμοποιηθούν για να αποφασιστεί πότε επιτεύχθηκε επαρκής δοκιμή.

#### Προτεραιοποίηση/Ελαχιστοποίηση

Μπορούν να υιοθετηθούν κατάλληλες στρατηγικές για την επιλογή ή 
την προτεραιοποίηση των δοκιμαστικών περιπτώσεων προκειμένου να βελτιωθεί 
η αποτελεσματικότητα της δοκιμής. Η **προτεραιοποίηση** των δοκιμαστικών περιπτώσεων 
αποσκοπεί στον καθορισμό μιας σειράς εκτέλεσης ελέγχων σύμφωνα με κάποια κριτήρια 
(π.χ. κάλυψη, ρυθμός ανίχνευσης αποτυχιών, ομοιότητα και κίνδυνος), ώστε 
τα τεστ με υψηλότερη προτεραιότητα να εκτελούνται πριν από αυτά με χαμηλότερη προτεραιότητα.
Η ελαχιστοποίηση των περιπτώσεων δοκιμής συνήθως στοχεύει στο να μειώσει ένα σύνολο δοκιμών 
αφαιρώντας τα περιττά τεστ σύμφωνα με κάποιο κριτήριο ή σκοπό.

#### Σκοπός του Ελέγχου

Διαφορετικοί καλά ορισμένοι σκοποί μπορούν να καθοδηγήσουν τη δραστηριότητα των ελέγχων:
είναι μόνο μέσω της εξέτασης ενός συγκεκριμένου σκοπού ότι ένα σύνολο δοκιμών μπορεί να 
δημιουργηθεί (επιλεγεί), εκτελεστεί, και αξιολογηθεί (βλ. Ενότητα 2 για περισσότερες λεπτομέρειες).

#### Αξιολόγηση και Πιστοποίηση

Ο έλεγχος πρέπει να επικεντρώνεται σε συγκεκριμένες (υποχρεωτικές) προδιαγραφές, όπως απαιτήσεις, 
νόμους και πρότυπα. Οι περιπτώσεις δοκιμών πρέπει να δημιουργούνται και να εκτελούνται για να 
παρέχουν αποδείξεις που είναι χρήσιμες για την αξιολόγηση και/ή την πιστοποίηση της συμμόρφωσης
με τις επιλεγμένες προδιαγραφές. Συνήθως, η αξιολόγηση και η πιστοποίηση των αποτελεσμάτων των ελέγχων
περιλαμβάνουν την επαλήθευση ότι οι περιπτώσεις δοκιμών έχουν προέλθει και δημιουργηθεί χρησιμοποιώντας 
τις αρχικές απαιτήσεις, υιοθετώντας ένα διαδικαστικό έλεγχο διαμόρφωσης (configuration control process) 
και χρησιμοποιώντας επαναλήψιμες διαδικασίες.

#### Διαδικασία ελέγχου για την Βελτίωση/Εξασφάλιση της ποιότητας

Η διαδικασία ελέγχου (testing) έχει πολλές πτυχές, συμπεριλαμβανομένων της βελτίωσης και εξασφάλισης της ποιότητας.
Αυτά τα χαρακτηριστικά περιλαμβάνουν σχεδιασμένες και συστηματικές διαδικασίες υποστήριξης και δραστηριότητες 
που επιδιώκουν να επιτύχουν εμπιστοσύνη ότι το σύστημα υπό δοκιμή (SUT) πληροί καθορισμένες τεχνικές ή ποιοτικές 
απαιτήσεις. Έτσι, η **βελτίωση** και **εξασφάλιση** της ποιότητας περιλαμβάνουν τον καθορισμό μεθόδων, εργαλείων, 
δεξιοτήτων και πρακτικών για την επίτευξη συγκεκριμένου επιπέδου ποιότητας και στόχων. Η λίστα των κύριων 
χαρακτηριστικών ποιότητας που μπορεί να μετρήσει ή να αξιολογήσει η διαδικασία ελέγχου αναφέρεται στο 
πρότυπο ISO/IEC 25010:2011 [9]. (βλ. Ενότητα 1.3.2, Ποιότητα Προϊόντος Λογισμικού, στο γνωστικό πεδίο Ποιότητα Λογισμικού.)

#### Το πρόβλημα του χρησμού (The Oracle Problem)

Ένα σημαντικό στοιχείο της διαδικασίας ελέγχου είναι ο χρησμός (oracle). Πράγματι, μια δοκιμή έχει νόημα μόνο αν είναι 
δυνατόν να αποφανθεί η παρατηρηούμενη έκβασή της. Ο χρησμός μπορεί να είναι οποιοσδήποτε ανθρώπινος ή μηχανικός παράγοντας 
που αποφασίζει εάν το σύστημα υπό δοκιμή (SUT) συμπεριφέρθηκε σωστά σε κάθε δοκιμή και σύμφωνα με τα αναμενόμενα αποτελέσματα.
Συνεπώς, ο χρησμός παρέχει μια απόφαση "επιτυχίας" ή "αποτυχίας". Ο χρησμός δεν μπορεί πάντα να αποφασίσει: σε αυτές τις 
περιπτώσεις, το αποτέλεσμα της δοκιμής κατατάσσεται ως ακατάληκτο. Υπάρχουν πολλοί τύποι χρησμών - για παράδειγμα, 
σαφής προσδιορισμός προδιαγραφών, συμπεριφορικά μοντέλα και σημειώσεις κώδικα. Η αυτοματοποίηση των μηχανοποιημένων χρησμών
μπορεί να είναι δύσκολη και ακριβή.

#### Θεωρητικοί και πρακτικοί περιορισμοί 

Η θεωρία των δοκιμών προειδοποιεί για απόδοση αδικαιολόγητης
εμπιστοσύνης σε μία σειρά επιτυχημένων δοκιμών. Δυστυχώς,
τα περισσότερα καθιερωμένα αποτελέσματα της θεωρίας των δοκιμών είναι τα
αρνητικά αποτελέσματα στα οποία αναφέρουν ό,τι δεν έχει επιτευχθεί,
σε αντίθεση με ότι πραγματικά έχει επιτευχθεί. Το πιο διάσημο σχετικό
απόσπασμα είναι το απόφθεγμα του Dijkstra ότι «οι δοκιμές του προγράμματος
μπορούν να χρησιμοποιηθούν για να δείξουν την παρουσία σφαλμάτων,
αλλά ποτέ για να δείξουν την απουσία τους». Ο προφανής λόγος γι' αυτό
είναι ότι πλήρεις δοκιμές δεν είναι εφικτές σε ρεαλιστικό λογισμικό.

#### Το πρόβλημα των ανέφικτων μονοπατιών

Τα ανέφικτα μονοπάτια είναι διαδρομές ροών ελέγχου, που δεν μπορούν να
εξεταστούν από κανένα δεδομένο εισόδου (π.χ. δοκιμές ελέγχου).
Η διαχείριση των ανέφικτων μονοπατιών μπορεί να βοηθήσει στη μείωση 
του χρόνου και των πόρων που απαιτούνται για τον έλεγχο του λογισμικού.
Είναι σημαντικό πρόβλημα οι δοκιμές που είναι βασισμένες σε μονοπάτια,
κυρίως σε αυτοματοποιημένη παραγωγή δοκιμαστικών δοκιμών ελέγχου
για την εξέταση διαδρομών ροών ελέγχου. Επιπλέον, οι ανέφικτες διαδρομές 
μπορούν επίσης να συνδεθούν με τη διαδικασία ανάλυσης και ανίχνευσης ευπαθειών ασφαλείας και 
μπορούν να βελτιώσουν την ακρίβεια.

#### Ελεγξιμότητα (Testability)

Ο όρος **ελεγξιμότητα λογισμικού** έχει δύο σχετικές μεταξύ τους αλλά
διαφορετικές ερμηνείες. Από τη μία πλευρά, αναφέρεται στην ευκολία
με την οποία ένα δεδομένο κριτήριο κάλυψης ελέγχου μπορεί να ικανοποιηθεί:
από την άλλη πλευρά, ορίζεται ως η πιθανότητα, πιθανόν μετρημένη στατιστικά,
ότι ένα σύνολο δοκιμών θα εκθέσει αστοχία εάν το λογισμικό
είναι ελαττωματικό. Και οι δύο ερμηνείες είναι σημαντικές.

#### Εκτέλεση και Αυτοματοποίηση Ελέγχου

Μια σημαντική πρόκληση της διαδικασίας ελέγχου είναι η βελτίωση της εφικτής αυτοματοποίησης,
είτε με την ανάπτυξη προηγμένων τεχνικών για τη δημιουργία των εισόδων ελέγχου είτε, πέρα ​​από τη δημιουργία των τεστ,
με την εύρεση καινοτόμων διαδικασιών υποστήριξης για την (πλήρη) αυτοματοποίηση των διαφορετικών δραστηριοτήτων του 
ελέγχου -  για παράδειγμα, για να αυξηθεί ο αριθμός των παραγόμενων ή εκτελούμενων περιπτώσεων ελέγχου.

#### Επεκτασιμότητα

Η επεκτασιμότητα αφορά την ικανότητα του λογισμικού να αυξάνει και να κλιμακώνει τις μη λειτουργικές του απαιτήσεις, 
όπως το oad, τον αριθμό των συναλλαγών και τον όγκο δεδομένων. Η επεκτασιμότητα συνδέεται επίσης με την πολυπλοκότητα 
της πλατφόρμας και του περιβάλλοντος στο οποίο εκτελείται το πρόγραμμα, όπως τα κατανεμημένα ασύρματα δίκτυα και τα 
εικονικά περιβάλλοντα, μεγάλης κλίμακας συμπλέγματα (large-scale clusters) και κινητά νέφη (mobile cloud).

#### Αποτελεσματικότητα ελέγχου

Η αξιολόγηση του συστήματος υπό δοκιμή (SUT), η μέτρηση της αποτελεσματικότητας μιας τεχνικής δοκιμής 
και η κρίση για το εάν η δοκιμή μπορεί να σταματήσει είναι σημαντικά ζητήματα για τον έλεγχο λογισμικού και 
μπορεί να απαιτήσουν τον καθορισμό και την επιλογή κατάλληλων μέτρων αποτελεσματικότητας δοκιμής.

#### Ελεγξιμότητα, Αναπαραγωγή και Γενίκευση 

  * H **Ελεγξιμότητα** αναφέρεται στη μετάβαση των δραστηριοτήτων ελέγχου από το εργαστήριο 
  (δηλαδή ελεγχόμενες συνθήκες) στην πραγματικότητα (δηλαδή ανεξέλεγκτες συνθήκες).
  * Η **Αναπαραγωγή** αναφέρεται στην ικανότητα διαφορετικών ανθρώπων να εκτελούν τις ίδιες δοκιμαστικές δραστηριότητες. 
  Ο σκοπός είναι να επαληθεύσουμε εάν μια δεδομένη θεωρία δοκιμών λειτουργεί, τουλάχιστον στο εργαστήριο.
  * Η **γενίκευση** του τεστ είναι συνδεδεμένη με την εξωτερική έγκυροτητα - δηλαδή το μέτρο με το οποίο η προσέγγιση δοκιμών 
  μπορεί να εφαρμοστεί σε ευρύτερες ρυθμίσεις ή στοχευμένους πληθυσμούς. Η γενικότητα του λογισμικού δοκιμής μπορεί να είναι 
  σημαντική για τη διαχείριση των δραστηριοτήτων δοκιμής (σε όρους κόστους και προσπάθειας) και για την αύξηση της 
  εμπιστοσύνης στα αποτελέσματα των δοκιμών.

#### Έλεγχος εκτός σύνδεσης (offline) έναντι ελέγχου σε πραγματικό χρόνο (online)

Η διαδικασία ελέγχου μπορεί να εκτελεστεί σε δύο περιβάλλοντα: έλεγχος *εκτός σύνδεσης* (offline) και έλεγχος σε *πραγματικό χρόνο* (online).
Συνήθως, το σύστημα υπό δοκιμή (SUT) επικυρώνεται σε ένα περιβάλλον χωρίς εξωτερική αλληλεπίδραση στον έλεγχο εκτός σύνδεσης,
ενώ το σύστημα υπό δοκιμή (SUT) αλληλεπιδρά με το πραγματικό περιβάλλον εφαρμογής στον έλεγχο σε πραγματικό χρόνο. 
Οι περιπτώσεις ελέγχου εξάγονται είτε χειροκίνητα είτε αυτόματα και στις δύο περιπτώσεις, και οι αναμενόμενοι έξοδοι χρησιμοποιούνται 
για να αξιολογηθεί το σύστημα υπό δοκιμή (SUT).

### Σχέση ελέγχου με άλλες δραστηριότητες

* Ο έλεγχος λογισμικού είναι συσχετισμένος, αλλά διαφορετικός από στατικές
  τεχνικές διοίκησης ποιότητας λογισμικού, αποδείξεις ορθότητας, αποτελμάτωση
  και κατασκευή προγράμματος.
  Ωστόσο, είναι κατατοπιστικό να αντιμετωπίσουμε τον έλεγχο από την
  οπτική των αναλυτών ποιότητας λογισμικού και όσων την πιστοποιούν.
  Για περισσότερη συζήτηση δείτε τα παρακάτω:

    * Δοκιμές έναντι Τεχνικών διαχείρισης ποιότητας στατικού λογισμικού:βλ. Ενότητα 2.2.1, 
    Τεχνικές Στατικής Ανάλυσης, στο γνωστικό πεδίο Ποιότητα λογισμικού.
    * Δοκιμές έναντι Βελτίωση/Βεβαιότητα Ποιότητας: βλ. Ενότητα 1.3.2, Ποιότητα Προϊόντος Λογισμικού,
    στο γνωστικό πεδίο Ποιότητα Λογισμικού.
    * Δοκιμές έναντι Αποδείξεων ορθότητας και επίσημης επαλήθευσης: βλ.
    στο γνωστικό πεδίο Μοντέλα και μέθοδοι τεχνολογίας λογισμικού.
    * Δοκιμές έναντι Διόρθωσης: βλ. Έλεγχοι κατασκευής στο γνωστικό πεδίο Κατασκευή λογισμικού
    και Εργαλεία και Τεχνικές Διόρθωσης στο γνωστικό πεδίο Υπολογιστικά Θεμέλια.
    * Δοκιμές έναντι Κατασκευής Προγράμματος: βλ. Έλεγχοι κατασκευής στο γνωστικό πεδίο Κατασκευή λογισμικού.
    * Δοκιμές έναντι Ασφάλειας: βλ. το νέο γνωστικό πεδίο: Ασφάλεια Λογισμικού.
    * Δοκιμές έναντι Εκτίμησης προσπάθειας: βλ. το γνωστικό πεδίο Διοίκηση Τεχνολογιών Λογισμικού.
    * Δοκιμές έναντι Νομικών Θεμάτων: βλ. το γνωστικό πεδίο Επαγγελματική Πρακτική Τεχνολογιών Λογισμικού.

## Επίπεδα ελέγχου {#level-test}

Οι δοκιμές λογισμικού συνήθως εκτελούνται σε διαφορετικά επίπεδα
κατά τις διαδικασίες ανάπτυξης και συντήρησης.
Τα *επίπεδα* μπορούν να διαχωριστούν βάσει του αντικειμένου των δοκιμών,
το οποίο ονομάζεται *στόχος*, ή βάσει της πρόθεσης, το οποίο ονομάζεται
*σκοπός* (των επιπέδων δοκιμών).

### Ο στόχος του ελέγχου 

Ο στόχος της δοκιμής μπορεί να ποικίλει ανάλογα με το σύστημα υπό δοκιμή (SUT), 
τις συνθήκες περιβάλλοντος και τον προϋπολογισμό/χρόνο που αφιερώνεται στη δραστηριότητα δοκιμών. 
Τέσσερα στάδια δοκιμών μπορούν να διακριθούν: μονάδα, ολοκλήρωση, σύστημα και αποδοχή. 
Αυτά τα τέσσερα στάδια δοκιμής δεν συνεπάγονται καμία διαδικασία ανάπτυξης, ούτε κανένα 
από αυτά θεωρείται ότι είναι πιο σημαντικό από τα άλλα τρία.

####  Έλεγχος μονάδας (Unit Testing)

Η δοκιμή μονάδας επαληθεύει τη λειτουργία σε απομόνωση των στοιχείων του συστήματος υπό δοκιμή 
που μπορούν να ελεγχθούν ξεχωριστά. Ανάλογα με το πλαίσιο, αυτά θα μπορούσαν να είναι τα μεμονωμένα 
υποπρογράμματα ή συστατικά, ένα υποσύστημα ή μια σύνθεση συστατικών του SUT. Συνήθως, αλλά όχι πάντα, 
το άτομο που έγραψε τον κώδικα διεξάγει τη δοκιμή μονάδας.

####  Έλεγχος ενσωμάτωσης (Integration Testing)

Ο *έλεγχος ενσωμάτωσης* επαληθεύει τις αλληλεπιδράσεις μεταξύ των στοιχείων του συστήματος υπό δοκιμή 
(για παράδειγμα, συστατικά,ενότητες, ή υποσυστήματα). Οι στρατηγικές ολοκλήρωσης περιλαμβάνουν την προοδευτική 
(και συστηματική) ενσωμάτωση των στοιχείων του συστήματος υπό δοκιμή λαμβάνοντας υπόψη είτε τα προσδιορισμένα 
λειτουργικά θέματα είτε τις αρχιτεκτονικές προδιαγραφές. Οι τυπικές στρατηγικές δοκιμών ενσωμάτωσης είναι από 
πάνω προς τα κάτω (top-down), από κάτω προς τα πάνω (bottom-up), μικτές (ή σάντουιτς) και η μεγάλη έκρηξη (big bang). 
Εστιάζουν σε διαφορετικές προοπτικές του επιπέδου στο οποίο ενσωματώνονται τα στοιχεία του συστήματος υπό δοκιμή. 
Οι έλεγχοι ενσωμάτωσης είναι μια συνεχής δραστηριότητα που μπορεί να πραγματοποιηθεί σε κάθε στάδιο ανάπτυξης. 
Μπορεί να στοχεύει σε διαφορετικές πτυχές, όπως η διαλειτουργικότητα (π.χ. συμβατότητα ή διαμόρφωση) των στοιχείων 
του συστήματος υπό δοκιμή ή με το εξωτερικό περιβάλλον. Μπορούν επίσης να εξεταστούν εξωτερικές διεπαφές με άλλες 
εφαρμογές, βοηθήματα, συσκευές υλικού ή λειτουργικά περιβάλλοντα.


#### Έλεγχος συστήματος

Ο *έλεγχος συστήματος* αφορά τη δοκιμή της συμπεριφοράς του συστήματος υπό δοκιμή (σύμφωνα με τον ορισμό της Ενότητας 1). 
Οι αποτελεσματικές δοκιμές μονάδας και ολοκλήρωσης θα έπρεπε να έχουν εντοπίσει πολλά ελαττώματα του συστήματος υπό δοκιμή. 
Επιπλέον, η δοκιμή συστήματος θεωρείται συνήθως κατάλληλη για την αξιολόγηση μη λειτουργικών απαιτήσεων συστήματος, 
όπως η ασφάλεια, η ιδιωτικότητα, η ταχύτητα, η ακρίβεια και η αξιοπιστία. (βλ. Λειτουργικές και Μη-Λειτουργικές Απαιτήσεις στο γνωστικό πεδίο
Απαιτήσεις λογισμικού και στις απαιτήσεις ποιότητας λογισμικού στο γνωστικό πεδίο Ποιότητα Λογισμικού.)

#### Δοκιμή αποδοχής 

Οι δοκιμές αποδοχής στοχεύουν στην ανάπτυξη ενός συστήματος υπό δοκιμή. 
Κύριος στόχος του είναι να διαπιστώσει ότι το σύστημα υπό δοκιμή ικανοποιεί 
τις απαιτήσεις και τις προσδοκίες των τελικών χρηστών. 
Γενικά, εκτελείται από ή με τους τελικούς χρήστες για να εκτελέσουν 
τις λειτουργίες και τα καθήκοντα για τα οποία το λογισμικό 
χτίστηκε. Για παράδειγμα, αυτή η δραστηριότητα δοκιμών θα μπορούσε να στοχεύει 
σε δοκιμές χρησιμότητας ή στην λειτουργική αποδοχή. Ο Ορισμός των δοκιμών αποδοχής πριν από την εφαρμογή της
αντίστοιχης λειτουργικότητας είναι μια βασική δραστηριότητα της δοκιμαστικής ανάπτυξης αποδοχής (ATDD). (βλ. το γνωστικό πεδίο Απαιτήσεις Λογισμικού, Ενότητα 4.3.) 

### Σκοποί ελέγχου 

Η δοκιμή διεξάγεται λαμβάνοντας υπόψη συγκεκριμένους *στόχους*, που δηλώνονται (περισσότερο ή λιγότερο) ρητά 
και με ποικίλο βαθμό ακρίβειας. Ο καθορισμός των στόχων δοκιμών με ακριβείς, ποσοτικούς όρους υποστηρίζει 
τη μέτρηση και τον έλεγχο της διαδικασίας δοκιμής.

Η δοκιμή μπορεί να στοχεύει στην επαλήθευση διαφορετικών ιδιοτήτων. Για παράδειγμα, οι περιπτώσεις δοκιμών 
μπορούν να σχεδιαστούν για να ελέγξουν ότι οι λειτουργικές προδιαγραφές εφαρμόζονται σωστά, η οποία αναφέρεται 
ποικίλα στη βιβλιογραφία ως δοκιμή συμμόρφωσης, δοκιμές ορθότητας ή λειτουργικές δοκιμασίες. Ωστόσο, αρκετές 
άλλες μη λειτουργικές ιδιότητες μπορούν επίσης να ελεγχθούν, συμπεριλαμβανομένων των επιδόσεων, της αξιοπιστίας 
και της χρηστικότητας. (βλ. τα μοντέλα και τα χαρακτηριστικά ποιότητας στο γνωστικό πεδίο Ποιότητα Λογισμικού.)

Άλλοι σημαντικοί σκοποί ελέγχου περιλαμβάνουν, αλλά δεν περιορίζονται
σε αυτούς, την μέτρηση αξιοπιστίας, τον προσδιορισμό των τρωτών σημείων
της ασφάλειας, την αξιολόγηση χρηστικότητας, και την αποδοχή του λογισμικού,
για τα οποία θα πρέπει να ληφθούν υπόψη διαφορετικές προσεγγίσεις.
Σημειώστε ότι, σε γενικές γραμμές, οι σκοποί ελέγχου ποικίλουν ανάλογα
με τον στόχο των δοκιμών, διαφορετικές επιδιώξεις απευθύνονται σε διαφορετικά
επίπεδα ελέγχου.

Τα επιμέρους θέματα, που αναγράφονται παρακάτω, είναι τα πλέον συχνά
αναφερόμενα στη βιβλιογραφία.

#### Δοκιμές συμμόρφωσης (Conformance Testing)

Η *δοκιμή συμμόρφωσης* αποσκοπεί στο να επαληθεύσει ότι το σύστημα υπό δοκιμή συμμορφώνεται με πρότυπα, 
κανόνες, προδιαγραφές, απαιτήσεις, σχεδιασμό, διαδικασίες ή πρακτικές. 

#### Δοκιμές αντιστοιχίας (Compliance Testing)

Οι *δοκιμές αντιστοιχίας* αποσκοπούν στην απόδειξη της τήρησης από το σύστημα υπό δοκιμή ενός νόμου ή 
κανονισμού. Συνήθως, η δοκιμή αντιστοιχίας επιβάλλεται από εξωτερικό ρυθμιστικό φορέα.

####  Έλεγχος εγκατάστασης

Συχνά, μετά την ολοκλήρωση του συστήματος και την αποδοχή των δοκιμών,
και το σύστημα υπό δοκιμή έχει εγκατασταθεί στο στοχευόμενο περιβάλλον,
το σύστημα υπό δοκιμή επαληθεύεται.
Οι *δοκιμές εγκατάστασης* μπορούν να θεωρηθούν ως δοκιμές του συστήματος
διεξαγόμενες στο λειτουργικό περιβάλλον των διαμορφώσεων υλικών και
άλλων λειτουργικών περιορισμών.
Οι διαδικασίες εγκατάστασης μπορούν επίσης να επαληθεύονται.

####  Έλεγχος άλφα βήτα

Πριν την κυκλοφορία του συστήματος υπό δοκιμή, μερικές φορές δίνεται σε μια μικρή,
επιλεγμένη ομάδα δυνητικών χρηστών για δοκιμαστική χρήση (δοκιμή άλφα)
και/ή σε ένα μεγαλύτερο σύνολο αντιπροσωπευτικών χρηστών (δοκιμή βήτα).
Αυτοί οι χρήστες αναφέρουν προβλήματα σχετικά με το προϊόν.
Οι δοκιμές άλφα και βήτα είναι συχνά μη ελεγχόμενες και δεν αναφέρεται
πάντα σε ένα σχέδιο δοκιμής.

####  Έλεγχος παλινδρόμησης 

Σύμφωνα με τον ορισμό που διατυπώθηκε στο [7],ο έλεγχος παλινδρόμησης 
είναι η «επιλεκτική επανεξέταση του συστήματος υπό δοκιμή για να 
επαληθευτεί πως οι τροποποιήσεις δεν έχουν
προκαλέσει ακούσια επίδραση και ότι το σύστημα υπό δοκιμή
(που εξετάζεται) εξακολουθεί να συμμορφώνεται με τις καθορισμένες
απαιτήσεις του». Στην πράξη, η προσέγγιση θέλει να δείξει ότι το σύστημα υπό δοκιμή
εξακολουθεί να περνά ελέγχους που έχει περάσει και στο παρελθόν σε
μια σειρά ελέγχων (στην πραγματικότητα, επίσης μερικές φορές αναφέρεται
ως έλεγχος μη παλινδρόμησης). Σε μερικές περιπτώσεις, πρέπει να γίνει
ένα αντιστάθμισμα μεταξύ της διαβεβαίωσης από τον έλεγχο παλινδρόμησης
κάθε φορά που γίνεται μια αλλαγή και των πόρων που απαιτούνται για
την εκτέλεση των ελέγχων παλινδρόμησης. Αυτό μπορεί να είναι αρκετά
χρονοβόρο λόγω του μεγάλου αριθμού των δοκιμών που μπορούν να εκτελεστούν.
Οι έλεγχοι παλινδρόμησης μπορούν να εκτελεστούν σε καθένα από τα επίπεδα
ελέγχων που περιγράφονται στην ενότητα 2.1. Μπορεί να περιλαμβάνει λειτουργικές 
και μη λειτουργικές δοκιμές, όπως η αξιοπιστία, η προσβασιμότητα, η χρηστικότητα, 
η συντήρηση, η μετατροπή, η μετανάστευση και οι δοκιμές συμβατότητας.

Η δοκιμή παλινδρόμησης μπορεί να περιλαμβάνει την επιλογή (βλ. Ενότητα 1.2.2) 
και την ελαχιστοποίηση (βλ. ενότητα 1.2.3) των περιπτώσεων δοκιμών, καθώς και 
την υιοθέτηση προσεγγίσεων προτεραιότητας (βλέπε ενότητα 2.2.6) σε υπάρχουσες δοκιμαστικές σουίτες.

Η δοκιμή παλινδρόμησης είναι μια θεμελιώδης δραστηριότητα του ευέλικτου, 
DevOps, της ανάπτυξης οδηγούμενης από έλεγχο (Test-Driven Development) και της συνεχούς ανάπτυξης. 
Συνήθως εκτελείται μετά από δοκιμές ολοκλήρωσης και πριν από την ανάπτυξη στην παραγωγή ή στην λειτουργία. 

#### Δοκιμές προτεραιότητας 

Η *προτεραιοποίηση των περιπτώσεων δοκιμών* αποσκοπεί στο να προγραμματίσει τις περιπτώσεις δοκιμής για να αυξήσει 
το ποσοστό ανίχνευσης σφαλμάτων, την πιθανότητα αποκάλυψης λαθών, την κάλυψη του κώδικα που δοκιμάζεται και την 
αξιοπιστία του συστήματος υπό δοκιμή. Συνήθως, η δοκιμή προτεραιότητας βασίζεται στην ευρετική και η απόδοσή της 
μπορεί να διαφέρει ανάλογα με το σύστημα υπό δοκιμή, το περιβάλλον και τις διαθέσιμες περιπτώσεις δοκιμών. 
Μεταξύ των διαφορετικών προτάσεων προτεραιοποίησης, η προτεραιότητα με βάση την ομοιότητα είναι μία από τις πιο συχνά υιοθετούμενες. 
Σε αυτή την προσέγγιση προτεραιοποίησης, οι περιπτώσεις δοκιμών δίδονται προτεραιότητα ξεκινώντας από τις πιο 
διαφορετικές σύμφωνα με μία προκαθορισμένη απομακρυσμένη λειτουργία.

#### Μη λειτουργικές δοκιμές 

Οι *μη λειτουργικές δοκιμές* στοχεύουν στην επικύρωση μη λειτουργικών πτυχών (όπως η απόδοση, 
η χρηστικότητα ή αξιοπιστία) και διεξάγεται σε όλα τα επίπεδα δοκιμών. Στο στάδιο της πρακτικής, 
υπάρχουν εκατοντάδες μη λειτουργικές τεχνικές δοκιμών που περιλαμβάνουν, αλλά δεν περιορίζονται στα εξής:

  * Δοκιμές επιδόσεων [4, μέρος 1]: Οι δοκιμές απόδοσης επαληθεύουν ότι το λογισμικό πληροί τις καθορισμένες 
  απαιτήσεις επιδόσεως και αξιολογούν τα χαρακτηριστικά επιδόσης (π.χ. χωρητικότητα και χρόνος απάντησης).

  * Δοκιμή φορτίου [4, μέρος 1]: Οι δοκιμές φορτίου επικεντρώνονται στην επικύρωση της συμπεριφοράς του 
  συστήματος υπό δοκιμή υπό συνθήκες πίεσης φορτίου για την ανίχνευση προβλημάτων (π.χ. αδιέξοδα (deadlocks) , 
  racing, υπερχείλιση προσωρινής μνήμης (buffer overflow) και διαρροές μνήμης) ή παραβιάσεις της αξιοπιστίας, 
  της σταθερότητας ή της αντοχής. Στόχος του είναι να εκτιμηθεί ο ρυθμός με τον οποίο υποβάλλονται 
  διαφορετικά αιτήματα υπηρεσιών στο σύστημα υπό δοκιμή.

  * Δοκιμές στρες: Η δοκιμή στρες στοχεύει να ωθήσει το σύστημα υπό δοκιμή πέρα από τις δυνατότητές του, 
  δημιουργώντας ένα φορτίο μεγαλύτερο από αυτό που αναμένεται να χειριστεί το σύστημα.

  * Δοκιμή όγκου [4, μέρος 1]: Ο όγκος δοκιμής στοχεύει στην αξιολόγηση των περιορισμών της 
  εσωτερικής αποθήκευσης του συστήματος υπό δοκιμή και της ικανότητάς του να ανταλλάσσει δεδομένα και πληροφορίες.

  * Δοκιμή σφάλματος (Failover Testing): Η δοκιμή σφάλματος επικυρώνει την ικανότητα του συστήματος υπό δοκιμή να διαχειρίζεται 
  βαριά φορτία ή απροσδόκητη αποτυχία να συνεχίσει τις τυπικές λειτουργίες (π.χ. με την κατανομή πρόσθετων πόρων). 
  Η δοκιμή αποτυχίας συνδέεται επίσης με την επικύρωση της ανάκτησης.

  * Δοκιμές αξιοπιστίας: Η δοκιμή αξιοπισίας αξιολογεί την αξιοπιστία του συστήματος υπό δοκιμή με τον εντοπισμό και 
  τη διόρθωση σφαλμάτων. Η δοκιμή αξιοπιστίας παρατηρεί το σύστημα υπό δοκιμή σε λειτουργία ή ασκεί το σύστημα υπό δοκιμή 
  χρησιμοποιώντας δοκιμαστικές περιπτώσεις σύμφωνα με στατιστικά μοντέλα (λειτουργικά προφίλ) των διαφορετικών συμπεριφορών 
  των χρηστών. Συνήθως, η αξιοπιστία αξιολογείται μέσω μοντέλων ανάπτυξης αξιοπιστίας. Οι διαδικασίες συνεχούς ανάπτυξης 
  (όπως το DevOps) διευκολύνουν σήμερα την υιοθέτηση δοκιμών αξιοπιστίας στις διάφορες επαναλήψεις για τη βελτίωση της 
  τελικής ποιότητας του συστήματος υπό δοκιμή.

  * Δοκιμή συμβατότητας [4, μέρος 1]: Οι δοκιμές συμβατότητας χρησιμοποιούνται για να επαληθευτεί αν το λογισμικό 
  μπορεί να συνεργαστεί με διαφορετικές εγκαταστάσεις υλικού και λογισμικού ή με διάφορες εκδόσεις ή κυκλοφορίες.

  * Δοκιμές κλιμάκωσης: Η δοκιμή κλίμακωσης αξιολογεί την ικανότητα χρήσης και εκμάθησης του συστήματος και 
  της τεκμηρίωσης του χρήστη. Εστιάζεται επίσης στην αποτελεσματικότητα του συστήματος στην υποστήριξη των 
  εργασιών του χρήστη και στην ικανότητα ανάκτησης λαθών των χρηστών. Αυτή η δοκιμή είναι ιδιαίτερα σημαντική 
  σε κατανεμημένα ή υψηλής απόδοσης συστήματα.

  * Δοκιμές ελαστικότητας: Οι δοκιμές ελαστικότητας αξιολογούν την ικανότητα των συστημάτων υπό δοκιμή 
  (όπως το cloud και τα κατανεμημένα συστήματα) να επεκτείνουν ή να συρρικνώνουν γρήγορα τους πόρους 
  υπολογιστή, μνήμης και αποθήκευσης χωρίς να θέτουν σε κίνδυνο τη δυνατότητα να ανταποκριθούν στη μέγιστη χρήση. 
  Ορισμένοι στόχοι δοκιμών ελαστικότητας είναι ο έλεγχος των συμπεριφορών, ο προσδιορισμός των πόρων που πρέπει να (μη)κατανεμηθούν,
  ο παράλληλος συντονισμός των γεγονότων και η αξιολόγηση της επεκτασιμότητας (scalability).

  * Δοκιμές υποδομών [8, παράρτημα H]:  Οι δοκιμές υποδομών ελέγχουν και επικυρώνουν 
  στοιχεία υποδομής για τη μείωση των πιθανών χρόνων διακοπής λειτουργίας και τη βελτίωση 
  της απόδοσης των υποδομών πληροφορικής.

  * Αναδρομικές δοκιμές (Back-to-back Testing): Το πρότυπο IEEE/ISO/IEC 24765 ορίζει τις δοκιμές 
  αναδρομής ως «δοκιμές στις οποίες δύο ή περισσότερες παραλλαγές ενός προγράμματος εκτελούνται με 
  τις ίδιες εισόδους, οι εξόδοι συγκρίνονται και τα σφάλματα αναλύονται σε περιπτώσεις διαφωνίας».

  *Δοκιμές ανάκτησης: Οι δοκιμές ανάκτησης αποσκοπούν στην επαλήθευση των δυνατοτήτων επανεκκίνησης 
  του λογισμικού μετά από κατάρρευση του συστήματος ή άλλες καταστροφές.

#### Δοκιμές ασφάλειας [Μέρος 4 Παράρτημα Α]

Οι *δοκιμές ασφάλειας* επικεντρώνονται στην επικύρωση ότι το σύστημα υπό δοκιμή προστατεύεται από εξωτερικές επιθέσεις. 
Πιο συγκεκριμένα, επαληθεύει την εμπιστευτικότητα, την ακεραιότητα και τη διαθεσιμότητα των συστημάτων και των δεδομένων 
τους. Συνήθως, οι δοκιμές ασφαλείας περιλαμβάνουν την επικύρωση κατά της κατάχρησης και της κακοποίησης του λογισμικού ή 
του συστήματος. (negative testing). (βλ. Έλεγχος ασφάλειας στο γνωστικό πεδίο Ασφάλεια Λογισμικού.)

#### Δοκιμές απορρήτου 

Οι *δοκιμές απορρήτου* είναι αφιερωμένες στην αξιολόγηση της ασφάλειας και της ιδιωτικότητας των προσωπικών δεδομένων 
των χρηστών για την πρόληψη τοπικών επιθέσεων. Αξιολογεί ειδικά τις πολιτικές απορρήτου και ανταλλαγής πληροφοριών, 
καθώς και την επικύρωση της αποκεντρωμένης διαχείρισης των κοινωνικών προφίλ των χρηστών και των λύσεων αποθήκευσης 
δεδομένων. (βλ. νομικά θέματα στο γνωστικό πεδίο επαγγελματική πρακτική τεχνολογιών λογισμικού.)

Δοκιμή διεπαφής και διεπαφής προγραμμάτων εφαρμογών (API) 

Τα ελαττώματα διεπαφής είναι κοινά σε πολύπλοκα συστήματα. Η *δοκιμή διεπαφής* αποσκοπεί στην επαλήθευση του κατά 
πόσον η διεπαφή των στοιχείων παρέχει την ορθή ανταλλαγή δεδομένων και πληροφοριών ελέγχου. Συνήθως, οι περιπτώσεις 
δοκιμών δημιουργούνται από τις προδιαγραφές της διεπαφής. Ένας συγκεκριμένος στόχος δοκιμών διεπαφής είναι η προσομοίωση 
της χρήσης των API από εφαρμογές τελικού χρήστη. Αυτό περιλαμβάνει τη δημιουργία παραμέτρων των κλήσεων API, τη ρύθμιση 
των συνθηκών του εξωτερικού περιβάλλοντος και τον καθορισμό των εσωτερικών δεδομένων που επηρεάζουν το API. 

#### Δοκιμές διαμόρφωσης 

Όταν το σύστημα υπό δοκιμή είναι κατασκευασμένο για να εξυπηρετεί διαφορετικούς χρήστες, 
η *δοκιμή διαμόρφωσης* επαληθεύει το λογισμικό κάτω από καθορισμένες διαμορφώσεις.

####  Έλεγχος ευχρηστίας και αλληλεπίδρασης ανθρώπου-υπολογιστή

Το κύριο καθήκον του *ελέγχου ευχρηστίας και αλληλεπίδρασης ανθρώπου-υπολογιστή*
είναι να αξιολογήσει πόσο εύκολο είναι για τους τελικούς χρήστες να
μάθουν και να χρησιμοποιούν το λογισμικό. Σε γενικές γραμμές, μπορεί
να περιλαμβάνει έλεγχο των λειτουργιών του λογισμικού που υποστηρίζει
τις εργασίες των χρηστών, τεκμηρίωση που βοηθά τους χρήστες, καθώς
και την ικανότητα του συστήματος να επανέλθει από τα λάθη των χρηστών.
(βλ. ενότητα Σχεδίαση εστιασμένη στον χρήστη, στο γνωστικό πεδίο Σχεδιασμός
λογισμικού)

## Τεχνικές ελέγχου 

Με την πάροδο των ετών, έχουν αναπτυχθεί διαφορετικές τεχνικές δοκιμών για την αύξηση της 
συνολικής ποιότητας του συστήματος υπό δοκιμή [4, μέρος 4]. Αυτές οι τεχνικές προσπαθούν 
να προτείνουν συστηματικές διαδικασίες και προσεγγίσεις για τη δημιουργία ή την επιλογή 
των πιο κατάλληλων δοκιμών για την ανίχνευση όσο το δυνατόν περισσότερων αποτυχιών.

Οι τεχνικές δοκιμών μπορούν να ταξινομηθούν λαμβάνοντας υπόψη διαφορετικές βασικές 
πτυχές όπως οι προδιαγραφές, η δομή και η εμπειρία [4, μέρος 4]. Πρόσθετες πηγές 
ταξινόμησης μπορεί να είναι τα ελαττώματα που πρέπει να ανακαλυφθούν, η προβλεπόμενη 
χρήση, τα μοντέλα, η φύση της εφαρμογής ή οι παραγόμενες γνώσεις. Για παράδειγμα, 
η δοκιμή με βάση το μοντέλο [4, μέρος 1] αναφέρεται σε όλες τις τεχνικές δοκιμών 
που χρησιμοποιούν την έννοια ενός μοντέλου που αντιπροσωπεύει τις προδιαγραφές 
συμπεριφοράς, τη δομή του συστήματος υπό δοκιμή ή τις διαθέσιμες γνώσεις και εμπειρίες. 
Ωστόσο, είναι δυνατή η επικάλυψη της ταξινόμησης και μια κατηγορία μπορεί να ασχολείται 
με τον συνδυασμό δύο ή περισσότερων τεχνικών.

Εναλλακτικές ταξινομήσεις που βασίζονται στον βαθμό πληροφόρησης για το σύστημα υπό δοκιμή 
είναι διαθέσιμες στη βιβλιογραφία. Πράγματι, στις τεχνικές που βασίζονται στις προδιαγραφές, 
γνωστές και ως τεχνικές *μαύρου κουτιού*, η παραγωγή δοκιμαστικών περιπτώσεων βασίζεται μόνο 
στην συμπεριφορά εισόδου/εξόδου του συστήματος υπό δοκιμή, ενώ στις τεχνικές με βάση τη δομή, 
που ονομάζονται επίσης τεχνικές *λευκού κουτιού* (ή *γυάλινο κουτί* ή *καθαρό κουτί*), οι περιπτώσεις 
δοκιμών δημιουργούνται χρησιμοποιώντας τις πληροφορίες για το πώς σχεδιάστηκε ή κωδικοποιήθηκε 
το σύστημα υπό δοκιμή.

Δεδομένου ότι ορισμένες τεχνικές δοκιμών χρησιμοποιούνται περισσότερο από άλλες, το υπόλοιπο τμήμα 
παρουσιάζει τις τυποποιημένες μεθόδους δοκιμής και εκείνες που υιοθετούνται συνήθως στο στάδιο της πρακτικής.

### Τεχνικές βασισμένες σε προδιαγραφές

Η βασική ιδέα των *τεχνικών που βασίζονται σε προδιαγραφές*
(που μερικές φορές αποκαλούνται επίσης τεχνικές ελέγχου τομέα) είναι 
η επιλογή μερικών περιπτώσεων δοκιμής από τον τομέα εισόδου που 
μπορούν να ανιχνεύσουν συγκεκριμένες κατηγορίες σφαλμάτων (που ονομάζονται επίσης σφάλματα τομέα). 
Αυτές οι τεχνικές ελέγχουν αν το σύστημα υπό δοκιμή μπορεί να διαχειριστεί εισόδους εντός ενός συγκεκριμένου 
εύρους και να επιστρέφει την απαιτούμενη έξοδο.

#### Κατάτμηση ισοδυναμίας 

Η *κατάτμηση ισοδυναμίας* (equivalence partioning) περιλαμβάνει την κατάτμηση των τομέων εισόδου σε μια συλλογή 
υποσυνόλων (ή κλάσεις ισοδυναμίας) με βάση ένα καθορισμένο κριτήριο ή σχέση. Αυτό το 
κριτήριο ή η σχέση μπορεί να είναι διαφορετικά
υπολογιστικά αποτελέσματα, μια σχέση βασισμένη στη ροή ελέγχου 
ή τη ροή δεδομένων, ή μια διάκριση μεταξύ έγκυρων 
εισόδων που γίνονται αποδεκτές και επεξεργάζονται από το σύστημα υπό δοκιμή και 
μη έγκυρες εισόδους, όπως τιμές εκτός εύρους, που δεν 
γίνονται δεκτές και πρέπει να παράγουν μήνυμα σφάλματος ή 
να ξεκινήσει επεξεργασία σφάλματος. Μια αντιπροσωπευτική σουίτα δοκιμών 
(που μερικές φορές περιέχει μόνο μία περίπτωση δοκιμής) συνήθως 
λαμβάνεται από κάθε κλάση ισοδυναμίας.

#### Ανάλυση οριακών τιμών 

Οι περιπτώσεις δοκιμής επιλέγονται πάνω ή κοντά στα όρια του 
τομέα εισόδου των μεταβλητών, με την υποκείμενη 
λογική ότι πολλά σφάλματα τείνουν να συγκεντρώνονται κοντά στα 
ακραίες τιμές των εισόδων. Μια επέκταση αυτής της 
τεχνική είναι ο *έλεγχος ευρωστίας* (robustness testing), όπου οι περιπτώσεις δοκιμής 
επιλέγονται επίσης εκτός του πεδίου εισόδου των μεταβλητών για να 
να ελεγχθεί η ευρωστία του προγράμματος στην επεξεργασία απροσδόκητων ή 
λανθασμένων εισόδων. 

#### Δοκιμή σύνταξης

Οι τεχνικές ελέγχου σύνταξης, γνωστές και ως τυπικές 
τεχνικές που βασίζονται στις προδιαγραφές, βασίζονται στις
προδιαγραφές του συστήματος υπό δοκιμή σε μια τυπική γλώσσα. (βλ. 
Επίσημοι Μέθοδοι στο γνωστικό πεδίο Μοντέλα  και Μέθοδοι Μηχανικής Λογισμικού.) 
Αυτή η αναπαράσταση επιτρέπει την αυτόματη παραγωγή περιπτώσεων λειτουργικών δοκιμών και, ταυτόχρονα 
παρέχει ένα μαντείο (oracle) για τον έλεγχο των αποτελεσμάτων των δοκιμών.

#### Συνδυαστικές τεχνικές δοκιμών 

Οι τεχνικές συνδυαστικής δοκιμής συστηματικά 
προκύπτουν οι περιπτώσεις δοκιμής που καλύπτουν συγκεκριμένες παραμέτρους τιμών ή συνθηκών. 
Σύµφωνα µε το [4, µέρος 4], οι συνήθως χρησιµοποιούµενες τεχνικές συνδυαστικών δοκιµών είναι οι εξής: 
έλεγχος όλων των συνδυασμών (All-Combinations Testing), έλεγχος κατά ζεύγη (Pair-Wise Testing), 
έλεγχος κάθε επιλογής (Each Choice Testing) και έλεγχος βασικής επιλογής (Base Choice Testing). 
Η δοκιμή όλων των συνδυασμών επικεντρώνεται σε όλες τις πιθανούς συνδυασμούς εισόδων, ενώ το υποσύνολό του, 
που ονομάζεται επίσης t-wise δοκιμή, εξετάζει κάθε πιθανό συνδυασμό των t εισόδου. Στην περίπτωση αυτή, 
προκύπτουν περισσότερα από ένα ζεύγη (δηλ, με τη συμπερίληψη συνδυασμών υψηλότερου επιπέδου). Ο έλεγχος κατά ζεύγη
είναι μια ειδική τεχνική συνδυαστικής δοκιμής όπου οι περιπτώσεις δοκιμής προκύπτουν από το συνδυασμό τιμών των 
κάθε ζεύγους ενός συνόλου εισόδου. Αυτές οι τεχνικές είναι επίσης 
γνωστές ως δοκιμές ορθογώνιων συστοιχιών (OAT).

#### Πίνακας αποφάσεων

Οι *πίνακες αποφάσεων* (ή δέντρα) αναπαριστούν λογικές 
σχέσεις μεταξύ συνθηκών (περίπου, εισροών) και 
ενέργειες (κατά προσέγγιση, έξοδοι). Συνήθως, 
υιοθετούνται ευρέως για την αναπαράσταση γνώσης (π.χ., Μηχανική Μάθηση). 
Οι περιπτώσεις δοκιμών προκύπτουν συστηματικά εξετάζοντας κάθε πιθανό συνδυασμό 
συνθηκών και τις αντίστοιχες ενέργειες που προκύπτουν. Μια  
συναφής τεχνική είναι η *γραφική απεικόνιση αιτίου-αποτελέσματος* (cause-effect graphing). Επί του παρόντος, 
οι διαδικασίες ανάπτυξης με αριστερή μετατόπιση (shift-left development) εκμεταλλεύονται 
αυτού του είδους της τεχνικής δοκιμών επειδή αυτές οι 
τεχνικές είναι χρήσιμες για την τεκμηρίωση των αποτελεσμάτων των δοκιμών 
και των παραγόντων που μπορούν να τα επηρεάσουν.

#### Γραφική παράσταση αιτίου-αποτελέσματος

Οι τεχνικές *γραφικών παραστάσεων αιτίου-αποτελέσματος* βασίζονται σε λογικά δίκτυα που αντιστοιχίζουν ένα 
σύνολο αιτιών σε ένα σύνολο αποτελεσμάτων εξερευνώντας συστηματικά τους πιθανούς συνδυασμούς των 
συνθηκών εισόδου. Προσδιορίζουν τα αποτελέσματα και συνδέουν τα αποτελέσματα με τις αιτίες τους μέσω γραφικών παραστάσεων μοντέλων. 
Οι τεχνικές γραφικών παραστάσεων αιτίου-αποτελέσματος χρησιμοποιούνται στις δοκιμές επειδή 
επιτρέπουν την ανάλυση προδιαγραφών, τον εντοπισμό των σχετικών συνθηκών εισόδου ή αιτιών, των επακόλουθων 
μετασχηματισμών και των συνθηκών εξόδου.

#### Δοκιμές μετάβασης καταστάσεων 

Τεχνικές που βασίζονται σε μηχανές πεπερασμένης κατάστασης (*Κατάσταση 
τεχνικών ελέγχου μετάβασης* στο [4, μέρος 4]) επικεντρώνονται 
στην αναπαράσταση του συστήματος υπό δοκιμή με μια μηχανή πεπερασμένων καταστάσεων. 
Σε αυτή την περίπτωση, η σουίτα δοκιμών προκύπτει για να καλύψει τις καταστάσεις και 
τις μεταβάσεις σύμφωνα με ένα συγκεκριμένο επίπεδο κάλυψης. 

#### Δοκιμές βασισμένες σε σενάρια 

Ένα μοντέλο σε αυτό το πλαίσιο είναι μια αφηρημένη (τυπική) αναπαράσταση του συστήματος υπό 
δοκιμή ή των απαιτήσεων του λογισμικού. (βλ. μοντελοποίηση στο γνωστικό πεδίο
Μοντέλα και Μέθοδοι Τεχνολογίας Λογισμικού.) Η *δοκιμή βάσει σεναρίων* χρησιμοποιείται για την 
επικύρωση απαιτήσεων, τον έλεγχο των συνέπειών τους, και τη δημιουργία περιπτώσεων δοκιμών που 
εστιάζουν στις πτυχές συμπεριφοράς του συστήματος υπό δοκιμή. (Βλέπε Τύποι μοντέλων 
στο γνωστικό πεδίο Μοντέλα και μέθοδοι μηχανικής λογισμικού.) Τα βασικά συστατικά στοιχεία της δοκιμής βάσει σεναρίου 
είναι ο συμβολισμός που χρησιμοποιείται για την αναπαράσταση του μοντέλου του 
λογισμικού ή των απαιτήσεών του, τα μοντέλα ροής εργασιών ή 
παρόμοια μοντέλα, η στρατηγική δοκιμής ή ο αλγόριθμος που χρησιμοποιείται για 
τη δημιουργία περιπτώσεων δοκιμής, η υποστηρικτική υποδομή για 
την εκτέλεση της δοκιμής, και η αξιολόγηση των αποτελεσμάτων της δοκιμής
συγκριτικά με τα αναμενόμενα αποτελέσματα. Λόγω της 
πολυπλοκότητας των τεχνικών, η δοκιμή βάσει σεναρίου 
χρησιμοποιούνται συχνά με εργαλεία αυτοματοποίησης δοκιμών.

Μεταξύ των δοκιμών βάσει σεναρίων, τα μοντέλα ροής εργασιών μπορούν 
επίσης να χρησιμοποιηθούν για τη γραφική αναπαράσταση της ακολουθίας των 
δραστηριοτήτων που εκτελούνται από ανθρώπους ή/και  
εφαρμογές λογισμικού. Στην περίπτωση αυτή, κάθε ακολουθία ενεργειών 
αποτελεί μια ροή εργασίας (που ονομάζεται επίσης σενάριο). 
Συνήθως, είναι σημαντικό να διασφαλίζεται ότι τόσο οι τυπικές όσο και οι 
εναλλακτικές ροές εργασίας επίσης δοκιμάζονται . Για παράδειγμα, 
η δοκιμή επιχειρησιακών διαδικασιών αποτελεί μέρος αυτής της βασισμένης σε σενάρια 
τεχνική. Στην περίπτωση αυτή, η ιδιαίτερη έμφαση δίνεται στους ρόλους 
σε μια προδιαγραφή ροής εργασίας.

#### Τυχαία δοκιμή 

Σε αυτή την προσέγγιση, οι περιπτώσεις δοκιμής παράγονται καθαρά 
τυχαία. Αυτή η δοκιμή εμπίπτει στην κατηγορία της εισόδου 
επειδή ο τομέας εισόδου πρέπει να είναι 
γνωστός για να είναι δυνατή η επιλογή τυχαίων σημείων εντός αυτού. 
Η *τυχαία δοκιμή* (random testing) παρέχει μια σχετικά απλή προσέγγιση 
στην αυτοματοποίηση δοκιμών. Ενισχυμένες μορφές τυχαίας δοκιμής 
(όπως η προσαρμοστική τυχαία δοκιμή) έχουν προταθεί 
στις οποίες άλλα κριτήρια επιλογής εισόδου κατευθύνουν την 
τυχαία δειγματοληψία εισόδου.

Επί του παρόντος, με την ονομασία ασαφής δοκιμή (fuzzy testing), η τυχαία 
επιλογή μη έγκυρων και απροσδόκητων εισόδων και δεδομένων 
χρησιμοποιείται εκτενώς στην ασφάλεια στον κυβερνοχώρο για την εύρεση παραβιάσιμων 
σφαλμάτων λογισμικού, λαθών κωδικοποίησης και κενά ασφαλείας. 
(βλ. επίσης τις ενότητες 2.2.8 και 8.2).

#### Βασισμένο σε στοιχεία (Evidence-Based)

Η *βασισμένη σε αποδείξεις μηχανική λογισμικού* (EBSE), η οποία 
ακολουθεί μια αυστηρή ερευνητική προσέγγιση, είναι η καλύτερη 
λύση για ένα πρακτικό πρόβλημα. Η EBSE περιλαμβάνει την 
τις ακόλουθες φάσεις: 
  * Προσδιορισμός των αποδεικτικών στοιχείων και διαμόρφωση ερώτησης
  * Εντοπισμός των καλύτερων αποδεικτικών στοιχείων για να απαντηθεί η 
  ερώτηση
  * Κριτική ανάλυση των αποδεικτικών στοιχείων υπό το πρίσμα της 
  προβλήματος στο οποίο τα αποδεικτικά στοιχεία θα πρέπει να συμβάλουν στην επίλυση.
Οι αρχές της EBSE μπορούν επίσης να εφαρμοστούν στη  
διαδικασία ελέγχου. Για το σκοπό αυτό, οι ευρέως χρησιμοποιούμενες προσεγγίσεις 
που επιτρέπουν τον εντοπισμό και τη συγκέντρωση αποδεικτικών στοιχείων είναι 
οι μελέτες συστηματικής χαρτογράφησης και οι συστηματικές ανασκοπήσεις.

#### Εξαναγκαστική Εξαίρεση (Forcing Exception)
[5] 
Οι περιπτώσεις δοκιμής σχεδιάζονται ειδικά για τον έλεγχο 
αν το σύστημα υπό δοκιμή μπορεί να διαχειριστεί ένα προκαθορισμένο σύνολο 
εξαιρέσεων/σφαλμάτων, όπως εξαίρεση δεδομένων, λειτουργία 
εξαίρεση, εξαίρεση υπερχείλισης, εξαίρεση προστασίας ή 
εξαίρεση υπερχείλισης. Οι τεχνικές δοκιμών συνήθως επικεντρώνονται 
σε αρνητικά σενάρια δοκιμών (δηλαδή, περιπτώσεις δοκιμών που είναι σε θέση να 
να εξαναγκάσουν τη δημιουργία μηνυμάτων σφάλματος).

### Τεχνικές δοκιμών βασισμένες στη δομή
[4, μέρος 4]
Οι *τεχνικές δοκιμών βασισμένες στη δομή* (μερικές φορές αποκαλούμενες 
*τεχνικές δοκιμής με βάση τον κώδικα*) εστιάζουν στον κώδικα και την 
δομή του. Οι τεχνικές δοκιμής με βάση τη δομή μπορούν να εκτελούνται σε διαφορετικά επίπεδα 
(όπως η ανάπτυξη κώδικα, η επιθεώρηση κώδικα ή η δοκιμή μονάδας) και μπορούν να 
περιλαμβάνουν στατικές δοκιμές (όπως επιθεώρηση κώδικα, έλεγχο κώδικα 
και αναθεώρηση κώδικα), δυναμικές δοκιμές (όπως 
κάλυψη εντολών, κάλυψη διακλαδώσεων και κάλυψη διαδρομής), ή μέτρηση της πολυπλοκότητας του 
κώδικα (π.χ, χρησιμοποιώντας τεχνικές όπως η κυκλωματική πολυπλοκότητα [12]). 

#### Δοκιμή ροής ελέγχου 

Ο *έλεγχος ροής ελέγχου* καλύπτει όλες τις δηλώσεις, 
διακλαδώσεις, αποφάσεις, συνθήκες διακλαδώσεων, τροποποιημένες 
κάλυψη απόφασης συνθήκης (MC/DC), μπλοκ δηλώσεων
ή συγκεκριμένους συνδυασμούς δηλώσεων σε ένα 
σύστημα υπό δοκιμή. Το ισχυρότερο από τα κριτήρια που βασίζονται στη ροή ελέγχου 
είναι η δοκιμή διαδρομής, η οποία στοχεύει στην εκτέλεση όλων των εισόδων-εξόδων 
διαδρομών ροής ελέγχου στο γράφημα ροής ελέγχου ενός συστήματος υπό δοκιμή. 
Επειδή ο εξαντλητικός έλεγχος διαδρομής δεν είναι γενικά  εφικτός λόγω βρόχων, άλλα λιγότερο αυστηρά κριτήρια 
επικεντρώνονται στην κάλυψη διαδρομών που περιορίζουν τις επαναλήψεις βρόχων, 
όπως η κάλυψη εντολών, η κάλυψη διακλαδώσεων και 
δοκιμή συνθηκών/αποφάσεων. Η επάρκεια αυτών των δοκιμών 
μετράται σε ποσοστά- για παράδειγμα, όταν όλες οι 
διακλαδώσεις έχουν εκτελεστεί τουλάχιστον μία φορά από τις δοκιμές, 
έχει επιτευχθεί 100% κάλυψη διακλαδώσεων.

#### Δοκιμές ροής δεδομένων 

Στη *δοκιμή ροής δεδομένων*, το γράφημα ροής ελέγχου είναι 
με πληροφορίες σχετικά με τον τρόπο με τον οποίο οι μεταβλητές 
ορίζονται, χρησιμοποιούνται και σκοτώνονται (απροσδιόριστες). Συνηθισμένες 
υιοθετούμενες τεχνικές ελέγχου ροής δεδομένων είναι η δοκιμή όλων των ορισμών, 
η δοκιμή όλων των χρήσεων C, η δοκιμή όλων των χρήσεων P, η δοκιμή όλων των χρήσεων 
και η δοκιμή όλων των μονοπατιών DU. Το ισχυρότερο κριτήριο δοκιμής ροής δεδομένων είναι 
η δοκιμή όλων των μονοπατιών DU , όπου πρέπει να καλύπτονται όλες οι διαδρομές ορισμού και 
χρήσης (DU). Αυτό οφείλεται στο γεγονός ότι απαιτεί την εκτέλεση, για κάθε μεταβλητή, 
κάθε διαδρομής ροής ελέγχου από τον ορισμό αυτής της μεταβλητής έως της χρήσης 
του ορισμού αυτού. Ωστόσο, χρησιμοποιούνται ασθενέστερες στρατηγικές, όπως οι η δοκιμή 
όλων των ορισμών και η δοκιμή όλων των χρήσεων, για να μειωθεί ο αριθμός 
των απαιτούμενων διαδρομών.

#### Μοντέλα αναφοράς για τεχνικές δοκιμής με βάση τη δομή 

Αν και δεν αποτελεί τεχνική, η δομή ελέγχου ενός συστήματος υπό δοκιμή (SUT)
μπορεί να αναπαρασταθεί γραφικά χρησιμοποιώντας ένα γράφημα ροής  
για την οπτικοποίηση *τεχνικών δοκιμών βασισμένων στη δομή*. Ένα γράφημα ροής  είναι 
ένας κατευθυνόμενος γράφος, οι κόμβοι και τα τόξα του οποίου 
αντιστοιχούν σε στοιχεία του προγράμματος. (Βλέπε Γράφοι και 
Δέντρα στο γνωστικό πεδίο Μαθηματικά θεμέλια.) Για 
παράδειγμα, οι κόμβοι μπορεί να αντιπροσωπεύουν εντολές ή 
αδιάκοπες ακολουθίες δηλώσεων, και τα τόξα μπορεί να 
αντιπροσωπεύουν τη μεταφορά ελέγχου μεταξύ κόμβων.

### *Τεχνικές βασισμένες στην εμπειρία*
[4, μέρος 1, μέρος 4]
Η δημιουργία της καταλληλότερης σουίτας δοκιμών μπορεί να 
εξαρτηθεί από διάφορους παράγοντες, όπως η ανθρώπινη γνώση 
του συστήματος υπό δοκιμή και του περιβάλλοντός του και της εμπειρίας και διαίσθησης του/της. 
Στην ενότητα που ακολουθεί, οι συνήθεις τεχνικές που βασίζονται στην εμπειρία 
παρουσιάζονται συνοπτικά.

#### *Εικασία σφαλμάτων* (Error Guessing)

Στην *εικασία σφάλματος*, οι μηχανικοί λογισμικού σχεδιάζουν περιπτώσεις δοκιμών 
ειδικά για να προβλέψουν τα πιο πιθανά σφάλματα στο 
κάθε SUT. Καλές πηγές πληροφοριών είναι το ιστορικό 
των σφαλμάτων που ανακαλύφθηκαν σε προηγούμενα έργα και 
η τεχνογνωσία του μηχανικού λογισμικού.

#### *Διερευνητική δοκιμή*
[4, μέρος 1]
Η *διερευνητική δοκιμή* ορίζεται ως η ταυτόχρονη 
μάθηση, ο σχεδιασμός δοκιμών και η εκτέλεση δοκιμών. Οι περιπτώσεις δοκιμής 
δεν ορίζονται εκ των προτέρων αλλά δυναμικά 
σχεδιάζονται, εκτελούνται και τροποποιούνται ανάλογα με τα
συγκεντρωμένα στοιχεία και αποτελέσματα των δοκιμών, όπως οι παρατηρούμενες 
συμπεριφορά του προϊόντος, οι ιδιαιτερότητες του SUT, ο τομέας 
και το περιβάλλον, η διαδικασία αποτυχίας, οι τύποι των 
πιθανών σφαλμάτων και αστοχιών, και ο κίνδυνος που συνδέεται 
με ένα συγκεκριμένο προϊόν. Συνήθως, η διαίσθηση, 
οι γνώσεις και η εμπειρογνωμοσύνη του προσωπικού που είναι υπεύθυνο για 
την εκτέλεση των διερευνητικών δοκιμών μπορεί να επηρεάσει την 
αποτελεσματικότητα των δοκιμών. Η διερευνητική δοκιμή 
χρησιμοποιείται ευρέως στην ανάπτυξη με αριστερή μετατόπιση (όπως η ευέλικτη). 
(Βλ. Ενότητα 5.4.2.) 

#### *Περαιτέρω τεχνικές βασισμένες στην εμπειρία*

Στην κατάσταση της πρακτικής, οι *βασισμένες στην εμπειρία 
τεχνικές* μπορεί να περιλαμβάνουν περαιτέρω προσεγγίσεις όπως οι επί-τούτο βασισμένες (Ad-Hoc), 
οι βασισμένες στη γνώση και οι δοκιμές βασισμένες στην Μηχανική Μάθηση (ML). 

Η δοκιμή Ad Hoc είναι μια ευρέως χρησιμοποιούμενη τεχνική στην οποία 
περιπτώσεις δοκιμών προκύπτουν βασιζόμενες στην
δεξιότητα, τη διαίσθηση και την εμπειρία του μηχανικού λογισμικού με παρόμοια 
προγράμματα. Μπορεί να είναι χρήσιμη για τον εντοπισμό περιπτώσεων δοκιμής 
που δεν παράγονται εύκολα από πιο τυποποιημένες 
τεχνικές. Τυπικές Ad Hoc μεθοδολογίες είναι οι 
ακόλουθες:

  * Η δοκιμή μαϊμού εκτελεί τυχαία παραγόμενες δοκιμές 
  περιπτώσεων για να προκαλέσει τη διακοπή του προγράμματος. 
  * Η δοκιμή Buddy δημιουργεί περιπτώσεις δοκιμών χρησιμοποιώντας 
  εσωτερικής γνώσης της αρχιτεκτονικής και των δοκιμών 
  ειδικών γνώσεων.
  * Η δοκιμή ζεύγους περιλαμβάνει δύο άτομα. Το ένα 
  παράγει και εκτελεί τις περιπτώσεις δοκιμών- το άλλο 
  παρατηρεί και αναλύει τη διαδικασία δοκιμής. Η δοκιμή ζεύγους 
  επιτρέπει τη δημιουργία περιπτώσεων δοκιμής με ευρεία και καλύτερη κάλυψη δοκιμών.
  *Η παιχνιδοποίηση (gamification) αποσκοπεί στη μετατροπή των καθηκόντων δοκιμής σε 
  συστατικά του παιχνιδιού. Με την εφαρμογή συγκεκριμένων 
  τεχνικών (όπως η εμπλοκή των επαγγελματιών ή η 
  εξωτερική ανάθεση πολύπλοκων εργασιών δοκιμών), 
  η παιχνιδοποίηση μπορεί να βελτιώσει σημαντικά 
  την πρακτική της δοκιμής λογισμικού και, κατά συνέπεια, την ποιότητα του SUT.
  * Γρήγορη δοκιμή, κατά την οποία μια πολύ μικρή σουίτα δοκιμών 
  επιλέγεται και εκτελείται, εγγυάται ότι καμία αποτυχία δεν
  μπορεί να παρουσιαστεί εξαιτίας των στοιχείων του συστήματος υπό δοκιμή
  που δεν είναι πλήρως λειτουργικά.
  * Δοκιμές καπνού (επίσης γνωστές ως επαλήθευση δοκιμών κατασκευής) διασφαλίζει ότι οι κεντρικές 
  λειτουργικότητες του συστήματος υπό δοκιμή συμπεριφέρονται σωστά. Επίσης 
  εγγυάται ότι το σύστημα υπό δοκιμή είναι λειτουργικό πριν από την 
  έναρξη των προγραμματισμένων δοκιμών. Επιπλέον, η δοκιμή καπνού 
  αποτρέπει τις αποτυχίες λόγω του περιβάλλοντος δοκιμής 
  (π.χ. επειδή τα αντικείμενα ή τα πακέτα
  δεν έχουν κατασκευαστεί σωστά). Η δοκιμή καπνού θεωρείται επίσης 
  μια ειδική περίπτωση γρήγορης δοκιμής.

Οι δοκιμές με βάση τη γνώση και οι δοκιμές με βάση την Μηχανική Μάθηση
εκμεταλλεύονται (τυπικά ή άτυπα) γνώσεις σχετικά με το σύστημα υπό δοκιμή
ή τις αντλούν από παρατηρήσεις των εκτελέσεων του SUT για 
τον ορισμό των μοντέλων συμπεριφοράς του (όπως οντολογίες ή 
πίνακες αποφάσεων) (βλ. ενότητα 3.6.1), κανόνων και μη λειτουργικών ιδιοτήτων. 
Επιπλέον, οι βασισμένες στη γνώση δοκιμές και οι δοκιμές που βασίζονται στην Μηχανική Μάθηση 
καθορίζουν τις ανάγκες δοκιμής και προσδιορίζουν τους στόχους δοκιμής για τους οποίους οι 
περιπτώσεις δοκιμής παράγονται.

### Τεχνικές βασισμένες σε σφάλματα και μετάλλαξη 

Με διαφορετικούς βαθμούς τυποποίησης, οι *βασισμένες σε σφάλματα*
τεχνικές δοκιμών επινοούν περιπτώσεις δοκιμών ειδικά για να 
να αποκαλύψουν πιθανές ή προκαθορισμένες κατηγορίες σφαλμάτων. Ένα *μοντέλο σφάλματος* μπορεί να εισαχθεί που ταξινομεί τα διάφορα
σφάλματα για την καλύτερη εστίαση της δημιουργίας περιπτώσεων δοκιμής ή 
επιλογής. Σε αυτό το πλαίσιο, μια ποικιλία από πλατφόρμες και 
διαδικασίες ανάπτυξης (π.χ. καταρράκτης, σπειροειδής και 
ευέλικτη) θεωρούν την ορθογώνια ταξινόμηση ελαττωμάτων 
(ODC) μια έγκυρη μεθοδολογία για τη συλλογή σημασιολογικών 
πληροφοριών σχετικά με τα διάφορα ελαττώματα και τη μείωση 
του χρόνου και της προσπάθειας της ανάλυσης της αιτίας.

Ο *έλεγχος μετάλλαξης* (Mutation Testing) σχεδιάστηκε αρχικά ως μια τεχνική για την αξιολόγηση των σουιτών δοκιμών 
(βλ. Ενότητα 4.2, Αξιολόγηση των δοκιμών που εκτελούνται) στην οποία μια μετάλλαξη είναι μια 
ελαφρώς τροποποιημένη έκδοση του συστήματος υπό δοκιμή (που ονομάζεται επίσης *χρυσός*), που διαφέρει από αυτήν από 
μια μικρή συντακτική αλλαγή. Κάθε δοκιμαστική περίπτωση ασκεί τόσο τη χρυσή έκδοση όσο και όλες 
τις παραγόμενες μεταλλάξεις.Εάν μια δοκιμαστική περίπτωση καταφέρει να εντοπίσει τη διαφορά μεταξύ της χρυσής έκδοσης 
και μίας μετάλλαξης, το τελευταίο λέγεται ότι «σκοτώθηκε». Η βασική υπόθεση του ελέγχου μετάλλαξης, το φαινόμενο σύζευξης, 
είναι ότι πιο περίπλοκα αλλά πραγματικά σφάλματα θα βρεθούν αναζητώντας απλά συντακτικά σφάλματα. Για να είναι αποτελεσματική 
η τεχνική, πολλές μεταλλάξεις πρέπει να παράγονται αυτόματα και να εκτελούνται συστηματικά [6]. Ο έλεγχος μετάλλαξης είναι επίσης 
ένα κριτήριο δοκιμής από μόνο του. Οι δοκιμαστικές περιπτώσεις δημιουργούνται τυχαία μέχρι να σκοτωθούν αρκετές μεταλλάξεις ή οι 
δοκιμές έχουν σχεδιαστεί ειδικά για να σκοτώσουν τις επιζήσασες μεταλλάξεις. Στην τελευταία περίπτωση, ο έλεγχος μετάλλαξης μπορεί 
επίσης να κατηγοριοποιηθεί ως τεχνική βασισμένη στη δομή. Ο έλεγχος μετάλλαξης έχει χρησιμοποιηθεί αποτελεσματικά για τη δημιουργία 
ασαφών δοκιμών (Fuzzy Testing). Μια πιο πρόσφατη εφαρμογή της διαδικασίας μετάλλαξης είναι η μεταμορφική δοκιμή, μια τεχνική που έχει 
γίνει όλο και πιο δημοφιλής στην αντιμετώπιση των προκλήσεων δοκιμών ορισμένων συστημάτων Μηχανικής Μάθησης. Σε αυτήν την περίπτωση, οι 
τροποποιήσεις (που ονομάζονται επίσης morph) εφαρμόζονται στις εισόδους, έτσι ώστε μια σχέση να μπορεί να συνδέσει την προηγούμενη είσοδο 
(και την έξοδο της) με τη νέα μορφοποιημένη είσοδο (και την έξοδο της).

### *Τεχνικές βασισμένες στη χρήση*

Οι *τεχνικές που βασίζονται στη χρήση* συνήθως βασίζονται σε ένα μοντέλο χρήσης 
ή προφίλ. Σε αυτήν την περίπτωση, το περιβάλλον δοκιμών χρειάζεται 
να αναπαραστά το πραγματικό επιχειρησιακό περιβάλλον, και 
η ακολουθία εκτέλεσης της δοκιμαστικής υπόθεσης πρέπει να αναπαράγει 
τη χρήση του συστήματος υπό δοκιμή από τον ενδιαφερόμενο-στόχο. 
Η  στατιστική δειγματοληψία χρησιμοποιείται για την προσομοίωση της εκτέλεσης πολλών 
δοκιμαστικών περιπτώσεων. Έτσι, μερικές φορές, ο όρος *τυχαία δοκιμή*
συνδέεται επίσης με αυτές τις τεχνικές. Ο στατιστικός έλεγχος βάσει χρήσης εφαρμόζεται περισσότερο κατά το στάδιο του ελέγχου αποδοχής.

#### Λειτουργικό προφίλ 

Η δοκιμή με βάση τα *λειτουργικά προφίλ* έχει ως στόχο 
τη δημιουργία περιπτώσεων δοκιμής που θα μπορούσαν να εκτιμήσουν την αξιοπιστία 
του SUT ή μέρους αυτού. Ως εκ τούτου, ο στόχος είναι να συναχθεί 
από τα παρατηρούμενα αποτελέσματα των δοκιμών η μελλοντική αξιοπιστία του 
του λογισμικού (όταν είναι σε χρήση). Επειδή η 
διαπιστωμένη αξιοπιστία εξαρτάται αυστηρά από τη λειτουργία 
προφίλ, η κύρια δυσκολία (και το κόστος) στη χρήση αυτής της 
προσέγγισης δοκιμών προέρχεται από την παραγωγή του λειτουργικού προφίλ. Επομένως, μια πιθανή λύση είναι 
να αποδοθούν στην είσοδο οι πιθανότητες ή τα προφίλ 
σύμφωνα με τη συχνότητα εμφάνισής τους σε πραγματική 
λειτουργία

#### Ευρετικές μέθοδοι παρατήρησης χρηστών

#Εξειδικευμένα ευρετικά*, που ονομάζονται επίσης *μέθοδοι επιθεώρησης ευχρηστίας*, 
εφαρμόζονται για τη συστηματική παρατήρηση της χρήσης συστήματος υπό ελεγχόμενες συνθήκες για να προσδιοριστεί πόσο καλά 
οι άνθρωποι μπορούν να χρησιμοποιούν το σύστημα και τις διεπαφές του. Οι
ευρετικές μέθοδοι ευχρηστίας περιλαμβάνουν γνωστικούς περιπάτους, ισχυρισμούς 
ανάλυση, επιτόπιες παρατηρήσεις, φωναχτή σκέψη, ακόμη και 
έμμεσες προσεγγίσεις, όπως ερωτηματολόγια χρηστών και 
συνεντεύξεις. 

### *Τεχνικές με βάση τη φύση της εφαρμογής*

Οι παραπάνω τεχνικές εφαρμόζονται σε όλα τα είδη λογισμικού. 
Πρόσθετες τεχνικές εξαγωγής και εκτέλεσης δοκιμών 
βασίζονται στη φύση του υπό δοκιμή λογισμικού. 
Παραδείγματα είναι τα ακόλουθα:

* Αντικειμενοστραφές λογισμικό 
* Λογισμικό βασισμένο σε συστατικά
* Λογισμικό βασισμένο στον Ιστό
* Ταυτόχρονα προγράμματα 
* Λογισμικό βασισμένο σε πρωτόκολλο
* Συστήματα επικοινωνίας
* Συστήματα πραγματικού χρόνου 
* Συστήματα κρίσιμης ασφάλειας
* Λογισμικό προσανατολισμένο στην υπηρεσία 
* Λογισμικό ανοικτού κώδικα 
* Ενσωματωμένο λογισμικό 
* Λογισμικό βασισμένο στο σύννεφο (cloud)
* Λογισμικό βασισμένο στo blockchain
* Λογισμικό βασισμένο σε μεγάλα δεδομένα
* Λογισμικό βασισμένο σε AI/ML/DL
* Εφαρμογές για κινητά
* Λογισμικό ασφάλειας και διατήρησης της ιδιωτικότητας

Σε ορισμένες περιπτώσεις, πρότυπα όπως το ISO/IEC/IEEE 29119 
[4, μέρος 4, μέρος 5] παρέχουν παραδείγματα και υποστήριξη για 
τον προσδιορισμό περιπτώσεων δοκιμών, την αυτοματοποίηση της εκτέλεσής τους και 
τη συντήρηση των συνόλων δοκιμών, όπως στην περίπτωση των
δοκιμών με βάση λέξεις-κλειδιά [4, μέρος 5].

### *Επιλογή και συνδυασμός τεχνικών* 

Ο συνδυασμός διαφορετικών τεχνικών δοκιμών έχει πάντα 
ένα καλά τεκμηριωμένο μέσο για τη διασφάλιση του απαιτούμενου 
επιπέδου ποιότητας του SUT. Επί του παρόντος, ειδικά στην ανάπτυξη με αριστερή μετατόπιση, οι μεθοδολογίες για προσαρμοστικούς 
συνδυασμούς τεχνικών δοκιμών αποτελούν μέρος της κατάστασης 
της πρακτικής. Ο στόχος είναι η βελτίωση της 
αποτελεσματικότητας των διαδικασιών δοκιμών με τη μάθηση από 
εμπειρία και, ταυτόχρονα, την προσαρμογή των 
επιλογών της τεχνικής στην τρέχουσα περίοδο δοκιμών.

#### Συνδυασμός λειτουργικών και διαρθρωτικών

Οι τεχνικές δοκιμών που βασίζονται σε σενάρια και δομές 
συχνά αντιπαραβάλλονται ως *λειτουργικής* έναντι *δομικής* δοκιμής. 
Αυτές οι δύο προσεγγίσεις για την επιλογή περιπτώσεων δοκιμής 
σήμερα θεωρούνται συμπληρωματικές, καθώς χρησιμοποιούν διαφορετικές 
πηγές πληροφοριών και έχει αποδειχθεί ότι 
αναδεικνύουν διαφορετικά προβλήματα. Ανάλογα με τους 
διαφορετικούς οργανωτικούς περιορισμούς, όπως ο προϋπολογισμός,
θα μπορούσαν να συνδυαστούν.

#### Ντετερμινιστική vs. Τυχαία 

Οι περιπτώσεις δοκιμής μπορούν να επιλεγούν με ντετερμινιστικό τρόπο, 
σύμφωνα με πολλές τεχνικές, ή με τυχαίο τρόπο 
από κάποια κατανομή των εισόδων, όπως  συνήθως 
γίνεται στον έλεγχο αξιοπιστίας. Αρκετές αναλυτικές και 
εμπειρικές συγκρίσεις έχουν διεξαχθεί για να 
να αναλύσουν τις συνθήκες που καθιστούν μια προσέγγιση περισσότερο 
αποτελεσματική από την άλλη.

### Τεχνικές βασισμένες σε παράγωγη γνώση 

Οι τεχνικές δοκιμών μπορούν να ενσωματώσουν στοιχεία και 
γνώσεις από διαφορετικούς ερευνητικούς τομείς και πλαίσια. 
Για το σκοπό αυτό, χρησιμοποιούνται προσεγγίσεις και μεθοδολογίες για την
υποστήριξη της δραστηριότητας δοκιμών και τη βελτίωση της αποτελεσματικότητάς της. 
Επί του παρόντος, οι καινοτόμες προσεγγίσεις περιλαμβάνουν τη χρήση ψηφιακών 
δίδυμων ή μεθοδολογιών και πλαισίων προσομοίωσης, 
την αξιοποίηση δυνατοτήτων Μηχανικής Μάθησης και παιχνιδοποίησης και τη χρήση 
(προσομοιωμένων) νευρωνικών δικτύων.

## **Μέτρα που σχετίζονται με τους ελέγχους**

Οι τεχνικές δοκιμών είναι σαν εργαλεία που βοηθούν στην επίτευξη 
συγκεκριμένων στόχων της δοκιμής. Για να αξιολογηθεί κατά πόσον 
επιτυγχάνεται ο στόχος της δοκιμής, απαιτούνται σαφώς καθορισμένα μέτρα. 
Οι μετρήσεις θεωρούνται συνήθως θεμελιώδεις για την ανάλυση της ποιότητας. Η μέτρηση μπορεί 
επίσης να χρησιμοποιηθεί για τη βελτιστοποίηση του σχεδιασμού και της εκτέλεσης δοκιμών. 
Η διαχείριση δοκιμών μπορεί να χρησιμοποιεί διάφορες διαδικασίες 
μέτρα για την παρακολούθηση της προόδου. (βλ. Μέτρηση Τεχνολογιών Λογισμικού στο 
γνωστικό πεδίο Διοίκηση Τεχνολογιών Λογισμικού για πληροφορίες σχετικά με
προγράμματα μέτρησης. Βλ. Μέτρηση λογισμικού στο γνωστικό πεδίο
Διαδικασία Τεχνολογιών Λογισμικού για πληροφορίες 
για τα μέτρα). 

Σύμφωνα με τον ορισμό στο [4, μέρος 4], οι τεχνικές δοκιμών 
μπορούν να ταξινομηθούν ανάλογα με το βαθμό 
κάλυψης που μπορούν να επιτύχουν. Η κάλυψη μπορεί να κυμαίνεται από 
0% έως 100%, εξαιρουμένων των πιθανών μη εφικτών δοκιμών (δηλ, 
δοκιμές που δεν μπορούν να εκτελεστούν). Έτσι, για κάθε 
τεχνική δοκιμών που βασίζεται στις προδιαγραφές, στη δομή και στην εμπειρία, τα σχετικά μέτρα κάλυψης 
και η διαδικασία για την αξιολόγηση της κάλυψης αυτής πρέπει να είναι 
καθορισμένη. Παραδείγματα μέτρων κάλυψης θα μπορούσαν να είναι 
το ποσοστό των κλάδων που καλύπτονται στο πρόγραμμα 
ροής ή το ποσοστό των λειτουργικών 
απαιτήσεων που ασκούνται μεταξύ εκείνων που απαριθμούνται στο 
έγγραφο προδιαγραφών.

Είναι σημαντικό να ληφθεί υπόψη ότι οι εγκαταστάσεις παρακολούθησης 
μπορούν να υπολογίζουν δυναμικά την αναλογία μεταξύ των καλυπτόμενων 
στοιχείων, και ο συνολικός αριθμός μπορεί επίσης να ληφθεί 
υπόψη. Επιπλέον, ειδικά στην περίπτωση των 
τεχνικών δοκιμών που βασίζονται στη δομή, απαραίτητα όργανα του συστήματος υπό δοκιμή μπορεί επίσης να είναι απαραίτητα.

Ωστόσο, το προτεινόμενο σύνολο μέτρων ελέγχου μπορεί να 
να ταξινομηθεί από διαφορετικές οπτικές γωνίες - από 
από τη σκοπιά εκείνων που παρέχουν και επιτρέπουν μια 
αξιολόγηση του SUT με βάση την παρατηρούμενη δοκιμή 
εκροών και εκείνων που αξιολογούν την πληρότητα ή την 
αποτελεσματικότητα των εκτελεσμένων σειρών δοκιμών. 

### *Αξιολόγηση του συστήματος υπό δοκιμή (SUT)* 

Συνήθως, οι δείκτες (δηλαδή οι μετρήσιμες πληροφορίες) μπορούν να 
να χρησιμοποιηθούν για να προσδιοριστεί κατά πόσον ένα SUT αποδίδει όπως αναμένεται
και επιτυγχάνει τα αναμενόμενα αποτελέσματά του. Οι
δείκτες, μερικές φορές γνωστοί ως βασικοί δείκτες απόδοσης (KPIs), συνδέονται στενά με τα
υιοθετημένα μέτρα αξιολόγησης, τις μεθόδους, την ανάλυση δεδομένων 
και την υποβολή εκθέσεων.

#### Μετρήσεις SUT που βοηθούν στον προγραμματισμό και τον σχεδιασμό δοκιμών 

Όλα τα μέτρα δοκιμών που προτείνονται στο [4, μέρος 4] μπορούν να 
να χρησιμοποιηθούν για το σχεδιασμό και την καθοδήγηση των δραστηριοτήτων δοκιμών.
Επιπλέον, κατά τη διαδικασία ανάπτυξης αριστερής μετατόπισης, συγκεκριμένα μέτρα, όπως η συχνότητα ανάπτυξης (Deployment Frequency), ο 
χρόνος προετοιμασίας, ο μέσος χρόνος αποκατάστασης (MTTR), και το 
ποσοστό αποτυχίας αλλαγής, υιοθετούνται επίσης συνήθως για να 
να σχεδιάζουν και να διαχειρίζονται τις δραστηριότητες και τα αποτελέσματα των δοκιμών.

#### Τύποι σφαλμάτων, ταξινόμηση και στατιστικά στοιχεία

Η βιβλιογραφία για τις δοκιμές είναι πλούσια σε ταξινομήσεις και 
ταξινομίες σφαλμάτων που μπορεί να είναι γενικές ή ειδικές για 
ένα πλαίσιο ή χαρακτηριστικά ποιότητας (όπως η ευχρηστία 
ταξινόμησης ελαττωμάτων, η ταξινόμηση του υλικού/λογισμικού, τα
τρωτά σημεία και επιθέσεις ασφάλειας και προστασίας της ιδιωτικής ζωής, και 
η ταξινόμηση των κινδύνων κυβερνοασφάλειας). Για να γίνουν 
οι δοκιμές πιο αποτελεσματικές, είναι σημαντικό να γνωρίζουμε ποιοι
τύποι σφαλμάτων μπορεί να βρεθούν στο SUT και την
σχετική συχνότητα με την οποία τα σφάλματα αυτά έχουν 
εμφανιστεί στο παρελθόν. Αυτές οι πληροφορίες μπορούν να είναι χρήσιμες στην πραγματοποίηση προβλέψεων ποιότητας και στη διαδικασία 
βελτίωσης (βλ. Χαρακτηρισμός στο γνωστικό πεδίο Ποιότητα Λογισμικού).

#### Πυκνότητα σφαλμάτων 

Παραδοσιακά, ένα SUT μπορεί να αξιολογηθεί με την καταμέτρηση 
ανακαλυφθέντων σφαλμάτων ως ο λόγος μεταξύ του αριθμού των 
σφαλμάτων που βρέθηκαν και του μεγέθους του SUT. Λόγω του
σημασιολογικού ορισμού των σφαλμάτων, πρόσθετες 
μετρήσεις μπορούν να ληφθούν υπόψη, όπως το βάθος του σφάλματος 
(ο ελάχιστος αριθμός αφαίρεσης σφαλμάτων που απαιτείται για να γίνει 
ένα SUT σωστό) και η πολλαπλότητα των σφαλμάτων (ο αριθμός των 
ατομικών αλλαγών που απαιτούνται για την επιδιόρθωση ενός σφάλματος).

#### Δοκιμή ζωής, αξιολόγηση αξιοπιστίας 

Μια στατιστική εκτίμηση της αξιοπιστίας του λογισμικού, η οποία 
μπορεί να ληφθεί με την παρατήρηση της αξιοπιστίας που επιτυγχάνεται, μπορεί να είναι 
να χρησιμοποιηθεί για την αξιολόγηση ενός SUT και να αποφασιστεί εάν ο έλεγχος μπορεί να 
να σταματήσει ή το SUT είναι αρκετά ώριμο ώστε να είναι ένα 
υποψήφιο για την επόμενη έκδοση ανάπτυξης με αριστερή μετατόπιση. 
Η αξιολόγηση της αξιοπιστίας αποκτά καθοριστικό ρόλο στο 
πλαίσιο του νέφους (και της ομίχλης) [18].

Από τη μία πλευρά, οι προτάσεις επικύρωσης και επαλήθευσης 
επικεντρώνονται στη διατήρηση του υψηλού επιπέδου 
αξιοπιστίας και διαθεσιμότητας που απαιτείται από τις υπηρεσίες νέφους (ομίχλης). Από την άλλη πλευρά, οι δραστηριότητες ελέγχου αξιοποιούν 
την υπολογιστική ισχύ του περιβάλλοντος του νέφους (ομίχλης) 
 για την επιτάχυνση της αξιολόγησης της αξιοπιστίας και 
μειώνουν δραστικά το κόστος της.

#### Μοντέλα αύξησης της αξιοπιστίας

Τα *μοντέλα αύξησης της αξιοπιστίας* προβλέπουν την αξιοπιστία με βάση 
παρατηρούμενες αστοχίες. Υποθέτουν, γενικά, ότι όταν 
τα σφάλματα που προκάλεσαν τις παρατηρούμενες αστοχίες έχουν διορθωθεί
(αν και ορισμένα μοντέλα δέχονται επίσης ατελείς 
διορθώσεις), η αξιοπιστία του προϊόντος θα αυξηθεί. Υπάρχουν 
πολλά δημοσιευμένα μοντέλα αύξησης της αξιοπιστίας. Συγκεκριμένα, 
τα μοντέλα αυτά χωρίζονται σε *μοντέλα αριθμού αποτυχιών και χρονικού διαστήματος μεταξύ αποτυχιών.*

### *Αξιολόγηση των δοκιμών που πραγματοποιήθηκαν* 

Η συμπεριφορά του SUT επαληθεύεται γενικά με 
εκτέλεση συνόλων ελέγχων (test suite), οι οποίες είναι καθοριστικές για την εύρεση 
ατελειών. Ως εκ τούτου, τόσο από τις προοπτικές των ερευνητών όσο και από τις 
προοπτικές των επαγγελματιών, ένα θεμελιώδες μέρος του
ελέγχου λογισμικού είναι η σύγκριση των συνόλων δοκιμών. Συνήθως,
η αξιολόγηση των συνόλων δοκιμών σημαίνει σύγκριση τεχνικών 
για τη δημιουργία περιπτώσεων δοκιμής που παράγουν τις περιπτώσεις δοκιμής. 
Για το σκοπό αυτό χρησιμοποιούνται διάφορα κριτήρια, όπως 
κριτήρια κάλυψης ή κριτήρια ανάλυσης μετάλλαξης.

#### Έγχυση σφαλμάτων

Στην *έγχυση σφαλμάτων*, ορισμένα σφάλματα 
εισάγονται τεχνητά στο SUT πριν από τον έλεγχο. Όταν μια 
σουίτα ελέγχων  εκτελείται, ορισμένα από αυτά τα σφάλματα που εισάγονται 
αποκαλύπτονται, όπως, ενδεχομένως, και ορισμένα σφάλματα που 
ήδη υπήρχαν. Θεωρητικά, ανάλογα με το ποια και πώς 
πολλά τεχνητά σφάλματα ανακαλύπτονται, η  
αποτελεσματικότητα ελέγχου μπορεί να αξιολογηθεί, και ο υπόλοιπος
αριθμός γνήσιων σφαλμάτων μπορεί να εκτιμηθεί. Στην πράξη, 
οι στατιστικολόγοι αμφισβητούν την κατανομή και την
αντιπροσωπευτικότητα των εγχυόμενων σφαλμάτων σε σχέση με 
γνήσια σφάλματα και το μικρό μέγεθος του δείγματος στο οποίο 
βασίζονται οι προεκτάσεις. Ορισμένοι υποστηρίζουν επίσης ότι αυτή η 
τεχνική πρέπει να χρησιμοποιείται με μεγάλη προσοχή διότι 
η εισαγωγή σφαλμάτων στο SUT ενέχει τον προφανή κίνδυνο 
να τα αφήσει εκεί. 

#### Βαθμολογία μετάλλαξης 

Στον έλεγχο μετάλλαξης, η αποτελεσματικότητα της σουίτας δοκιμών 
υπολογίζεται ως ο λόγος των σκοτωμένων μεταλλαγμένων προς 
τον αριθμό των παραγόμενων μεταλλάξεων. Όσο υψηλότερη είναι η 
τιμή της αποτελεσματικότητας της σουίτας ελέγχου, τόσο το καλύτερο, καθώς υποδεικνύει 
ισχυρότερη ικανότητα ανακάλυψης των πιο πραγματικών ενέσιμων 
σφαλμάτων.

#### Σύγκριση και σχετική αποτελεσματικότητα των 
διαφορετικών τεχνικών 

Η σχετική αποτελεσματικότητα συγκρίνει διαφορετικές  
τεχνικές ελέγχου έναντι μιας συγκεκριμένης ιδιότητας, όπως 
ο αριθμός των ελέγχων που απαιτούνται για την εύρεση της πρώτης αποτυχίας, ο λόγος του αριθμού των σφαλμάτων που βρέθηκαν μέσω των δοκιμών προς όλα τα
σφάλματα που βρέθηκαν κατά τη διάρκεια και μετά τον έλεγχο, και πόσο βελτιώθηκε η αξιοπιστία. Αρκετές μελέτες έχουν ήδη γίνει
για να συγκρίνουν διάφορες τεχνικές 
αναλυτικά και εμπειρικά σύμφωνα με κάθε έννοια 
της ιδιότητας (ή της αποτελεσματικότητας) που ορίζεται.

## Διαδικασία ελέγχου 

Έννοιες, στρατηγικές, τεχνικές και μέτρα δοκιμής 
πρέπει να ενσωματωθούν σε μια καθορισμένη και ελεγχόμενη 
διαδικασία σχεδιασμού ελέγχων για την αξιολόγηση των αποτελεσμάτων των ελέγχων. Η
διαδικασία ελέγχου υποστηρίζει τον έλεγχο και παρέχει κατευθυντήριες γραμμές για 
τους υπεύθυνους για τις διάφορες δραστηριότητες δοκιμών για
να διασφαλιστεί η οικονομικά αποδοτική επίτευξη των στόχων του ελέγχου.

Όπως περιγράφεται στο [4, μέρος 2], η διαδικασία δοκιμής είναι μια πολυεπίπεδη δραστηριότητα διαδικασίας που περιλαμβάνει τις προδιαγραφές ελέγχου σε οργανωτικό, διαχειριστικό και 
δυναμικό επίπεδο. Η οργανωτική διαδικασία ελέγχου 
καθορίζει τα βήματα για τη δημιουργία και τη διατήρηση της δοκιμής 
προδιαγραφών, όπως οι οργανωτικές πολιτικές δοκιμών, 
στρατηγικές, διεργασίες, διαδικασίες και άλλα περιουσιακά στοιχεία [4, 
μέρος 2].

Η διαδικασία διαχείρισης ελέγχων ορίζει τα βήματα 
που είναι απαραίτητα για τη διαχείριση: σχεδιασμός, παρακολούθηση και 
έλεγχος, και ολοκλήρωση.

Τέλος, η διαδικασία δυναμικής δοκιμής καθορίζει τα βήματα για 
σχεδιασμό και την υλοποίηση, τη ρύθμιση του περιβάλλοντος και 
συντήρησης, εκτέλεσης και αναφοράς περιστατικών δοκιμών.

Στο υπόλοιπο τμήμα αυτής της ενότητας, θα παρουσιαστούν ορισμένες πρακτικές 
εκτιμήσεις σχετικά με την προδιαγραφή της διαδικασίας δοκιμής, 
διαχείρισης και εκτέλεσης, καθώς και μια περίληψη των 
των υποδιαδικασιών και των δραστηριοτήτων δοκιμής που περιλαμβάνονται σε 
οργανωτικό, διαχειριστικό και δυναμικό επίπεδο, όπως 
παρέχονται στο [4, μέρος 2] .

### *Πρακτικές εκτιμήσεις* 
[4, μέρος 1].
Οι διαδικασίες δοκιμών θα πρέπει να επιτρέπουν την αυτοματοποίηση 
διαφόρων φάσεων δοκιμών και θα πρέπει να βασίζονται στην 
ελεγξιμότητα, ιχνηλασιμότητα, αναπαραγωγησιμότητα και  την
εκτίμηση του κινδύνου/κόστους των εκτελούμενων δραστηριοτήτων. Στην 
υπόλοιπη ενότητα, τα συνήθως εφαρμοζόμενα στάδια δοκιμών 
περιγράφονται, που είναι συμβατά και εφαρμόσιμα σε όλα τα 
μοντέλα κύκλου ζωής. (βλ. Κύκλοι ζωής λογισμικού στο γνωστικό πεδίο Διαδικασία Μηχανικής Λογισμικού.)

#### Συμπεριφορές/Απόλυτος προγραμματισμός

Σημαντικό στοιχείο των επιτυχημένων δοκιμών είναι η 
συνεργατική στάση απέναντι στις δοκιμές και τις
δραστηριότητες διασφάλισης ποιότητας (QA). Οι διευθυντές έχουν βασικό ρόλο 
στην προώθηση μιας ευνοϊκής υποδοχής απέναντι στην 
ανακάλυψη αποτυχίας και την διόρθωση κατά την ανάπτυξη λογισμικού 
και της συντήρησης. Για παράδειγμα, στις
διαδικασίες ανάπτυξης με αριστερή μετατόπιση, όπως η ευέλικτη, η επικοινωνία 
και η συνεργασία μεταξύ ελεγκτών και προγραμματιστών
θεωρούνται ζωτικής σημασίας για την επίτευξη επιτυχημένων 
αποτελεσμάτων ελέγχου . 

#### Οδηγοί δοκιμών και οργανωτική διαδικασία

Διάφοροι στόχοι μπορούν να καθοδηγήσουν τις φάσεις των δοκιμών. Για 
παράδειγμα, η δοκιμή με βάση τον κίνδυνο χρησιμοποιεί τους κινδύνους του προϊόντος για 
την ιεράρχηση και την εστίαση της στρατηγικής δοκιμών, και η δοκιμή βάσει σεναρίου ορίζει περιπτώσεις δοκιμών βάσει καθορισμένων 
σεναρίων λογισμικού και καταλόγους αναμονής. Συνήθως, η 
οργάνωση της διαδικασίας δοκιμής περιλαμβάνει τον ορισμό των
πολιτικών ελέγχου (δηλαδή, τον προσδιορισμό του σκοπού, των στόχων και το
συνολικό πεδίο εφαρμογής του ελέγχου) και στρατηγικές δοκιμής (δηλ, 
προσδιορισμό των κατευθυντήριων γραμμών σχετικά με τον τρόπο με τον οποίο θα γίνει η δοκιμή). Για παράδειγμα, στην ανάπτυξη με αριστερή μετατόπιση, μια 
στρατηγική δοκιμών πρέπει να περιλαμβάνει τουλάχιστον τα ακόλουθα δεδομένα: 
τους σκοπούς (π.χ., που ορίζονται μέσω των ιστοριών χρήστη), τους
στόχους (π.χ., μια σουίτα δοκιμών), το πεδίο εφαρμογής (το SUT), και 
το περιβάλλον και τις μεθόδους (π.χ., πώς και πού 
εκτελείται η σουίτα δοκιμών).

#### Διαχείριση δοκιμών και δυναμικές διαδικασίες δοκιμών

Δραστηριότητες δοκιμής που διεξάγονται σε διαφορετικά επίπεδα (βλ. Ενότητα 2, Επίπεδα δοκιμών) θα πρέπει να οργανώνονται - με 
ανθρώπους, εργαλεία, πολιτικές και μέτρα - σε μια καλά καθορισμένη διαδικασία που αποτελεί αναπόσπαστο μέρος του κύκλου ζωής. Η  
διαχείριση της διαδικασίας ελέγχου περιλαμβάνει διάφορες υποδιαδικασίες, όπως 
ο σχεδιασμός, η παρακολούθηση, ο έλεγχος και η ολοκλήρωση, 
ενώ η δυναμική διαδικασία δοκιμών περιλαμβάνει το σχεδιασμό δοκιμών 
και την υλοποίηση, τη ρύθμιση του περιβάλλοντος ελέγχου και 
συντήρησης, εκτέλεσης ελέγχων και  την αναφορά περιστατικών ελέγχου.

#### Τεκμηρίωση ελέγχων

Σύμφωνα με το [4, μέρος 3], η τεκμηρίωση είναι αναπόσπαστο μέρος 
στην τυποποίηση της διαδικασίας δοκιμής. Έγγραφα δοκιμών 
μπορούν να ταξινομηθούν σε τρεις ιεραρχικές κατηγορίες: 
Οργανωτική τεκμηρίωση δοκιμών, διαχείριση δοκιμών 
και την τεκμηρίωση δυναμικών δοκιμών. 
Η οργανωτική τεκμηρίωση δοκιμών περιλαμβάνει 
πληροφορίες που είναι απαραίτητες για την τεκμηρίωση της πολιτικής δοκιμών 
και των οργανωτικών στρατηγικών δοκιμών. Η δοκιμή 
διαχείρισης περιλαμβάνει το σχέδιο δοκιμών, τη 
κατάσταση δοκιμής και την έκθεση ολοκλήρωσης της δοκιμής. Τέλος, η τεκμηρίωση των δυναμικών δοκιμών περιλαμβάνει τα εξής 
έγγραφα: προδιαγραφές δοκιμής ( 
προδιαγραφή σχεδιασμού δοκιμής, προδιαγραφή περιπτώσεων δοκιμής και 
προδιαγραφές διαδικασίας δοκιμής ), απαιτήσεις δεδομένων δοκιμής,  
απαιτήσεις περιβάλλοντος δοκιμής, έκθεση ετοιμότητας δεδομένων δοκιμής, δοκιμή 
και έκθεση ετοιμότητας περιβάλλοντος, και έκθεση εκτέλεσης δοκιμής. (όπως τα πραγματικά αποτελέσματα, τα αποτελέσματα της δοκιμής, το 
ημερολόγιο εκτέλεσης ελέγχων και η έκθεση συμβάντων).
Η τεκμηρίωση των δοκιμών θα πρέπει να παράγεται και 
συνεχώς να επικαιροποιείται με την ίδια ποιότητα με άλλες 
τεκμηριώσεις μηχανικής λογισμικού. Η
τεκμηρίωση ελέγχου θα πρέπει επίσης να τελεί υπό τον έλεγχο 
διαχείρισης διαμόρφωσης λογισμικού. (Βλέπε το γνωστικό πεδίο
Διαχείριση διαμόρφωσης λογισμικού.) 

#### Ομάδα δοκιμών 

Η επισημοποίηση της διαδικασίας δοκιμών μπορεί επίσης να περιλαμβάνει την επισημοποίηση του ελέγχου της ομάδας του οργανισμού. 
Λαμβάνοντας υπόψη το κόστος, το χρονοδιάγραμμα, τα επίπεδα ωριμότητας των
εμπλεκόμενων οργανισμών και τη κρισιμότητας της 
εφαρμογής μπορεί να καθοδηγηθεί η απόφαση. Η ομάδα δοκιμών 
μπορεί να αποτελείται από μέλη που συμμετέχουν (ή όχι) στην 
στην ανάπτυξη του SUT (δηλαδή να έχουν ή να μην έχουν 
αμερόληπτη, ανεξάρτητη προοπτική) ή εσωτερικό (ή 
εξωτερικό) προσωπικό. Στις μέρες μας, η ανάπτυξη με αριστερή μετατόπιση
δεν κάνει έντονη διάκριση μεταξύ των μελών τηε ομάδας δοκιμών  επειδή η σουίτα δοκιμών ορίζεται και ενημερώνεται 
σύμφωνα με την ανάπτυξη του SUT και του παραδοτέου
κώδικα.

#### Μέτρα διαδικασίας δοκιμής 

Οι διαχειριστές χρησιμοποιούν διάφορα μέτρα για τους πόρους που δαπανώνται 
στις δοκιμές, καθώς και για τη σχετική εύρεση σφαλμάτων 
αποτελεσματικότητας των διαφόρων φάσεων δοκιμής, για τον έλεγχο και την  βελτίωση της διαδικασίας δοκιμών, καθώς και για την παροχή 
πληροφοριών για τη διαχείριση των κινδύνων της διαδικασίας. Ως εκ τούτου, 
η παρακολούθηση και ο έλεγχος των δοκιμών πρέπει να καθορίζουν τα απαιτούμενα δεδομένα 
και πληροφορίες και να αναφέρουν τον τρόπο απόκτησής τους. Τα μέτρα δοκιμής μπορεί να καλύπτουν τον αριθμό των καθορισμένων, 
εκτελεσμένων, επιτυχών και αποτυχημένων περιπτώσεων δοκιμής, μεταξύ άλλων 
στοιχείων. Τα μέτρα αυτά μπορούν επίσης να συνδυαστούν με 
συγκεκριμένες μετρικές διαδικασίας, όπως ο υπολειπόμενος κίνδυνος, 
οι αθροιστικές ατέλειες ανοικτές και κλειστές, η πρόοδος των περιπτώσεων δοκιμής, 
και το ποσοστό εντοπισμού ελαττωμάτων. Η αξιολόγηση των φάσεων δοκιμής μπορεί να συνδυαστεί με την εκτίμηση των αιτιών για την αξιολόγηση της αποτελεσματικότητας της διαδικασίας δοκιμών στην
εύρεση σφαλμάτων όσο το δυνατόν νωρίτερα. Μια τέτοια αξιολόγηση 
μπορεί να συνδεθεί με την ανάλυση κινδύνου. Επιπλέον, οι 
πόροι που θεωρείται ότι αξίζει να δαπανηθούν για δοκιμές πρέπει 
να είναι ανάλογοι με τη χρήση της εφαρμογής και την
κρισιμότητα. Διαφορετικές τεχνικές έχουν διαφορετικό κόστος
και αποδίδουν διαφορετικά επίπεδα εμπιστοσύνης στο προϊόν 
αξιοπιστίας του προϊόντος.

#### Παρακολούθηση και έλεγχος δοκιμών 

Η *παρακολούθηση και ο έλεγχος* αποτελούν σημαντική υποδιαδικασία της διαδικασίας διαχείρισης δοκιμών, όπως αναφέρεται στο [4, μέρος 
2], χρήσιμες για τη συλλογή δεδομένων και πληροφοριών που απαιτούνται 
κατά τη διάρκεια της διαχείρισης και της αξιολόγησης δοκιμών. Συνήθως, 
οι δραστηριότητες παρακολούθησης και ελέγχου εκτελούνται  
παράλληλα με την εκτέλεση της δοκιμής, και μερικές φορές, τα δεδομένα 
που συλλέγονται μπορεί να προκαλέσουν την αναθεώρηση της συνολικής διαδικασίας 
σχεδιασμού. Η παρακολούθηση διασφαλίζει ότι η διαδικασία δοκιμής 
συμμορφώνεται με ένα συγκεκριμένο σχέδιο δοκιμών για την ανίχνευση της 
ικανοποίηση των απαιτήσεων και τον μετριασμό των εντοπισμένων 
κινδύνων σε ικανοποιητικό βαθμό. Κατά τη διάρκεια της παρακολούθησης των δοκιμών και του
ελέγχου, η ειδική τεκμηρίωση (αναφορές δοκιμών) μπορεί  
να παράγεται τακτικά για να βοηθήσει στην αξιολόγηση και τεκμηρίωση της 
δραστηριότητα δοκιμής.

#### Ολοκλήρωση δοκιμής 

Πρέπει να ληφθεί μια απόφαση σχετικά με το πόση δοκιμή είναι 
αρκετή και πότε μπορεί να ολοκληρωθεί ένα στάδιο δοκιμής. 
Επομένως, ο σκοπός της *ολοκλήρωσης της δοκιμής*, μιας υποδιαδικασίας της διαδικασίας διαχείρισης της δοκιμής, όπως αναφέρεται στο [4, μέρος 
2], είναι να διασφαλίσει ότι οι απαιτήσεις δοκιμής ικανοποιούνται και 
επαληθεύονται, οι αναφορές δοκιμών ολοκληρώνονται και τα αποτελέσματα των δοκιμών 
κοινοποιούνται στους ενδιαφερόμενους φορείς. Διεξοδικά 
μέτρα, όπως η επιτευχθείσα κάλυψη κώδικα ή η
λειτουργική κάλυψη, και οι εκτιμήσεις της πυκνότητας σφαλμάτων ή της
λειτουργικής αξιοπιστίας, παρέχουν χρήσιμη υποστήριξη αλλά είναι 
δεν επαρκούν από μόνες τους. Η απόφαση επίσης 
περιλαμβάνει εκτιμήσεις σχετικά με το κόστος και τους κινδύνους 
που προκύπτουν από πιθανές εναπομένουσες βλάβες, σε αντίθεση με 
το κόστος που προκύπτει από τη συνέχιση της δοκιμής (βλ. 
κριτήρια επιλογής και επάρκειας ελέγχου στην ενότητα 1.2, Βασικά 
Ζητήματα). Όπως και για τις άλλες δραστηριότητες, σε αυτό το στάδιο, 
παράγεται ειδική τεκμηρίωση (π.χ. δοκιμή 
έκθεση ολοκλήρωσης) και κοινοποιείται στους αρμόδιους 
ενδιαφερομένους.

#### Επαναχρησιμοποίηση της δοκιμής

Είναι απαραίτητο να προστεθεί πολυπλοκότητα και χρόνος για τον
σχεδιασμό ελέγχου και τη σχεδίαση για να επιτευχθεί η επαναχρησιμοποίηση των 
τεχνουργημάτων δοκιμής, όπως η περίπτωση δοκιμής ή η εκτέλεση 
περιβάλλοντος, η οποία είναι επιθυμητή όταν η ανάπτυξη δοκιμών 
είναι δαπανηρή, χρονοβόρα και πολύπλοκη.

Η επαναχρησιμοποίηση δοκιμών συλλέγει και ταξινομεί την γνώση ελέγχου (περιπτώσεις δοκιμών και αποτελέσματα δοκιμών) για να γίνει αυτή η 
πληροφορία με δυνατότητα αναζήτησης και χρήσης για τη δημιουργία νέων 
δοκιμών ή την επανεκτέλεση μιας υπάρχουσας δοκιμής. Κατάλληλα
αποθετήρια βασισμένα στη γνώση θα πρέπει να διαμορφωθούν 
και να διαχειρίζονται για τη δυνατότητα επαναχρησιμοποίησης των δοκιμών, ώστε οι αλλαγές στο λογισμικό 
απαιτήσεων ή του σχεδιασμού να μπορούν να αντικατοπτρίζονται σε αλλαγές
στις δοκιμές. 

Επί του παρόντος, η δυνατότητα επαναχρησιμοποίησης των περιπτώσεων δοκιμών είναι κομβικής σημασίας σε 
ανάπτυξη χαρακτηριστικών ή σειρών προϊόντων και 
δοκιμών παλινδρόμησης. Η δυνατότητα επαναχρησιμοποίησης δοκιμών αφορά επίσης την
συντηρησιμότητα, διότι η επαναχρησιμοποίηση μπορεί να μειώσει το κόστος 
και τη σχετική προσπάθεια και να βελτιώσει την αποτελεσματικότητα μιας δοκιμής.

### *Υποδιαδικασίες και δραστηριότητες δοκιμών*

Στο υπόλοιπο αυτής της ενότητας, οι κύριες δοκιμαστικές 
δραστηριότητες και υποδιαδικασίες παρουσιάζονται συνοπτικά.

#### Διαδικασία σχεδιασμού δοκιμών 

Όπως όλες οι άλλες πτυχές της διαχείρισης έργου, 
οι δραστηριότητες ελέγχου πρέπει να σχεδιάζονται. Σύμφωνα με το [4, μέρος 2], 
οι βασικές πτυχές του σχεδιασμού δοκιμών περιλαμβάνουν τον προσδιορισμό και 
τον συντονισμό του προσωπικού, τον προσδιορισμό της δοκιμής 
στόχου και των κριτηρίων ολοκλήρωσης, τον ορισμό της δοκιμής 
εγκαταστάσεων και του εξοπλισμού, τη δημιουργία και τη συντήρηση 
όλων των εγγράφων που σχετίζονται με τη δοκιμή, καθώς και την
διαχείριση για πιθανά ανεπιθύμητα αποτελέσματα. Αυτές οι
δραστηριότητες μπορούν να οργανωθούν σε τρία διαφορετικά επίπεδα: (1) 
διαχείριση της διαδικασίας (δηλ. προσδιορισμός των δοκιμών 
πολιτικών, στρατηγικών, διεργασιών και διαδικασιών), (2) 
οργανωτική διαχείριση (δηλ., καθορισμός των δοκιμών 
φάσης, του τύπου της δοκιμής και του στόχου της δοκιμής), και (3) σχεδιασμός και 
εφαρμογή (δηλαδή, ορισμός της δοκιμής 
περιβάλλοντος, της διαδικασίας εκτέλεσης της δοκιμής και 
παρακολούθησης, της διαδικασίας ολοκλήρωσης και της υποβολής εκθέσεων).

#### Σχεδιασμός και υλοποίηση δοκιμών

Η δημιουργία περιπτώσεων δοκιμής βασίζεται στο επίπεδο της δοκιμής που πρόκειται να πραγματοποιηθεί και τις επιλεγμένες τεχνικές δοκιμών. 
Σύμφωνα με τη δυναμική διαδικασία δοκιμών, όπως περιγράφεται στο 
[4, μέρος 2], οι προϋποθέσεις της δημιουργίας περιπτώσεων δοκιμής είναι ο προσδιορισμός των στόχων δοκιμής και η επιλογή 
των κατάλληλων τεχνικών δοκιμών/επιδείξεων. Η
παραγωγή ελέγχων επικεντρώνεται στην υλοποίηση και εκτέλεση 
περιπτώσεων δοκιμής. Συχνά σχετίζεται με τη δημιουργία εργαλείων (δηλ. τη χρήση συγκεκριμένου 
λογισμικού, που ονομάζεται επίσης *γεννήτρια περιπτώσεων δοκιμών*). Αυτό το 
λογισμικό δέχεται εισόδους (όπως πηγαίο κώδικα, δοκιμαστικές 
κριτήρια, προδιαγραφές ή ορισμοί δομών δεδομένων) 
και τα χρησιμοποιεί για τη δημιουργία των συνόλων δοκιμών. Μερικές φορές, 
μια γεννήτρια περιπτώσεων δοκιμών μπορεί να προσδιορίσει τα αναμενόμενα αποτελέσματα 
με τη χρήση μιας συγκεκριμένης διευκόλυνσης oracle. Αυτό συμβάλλει στην 
πλήρη αυτοματοποίηση της συνολικής διαδικασίας δοκιμών.

#### Ρύθμιση και συντήρηση περιβάλλοντος δοκιμών

Σύμφωνα με τη διαδικασία δυναμικής δοκιμής, όπως περιγράφεται στο 
[4, μέρος 2], η ανάπτυξη και η ρύθμιση του περιβάλλοντος δοκιμής 
περιλαμβάνουν τον προσδιορισμό της υποδομής δοκιμών. Αυτό 
περιλαμβάνει την επιλογή ή την ανάπτυξη των εγκαταστάσεων, 
του υλικού, του λογισμικού, του υλικολογισμικού και των διαδικασιών για τη διεξαγωγή της δραστηριότητας δοκιμής. Το περιβάλλον δοκιμών 
μπορεί να προσομοιωθεί, να ελεγχθεί και να εκτελεστεί in vitro ή 
in vivo. Η ανάπτυξη του περιβάλλοντος δοκιμής περιλαμβάνει επίσης 
τη δημιουργία εγκαταστάσεων παρακολούθησης και καταγραφής χρήσιμων για 
την τεκμηρίωση  δραστηριοτήτων δοκιμής και την αξιολόγηση 
του αποτελέσματος που λαμβάνεται. Το περιβάλλον δοκιμών πρέπει να είναι 
συμβατό με τα άλλα εργαλεία μηχανικής λογισμικού 
που χρησιμοποιούνται.

#### Ελεγχόμενα πειράματα και εκτέλεση δοκιμών

Η εκτέλεση των δοκιμών θα πρέπει να ενσωματώνει μια βασική αρχή 
επιστημονικού ελεγχόμενου πειραματισμού - όλα όσα γίνονται κατά τη διάρκεια των δοκιμών πρέπει να εκτελούνται και να  
τεκμηριώνονται συγκεκριμένα και με αρκετή σαφήνεια ώστε 
ένα άλλο άτομο να μπορεί να αναπαράγει τα αποτελέσματα. Ως εκ τούτου, 
οι δοκιμές θα πρέπει να εκτελούνται σύμφωνα με τεκμηριωμένα 
διαδικασίες χρησιμοποιώντας μια σαφώς καθορισμένη έκδοση του SUT. 
Ειδικά κατά τη διάρκεια των δοκιμών αποδοχής, οι ελεγχόμενες 
πειράματα όπως η δοκιμή A/B μπορούν επίσης να εκτελεστούν για 
να αξιολογούνται στατιστικά οι προτιμήσεις των χρηστών 
μεταξύ διαφορετικών εκδόσεων του SUT.

#### Αναφορά περιστατικών δοκιμών

Σύμφωνα με τη δυναμική διαδικασία δοκιμής, όπως περιγράφεται στο 
[4, μέρος 2], τα περιστατικά δοκιμών και η υποβολή εκθέσεων επικεντρώνονται στην 
καλά καθορισμένη διαδικασία συλλογής δεδομένων δοκιμής (δηλ, 
τον προσδιορισμό του πότε διεξήχθη μια δοκιμή, ποιος πραγματοποίησε 
τη δοκιμή, ποια διαμόρφωση λογισμικού χρησιμοποιήθηκε, και 
άλλες σχετικές πληροφορίες ταυτοποίησης). Αυτή η
διαδικασία και τα συλλεχθέντα στοιχεία μπορούν να αξιοποιηθούν 
για σκοπούς λογοδοσίας. Η αναφορά δοκιμών μπορεί να περιλαμβάνει 
κατάλληλα συστήματα ελέγχου για τον εντοπισμό απροσδόκητων ή 
λανθασμένων αποτελεσμάτων δοκιμών και την καταγραφή τους σε ένα  
σύστημα αναφοράς προβλημάτων. Τα δεδομένα αυτά αποτελούν τη βάση για μεταγενέστερες 
αποσφαλμάτωσεις (debugging) και διορθώσεις των προβλημάτων που παρατηρήθηκαν ως 
αποτυχίες κατά τη διάρκεια των δοκιμών. Επίσης, οι ανωμαλίες που δεν ταξινομούνται 
θα μπορούσαν να τεκμηριωθούν εάν αργότερα γίνουν 
σοβαρότερες από ό,τι αρχικά θεωρήθηκε. Οι εκθέσεις δοκιμών είναι επίσης 
εισροές στη διαδικασία υποβολής αιτημάτων διαχείρισης αλλαγών. 
(Βλ. Έλεγχος διαμόρφωσης λογισμικού στο γνωστικό πεδίο Λογισμικό 
Διαχείριση διαμόρφωσης λογισμικού.) 

Ως εκ τούτου, η *διαδικασία αναφοράς περιστατικών δοκιμών* επικεντρώνεται  
στον εντοπισμό των συμβάντων των σχετικών ενδιαφερομένων μερών που 
θα μπορούσαν να χρησιμοποιηθούν για τον προσδιορισμό των πτυχών του λογισμικού 
δοκιμών και άλλων διαδικασιών που χρειάζονται βελτίωση και στο
πόσο αποτελεσματικές ήταν οι προηγούμενες προσεγγίσεις.

Μέρος της αναφοράς περιστατικών είναι επίσης η αξιολόγηση της δοκιμής 
αποτελεσμάτων για να καθοριστεί αν η δοκιμή ήταν 
επιτυχής. Στις περισσότερες περιπτώσεις, "επιτυχής" σημαίνει ότι το 
λογισμικό λειτούργησε όπως αναμενόταν και δεν είχε κανένα 
σημαντικό απροσδόκητο αποτέλεσμα. Δεν είναι όλα τα απροσδόκητα 
αποτελέσματα απαραίτητα σφάλματα- μερικές φορές 
διαπιστώνεται ότι είναι απλώς θόρυβος. Προτού ένα σφάλμα μπορέσει να αφαιρεθεί μπορεί να 
απαιτείται προσπάθεια ανάλυσης και αποσφαλμάτωσης
για την απομόνωση, τον εντοπισμό και την περιγραφή του. Όταν τα αποτελέσματα των δοκιμών 
είναι ιδιαίτερα σημαντικά, μια επίσημη επιτροπή αναθεώρησης μπορεί  
να συγκληθεί για την αξιολόγησή τους.

### *Στελέχωση* 

Σύμφωνα με το [4, μέρος 3], η στελέχωση περιλαμβάνει τον καθορισμό 
ρόλων, δραστηριοτήτων και αρμοδιοτήτων, τον καθορισμό των προσλήψεων 
και τον καθορισμό των αναγκών κατάρτισης. Η στελέχωση επηρεάζει 
τον κίνδυνο του έργου, επειδή η εμπειρογνωμοσύνη της ομάδας μπορεί να 
υπονομεύσει την ικανότητα να ανακαλύπτει σφάλματα, να αντιμετωπίζει 
μεταβαλλόμενες απαιτήσεις, να τηρεί τις προθεσμίες και 
να αυξήσει/μειώσει το κόστος συντήρησης. 

Ο ορισμός των ρόλων, των δραστηριοτήτων και των αρμοδιοτήτων 
καθορίζει τους ακόλουθους ρόλους και αρμοδιότητες: 
ο επικεφαλής της δραστηριότητας και το προσωπικό υποστήριξης, οι ρόλοι που σχετίζονται με τη δοκιμή και οι αντίστοιχες ευθύνες τους, 
και το πρόσωπο που είναι υπεύθυνο για την παροχή της δοκιμής 
αντικειμένου(-ων). 

Ανάλογα με τον υιοθετούμενο κύκλο ζωής ανάπτυξης, 
οι τυπικοί ρόλοι δοκιμών περιλαμβάνουν μεταξύ άλλων 
scrum master/επικεφαλής δοκιμών, αναλυτής QA/δοκιμών, σχεδιαστής δοκιμών, 
μηχανικός και σύμβουλος ασφάλειας/απόδοσης δοκιμών, δοκιμαστής 
περιβάλλοντος, εκτελεστής δοκιμών και σύμβουλος αυτοματοποίησης δοκιμών
ή αρχιτέκτονας.

Οι ανάγκες πρόσληψης απαιτούν τον προσδιορισμό συγκεκριμένων 
απαιτήσεων για τις οποίες απαιτείται πρόσθετο προσωπικό δοκιμών  για την ολοκλήρωση της διαδικασίας δοκιμών (καθώς και 
πότε χρειάζεται αυτό το προσωπικό και τις επιθυμητές δεξιότητες). 
Ανάλογα με τις επιχειρηματικές ανάγκες, η στελέχωση μπορεί να λάβει 
διαφορετικές μορφές, από εσωτερικές μετακινήσεις έως εξωτερικές 
προσλήψεις ή ακόμη και συμβούλους ή/και εξωτερικούς πόρους.

Τέλος, η προδιαγραφή των εκπαιδευτικών αναγκών περιλαμβάνει 
τον ορισμό του απαιτούμενου επιπέδου δεξιοτήτων. Περιλαμβάνει επίσης 
τον προσδιορισμό των δραστηριοτήτων κατάρτισης (όπως 
εκπαίδευση σε αίθουσα διδασκαλίας, εκπαίδευση με αυτοματοποιημένο ρυθμό, εκπαίδευση μέσω υπολογιστή ή καθοδήγηση) που είναι χρήσιμες για την παροχή των 
απαραίτητων δεξιοτήτων στο επιλεγμένο προσωπικό.

## **Δοκιμές λογισμικού στις διαδικασίες ανάπτυξης και στους τομείς εφαρμογών**

Όποια και αν είναι η διαδικασία ανάπτυξης που υιοθετείται, η δοκιμή 
παραμένει θεμελιώδης δραστηριότητα. Ωστόσο, συγκεκριμένες 
δραστηριότητες δοκιμών ή ορολογίες θα μπορούσαν να χρησιμοποιηθούν σε 
ορισμένες περιπτώσεις, όπως η υιοθετημένη ζωή ανάπτυξης 
και/ή ο τομέας της εφαρμογής.

### *Δοκιμές μέσα σε διαδικασίες ανάπτυξης λογισμικού*

Στο υπόλοιπο αυτής της ενότητας, οι ιδιαιτερότητες των δοκιμών 
μέσα στις διάφορες διαδικασίες ανάπτυξης παρέχονται.

#### Δοκιμές σε παραδοσιακές διαδικασίες 

Υπάρχει μια ποικιλία παραδοσιακών διαδικασιών, ουσιαστικά 
που βασίζονται στις αρχές ανάπτυξης SUT, οι οποίες μπορούν να 
υιοθετηθούν εντός του οργανισμού. Διαδοχική, V, σπειροειδές 
μοντέλο και η επαναληπτική είναι μερικές μόνο από τις διαδικασίες 
που εφαρμόζονται συνήθως. (Οι κύκλοι ζωής λογισμικού στο γνωστικό πεδίο
Διαδικασία μηχανικής λογισμικού  παρέχει μια λεπτομερή 
περιγραφή του καθενός). Ωστόσο, σε όλες αυτές τις διαδικασίες, 
η δοκιμή είναι απλώς μια αντιληπτή δραστηριότητα- μερικές φορές 
εκτελείται στο τέλος της διαδικασίας, με ένα απτό αποτέλεσμα. 
κίνδυνο αποτυχίας της ανάπτυξης SUT σε περίπτωση απόκλισης 
των αναγκών του τελικού χρήστη ή των ζητημάτων αξιολόγησης. Κατά τη διάρκεια των 
τελευταίων ετών, για την αξιολόγηση και τον έλεγχο της συνολικής ποιότητας 
του SUT, πρωτοβουλίες όπως το Μοντέλο Ωριμότητας Δοκιμών 
ενσωμάτωση (TMMi) και η διαδικασία 
βελτίωσης λογισμικού (SPI) έχουν καθιερωθεί. Ως αποτέλεσμα, 
διάφορα υφιστάμενα πλαίσια έχουν επικαιροποιηθεί ή βελτιωθεί
για το σκοπό αυτό, όπως η βελτίωση της διαδικασίας λογισμικού
και ο καθορισμός ικανοτήτων (SPICE), 
η ολοκλήρωση του μοντέλου ωριμότητας ικανοτήτων (CMMI), και 
η ορθολογική ενοποιημένη διαδικασία (RUP). 

Για παράδειγμα, το CMMI είναι ένα από τα πιο αναφερόμενα 
μοντέλα- μπορεί να καθοδηγήσει τους βασικούς ενδιαφερόμενους του SUT στην απόκτηση έλεγχου της ανάπτυξης και της συντήρησής των
διαδικασιών. Πρόκειται, στην πραγματικότητα, για ένα καλά καθορισμένο σύνολο βέλτιστων 
πρακτικών στον τομέα των δοκιμών λογισμικού που βελτιώνει την ποιότητα του SUT 
αυξάνοντας την ικανοποίηση των πελατών.

Το μοντέλο RUP, που παρουσιάστηκε στις αρχές της δεκαετίας του 2000, μπορεί να
θεωρηθεί ως προκάτοχος του κινήματος αριστερής μετατόπισης. Το  RUP 
ενθαρρύνει την έγκαιρη δοκιμή προσφέροντας διάφορους 
μηχανισμούς για την στενότερη ενσωμάτωση των δοκιμών με  
την προσπάθεια ανάπτυξης λογισμικού, καθιστώντας τη δοκιμή μια ξεχωριστή 
πειθαρχία. Επιπλέον, το RUP προωθεί μια επαναληπτική 
προσέγγιση ανάπτυξης για τη συνεχή επαλήθευση 
ποιότητας. Επιτρέπει επίσης τις περιπτώσεις χρήσης και τον κίνδυνο να καθοδηγήσουν την
ανάπτυξη του SUT και επιτρέπει τη στρατηγική αλλαγή 
διαχείρισης αλλαγών. Πράγματι, το RUP ομαδοποιεί τα SUT 
και τις επαναλήψεις SUT σε τέσσερις φάσεις: 
έναρξη, επεξεργασία, κατασκευή και μετάβαση.

Σήμερα, το RUP μπορεί να θεωρηθεί τόσο επαναληπτικό όσο και 
ευέλικτο - Επαναληπτικό επειδή όλες οι βασικές δραστηριότητες 
επαναλαμβάνονται καθ' όλη τη διάρκεια του έργου ανάπτυξης SUT, 
και ευέλικτο επειδή οι καθορισμένες φάσεις του επιλεγμένου 
κύκλου ζωής μπορούν να επαναλαμβάνονται έως ότου το SUT πληροί 
απαιτήσεις (τόσο λειτουργικές όσο και μη λειτουργικές), 
επιτυγχάνει τους καθορισμένους στόχους και εγγυάται την 
ποιότητα-στόχο.

#### Δοκιμές σύμφωνα με το κίνημα της αριστερής μετατόπισης

Το κίνημα της *αριστερής μετατόπισης των δοκιμών* προωθεί την υιοθέτηση 
των δοκιμών στα αρχικά στάδια της ανάπτυξης λογισμικού 
για τον εντοπισμό και την εξάλειψη των σφαλμάτων όσο το δυνατόν νωρίτερα για  
να αυξηθεί η συνολική ποιότητα του SUT και να μειωθεί το κόστος και οι
κίνδυνοι των δραστηριοτήτων δοκιμών. Επί του παρόντος, διάφοροι 
κύκλοι ζωής ανάπτυξης, όπως οι ευέλικτοι, οι DevOps και οι 
TDD, ανήκουν στο κίνημα της αριστερής μετατόπισης. (Βλέπε Ευέλικτοι
Μέθοδοι στο γνωστικό πεδίο διαδικασία μηχανικής λογισμικού.)
Στην ανάπτυξη με βάση την αριστερή μετατόπιση, οι διαφορετικές δοκιμές 
πτυχές θα πρέπει να λαμβάνονται υπόψη:
A. Η εσωτερική ποιότητα του κώδικα: Η παλινδρόμηση, 
η ιεράρχηση προτεραιοτήτων, η ασφάλεια και η ιδιωτικότητα θα μπορούσαν να είναι οι 
πρωταρχικοί στόχοι της εσωτερικής ποιότητας κώδικα 
(ενότητα 2.2). Συνήθως, η δοκιμή μονάδας και η ολοκλήρωση 
είναι τα στοχευμένα επίπεδα (ενότητα 2.1), 
ενώ η βασισμένη στη δομή είναι η κύρια 
τεχνική ελέγχου (ενότητα 3.2).
B. Επιχειρηματικές ανάγκες: Η συμμόρφωση και ευθυγράμμιση, 
η ευχρηστία, η ασφάλεια και η ιδιωτικότητα είναι απλώς ένα υποσύνολο  
των πιθανών στόχων των επιχειρηματικών αναγκών 
(ενότητα 2.2). Όσον αφορά την πτυχή αυτή, 
η δοκιμή επικεντρώνεται περισσότερο στο σύστημα και 
επίπεδο δοκιμών αποδοχής και στις 
προσδοκίες του τελικού χρήστη, καθώς και στη χρήση (ενότητα 3.5) 
και στις τεχνικές που βασίζονται σε σενάρια (ενότητα 3.1.8).
C. Αντιλαμβανόμενη ποιότητα: Άλφα, βήτα, εγκατάσταση, 
η χρηστικότητα, η ασφάλεια και η ιδιωτικότητα θα μπορούσαν να είναι οι 
πρωταρχικοί στόχοι της εσωτερικής αντιλαμβανόμενης 
ποιότητας (ενότητα 2.2). Η αντιλαμβανόμενη ποιότητα συνήθως 
επικεντρώνεται στο επίπεδο της αποδοχής ελέγχου και  
επιτυγχάνεται με την εφαρμογή τεχνικών που βασίζονται στη διαίσθηση και την εμπειρία της μηχανικής λογισμικού 
(ενότητα 3.3) και με βάση τη χρήση και τα σφάλματα, όπως η δοκιμή μετάλλαξης (ενότητα 3.4).

D. Διασφάλιση ποιότητας: Εγκαταστάσεις επιδόσεων, 
ασφάλειας και προστασίας της ιδιωτικής ζωής και 
συμμόρφωση είναι μερικοί από τους κύριους στόχους της ποιότητας 
(ενότητα 2.2). Η πτυχή αυτή μπορεί να περιλαμβάνει 
όλα τα επίπεδα δοκιμών, και η επιλογή των δοκιμών
τεχνικής εξαρτάται από τον στόχο και το επίπεδο 
που επιλέγεται.

Εδώ, παρουσιάζονται ορισμένα παραδείγματα δοκιμών στο εσωτερικό των διαφόρων 
εφαρμογής των κινήσεων αριστερής μετατόπισης παρέχονται:
  * Στην ευέλικτη ανάπτυξη διαδικασιών, οι δραστηριότητες δοκιμών 
  περιλαμβάνουν όλα τα ενδιαφερόμενα μέρη (όπως οι πελάτες και το
  προσωπικό της ομάδας) και στοχεύουν στο να εντοπίσουν
  πού θα μπορούσαν να γίνουν βελτιώσεις σε μελλοντικές
  αλληλεπιδράσεις. Η διαχείριση του κινδύνου παλινδρόμησης 
  ελαττωμάτων, η ικανοποίηση μεταβαλλόμενων απαιτήσεων και 
  η διαχείριση των επιπτώσεών τους στα τεχνουργήματα δοκιμών είναι επίσης 
  στόχοι της ευέλικτης διαδικασίας δοκιμών. Συνήθως, 
  η αυτοματοποίηση των δοκιμών χρησιμοποιείται για τη διαχείριση της παλινδρόμησης 
  κινδύνου, και η διερευνητική δοκιμή μπορεί να χρησιμοποιηθεί για την 
  διαχείριση της έλλειψης λεπτομερών απαιτήσεων.
  * Στην ανάπτυξη οδηγούμενη από έλεγχο (TDD), οι περιπτώσεις δοκιμής στοχεύουν κυρίως στις  προδιαγραφές λογισμικού των απαιτήσεων και την αποδοχή, και 
  δημιουργούνται πριν από την εκπόνηση του κώδικα που
  γράφεται. Οι δοκιμές βασίζονται στις ιστορίες χρηστών και 
  υλοποιούνται με τη χρήση αυτοματοποιημένων δοκιμών συστατικών 
  εργαλεία. Πράγματι, η TDD είναι μια πρακτική που απαιτεί 
  τον ορισμό και τη διατήρηση δοκιμών μονάδας και μπορεί να βοηθήσει 
  στην αποσαφήνιση των αναγκών του χρήστη και των απαιτήσεων λογισμικού 
  προδιαγραφών.
  * Κατά τη δοκιμή αυτοματοποιημένων κατασκευών και συνεχών 
  ολοκλήρωσης (για παράδειγμα, DevOps), το SUT 
  αναπτύσσεται συνεχώς, ενσωματώνεται, παραδίδεται 
  και παρακολουθείται. Σε αυτή τη διαδικασία, οι δοκιμές παλινδρόμησης 
  εκτελούνται συνεχώς για τον έγκαιρο εντοπισμό και 
  για να διορθώνονται τα προβλήματα ανάπτυξης και ολοκλήρωσης. 
  Επιπλέον, χρησιμοποιούνται τεχνικές γρήγορης δοκιμής, όπως οι
  δοκιμές καπνού, που χρησιμοποιούνται συνήθως κατά τη διάρκεια 
  συνεχούς ολοκλήρωσης για να εξασφαλιστεί ότι το SUT 
  είναι ελέγξιμο πριν από την αποδέσμευσή του στο επιχειρησιακό 
  στάδιο.

### Δοκιμές στους τομείς εφαρμογών

Συνήθως, ένας τομέας εφαρμογής συνδέεται αυστηρά  
με μια συγκεκριμένη πραγματικότητα. Ως εκ τούτου, οι προσεγγίσεις δοκιμών θα μπορούσαν 
να προσαρμοστούν στις ανάγκες του τομέα και να προσαρμοστούν 
στις υιοθετούμενες τεχνολογίες.

Παρακάτω, παρέχουμε μια επισκόπηση των διαφόρων πτυχών 
και λύσεων για τη δοκιμή λογισμικού που εφαρμόζονται 
διάφορα περιβάλλοντα συγκεκριμένων τομέων:

  * Δοκιμές στον τομέα της αυτοκινητοβιομηχανίας: Λόγω της 
  πολυπλοκότητας των συστημάτων αυτοκινήτων, η δοκιμή αυτή 
  περιλαμβάνει τις πτυχές σχεδόν κάθε λογισμικού 
  και την αλληλεπίδρασή του με το υλικό. 
  Οι Δοκιμές ασφάλειας, οι δοκιμές προσομοίωσης, 
  οι δοκιμές αξιοπιστίας/κύκλου ζωής, η δοκιμή ολοκληρωμένων συστημάτων, οι δοκιμές απόκτησης δεδομένων και ανάλυσης σήματος, οι δοκιμές και η επιθεώρηση ποιότητας, 
  είναι μερικές μόνο από τις διάφορες
  δοκιμές που εκτελούνται σε αυτόν τον τομέα. Αρκετά 
  υποστηρικτικά πρότυπα είναι σήμερα διαθέσιμα για την
  καθοδήγηση και διαχείριση των δοκιμών αυτοκινήτων 
  ανάλογα με την ιδιαιτερότητα, το εξάρτημα ή την ποιότητα 
  που πρέπει να αξιολογηθεί. Τα Autosar
  και Automotive SPICE είναι παραδείγματα.

  * Δοκιμές τομέων του Διαδικτύου των Πραγμάτων (IoT): Αυτή η 
  δοκιμή περιλαμβάνει την ανάπτυξη εφαρμογών, συσκευών 
  διαχείρισης, διαχείριση συστήματος,  
  διαχείριση ετερογένειας, διαχείριση δεδομένων και εργαλεία για 
  ανάλυση, ανάπτυξη, παρακολούθηση, οπτικοποίηση 
  και έρευνα. Επιπλέον, η ασφάλεια, η ιδιωτικότητα, οι
  επικοινωνίες και η αλληλεπίδραση χρήστη/συστήματος 
  θα πρέπει να λαμβάνονται υπόψη στην αξιολόγηση της ποιότητας. 
  Για παράδειγμα, οι κατευθυντήριες γραμμές και οι ειδικές 
  δοκιμασίες συμμόρφωσης για την ασφάλεια στον κυβερνοχώρο 
  της αξιολόγησης του SUT IoT περιγράφονται λεπτομερώς στα
  Ευρωπαϊκά πρότυπα τηλεπικοινωνιών 
  Ινστιτούτου Τηλεπικοινωνιών (ETSI).
  * Δοκιμές νομικού τομέα: Μία από τις σημαντικότερες 
  πτυχές στον νομικό τομέα είναι η διαχείριση των 
  ιδιαίτερα ευαίσθητων χρηστών- ως εκ τούτου, η ασφάλεια, η ιδιωτικότητα 
  και η εμπιστοσύνη είναι οι πιο συνηθισμένοι τομείς εστίασης για 
  δοκιμές. Επιπλέον, λόγω των άφθονων δεδομένων 
  που συλλέγονται και ανταλλάσσονται, οι δοκιμές επιδόσεων 
  του αποθετηρίου δεδομένων, οι δοκιμές για την επίδειξη ακριβούς 
  επικοινωνίας και οι δοκιμές ολοκλήρωσης, καθώς και οι
  δοκιμές συνέπειας και συμμόρφωσης, θα πρέπει επίσης  
  να γίνουν. Τέλος, επειδή ο νομικός τομέας 
  χαρακτηρίζεται από συγκεκριμένη ονοματολογία και 
  ορολογία, η συμμετοχή εμπειρογνωμόνων του νομικού τομέα στη  
  δημιουργία περιπτώσεων δοκιμής είναι κοινή πρακτική για να διασφαλιστεί η
  εστίαση στα επιθυμητά χαρακτηριστικά και την ποιότητα.
  * Δοκιμές κινητού τομέα: Αυτή η δοκιμή είναι συνήθως για 
  χρηστικότητα, λειτουργικότητα, διαμόρφωση και 
  αξιολόγηση της συνέπειας. Ειδικές πτυχές για κινητά τηλέφωνα 
  όπως η ανάλυση οθόνης, ο παγκόσμιος εντοπισμός θέσης 
  (GPS), τα λειτουργικά συστήματα και η συσκευή 
  θα πρέπει επίσης να λαμβάνονται υπόψη κατά τη διάρκεια της
  δραστηριότητας δοκιμής. Τέλος, ο τύπος του κινητού 
  εφαρμογών (εγγενείς ή διαδικτυακές εφαρμογές) και οι 
  αλληλεπιδράσεις τους πρέπει να δοκιμαστούν. Για παράδειγμα, η 
  W3C Web and Mobile Interest Group παρέχει 
  διευκολύνσεις, κατευθυντήριες γραμμές και σύνολα δοκιμών ad hoc χρήσιμα
  για την ανάπτυξη και τη δοκιμή περιεχομένου που βασίζεται στον ιστό, 
  εφαρμογών και υπηρεσιών. 
  * Δοκιμές στον τομέα της αεροναυπηγικής: Συνήθως, τα αεροηλεκτρονικά 
  συστήματα περιλαμβάνουν πολλά ανεξάρτητα ή χαλαρά 
  συνδεδεμένα εξαρτήματα και εμπορικά προϊόντα του εμπορίου. Αυτά αναγκάζουν τις δοκιμές να περιλαμβάνουν 
  πολύ γενικές διαδικασίες και προσεγγίσεις που εφαρμόζονται 
  τόσο σε επίπεδο συστήματος όσο και σε επίπεδο διαδικασίας. 
  Λειτουργική και μη λειτουργική, ολοκλήρωση, 
  επικοινωνία, λειτουργική, καταπόνηση, και έλεγχος ασφάλειας 
  είναι παραδείγματα πιθανών δοκιμών 
  προσεγγίσεων. Όπως και σε άλλους τομείς, η υποστήριξη 
  προτύπων, όπως το Aeronautical Radio 
  Incorporated (ARINC) και ASTM
  F3153-15 μπορούν να χρησιμοποιηθούν για αναφορά.
  * Δοκιμές στον τομέα της υγειονομικής περίθαλψης: Ο τομέας υγειονομικής περίθαλψης 
  θα πρέπει να διασφαλίζει την ποιότητα σε τομείς όπως 
  ασφαλής και αξιόπιστη ανταλλαγή δεδομένων, σταθερή 
  απόδοση, προστασία της ιδιωτικής ζωής και ασφάλεια. 
  Διαλειτουργικότητα, χρηστικότητα, απόδοση και 
  συμμόρφωση με τους κανονισμούς του κλάδου, καθώς και 
  πρότυπα ασφάλειας και προστασίας (όπως το Health 
  Level Seven (HL7), το πρότυπο Fast Healthcare 
  Interoperability Resources (FHIR), η ηλεκτρονική 
  Απεικόνιση και επικοινωνίες στην ιατρική 
  (DICOM),το Health Insurance Portability and
  Accountability Act (HIPAA) και ο γενικός  
  Κανονισμός για την προστασία των δεδομένων (ΓΚΠΔ) θα 
  πρέπει επίσης να ληφθούν υπόψη.
  * Ενσωματωμένη δοκιμή τομέα: Επειδή το λογισμικό και το 
  υλικό είναι στενά συνδεδεμένα στα ενσωματωμένα 
  συστήματα, η δραστηριότητα δοκιμών θα πρέπει να αξιολογεί τα λειτουργικά 
  και μη λειτουργικά χαρακτηριστικά τόσο του λογισμικού όσο 
  και του υλικού.
  * Δοκιμές γραφικής διεπαφής χρήστη (GUI):  
  Η δοκιμή GUI περιλαμβάνει την αξιολόγηση του UI (User Interface) 
  (δηλαδή, τα στοιχεία των αντικειμένων του χρήστη που μπορούμε να 
  βλέπουμε). Έτσι, η δοκιμή GUI στοχεύει στο πρότυπο σχεδιασμού, τις
  εικόνες, την ευθυγράμμιση, την ορθογραφία και τη συνολική εμφάνιση 
  και την αίσθηση του UI. Οι προσεγγίσεις δοκιμών που βασίζονται σε 
  μηχανές πεπερασμένων καταστάσεων, προσεγγίσεις με γνώμονα τον στόχο, 
  προσεγγίσεις που βασίζονται σε αφαιρέσεις και προσεγγίσεις που βασίζονται σε μοντέλα μπορούν να εξεταστούν. 
  * Παιχνίδια: Οι εφαρμογές και το λογισμικό τυχερών παιχνιδιών είναι 
  επί του παρόντος ένας πολύ ενεργός τομέας του λογισμικού 
  παραγωγής, προκαλώντας αυξημένη ζήτηση για νέες 
  προσεγγίσεις και τρόπους διασφάλισης της ποιότητας και της 
  ασφάλειας. Μεταξύ των συγκεκριμένων τεχνικών δοκιμών,
  η δοκιμή παιχνιδιού είναι μία από τις πλέον υιοθετημένες. Σε αυτή την 
  περίπτωση, πραγματικοί παίκτες επαναλαμβάνουν μεθόδους ελέγχου ποιότητας 
  σε πολλά σημεία της εκτέλεσης ή του σχεδιασμού του παιχνιδιού 
  διαδικασίας. Δοκιμές GUI, δοκιμές λειτουργικότητας, 
  δοκιμές ασφαλείας, δοκιμές κονσόλας, δοκιμές συμμόρφωσης 
  δοκιμές συμμόρφωσης και δοκιμές επιδόσεων μπορούν επίσης να 
  εξεταστούν.
  * Δοκιμές τομέα σε πραγματικό χρόνο: Οι δοκιμές σε πραγματικό χρόνο 
  επικεντρώνονται συνήθως στην αξιολόγηση των χρονικών περιορισμών 
  και την ντετερμινιστική συμπεριφορά. Συνήθως, η μονάδα, οι
  προσεγγίσεις δοκιμών ολοκλήρωσης και συστήματος μπορούν να 
  υιοθετηθούν. Επικοινωνία, αλληλεπίδραση και 
  συμπεριφορά μπορούν επίσης να πραγματοποιηθούν.
  * Δοκιμές αρχιτεκτονικής προσανατολισμένης στις υπηρεσίες (SOA): 
  Αυτή η δοκιμή επικεντρώνεται κυρίως στη σωστή 
  εφαρμογή των επιχειρηματικών διαδικασιών και περιλαμβάνει 
  προσεγγίσεις δοκιμών μονάδας και ολοκλήρωσης. 
  Με βάση τη δομή, τις προδιαγραφές και την ασφάλεια 
  δοκιμές μπορούν να εφαρμοστούν. Η δραστηριότητα δοκιμών μπορεί να 
  ποικίλλει ανάλογα με το περιβάλλον, τον οργανισμό 
  και το σύνολο των απαιτήσεων που πρέπει να ικανοποιηθούν.
  * Δοκιμές οικονομικού τομέα: Αυτή η δοκιμή καλύπτει ένα 
  ευρύ φάσμα πτυχών, από τη διαχείριση των οικονομικών 
  απαιτήσεων έως την αξιολόγηση χρηματοοικονομικών εφαρμογών 
  και προγραμμάτων λογισμικού. Όπως και σε άλλους τομείς, 
  οι ειδικές γνώσεις για τον τομέα (όπως αυτές που κατέχουν, 
  για παράδειγμα, τράπεζες, πιστωτικές ενώσεις, ασφαλιστικές 
  εταιρείες, εταιρείες πιστωτικών καρτών, καταναλωτικές 
  χρηματοοικονομικές επιχειρήσεις, επενδυτικά κεφάλαια και μετοχές. 
  χρηματιστήρια) θα μπορούσε να είναι απαραίτητη για την εφαρμογή της 
  διαδικασίας δοκιμών αποτελεσματικά και αποδοτικά. 
  Ικανοποίηση πελατών, χρηστικότητα, ασφάλεια, 
  προστασία της ιδιωτικής ζωής, στοιχεία τρίτων μερών και 
  ενσωματώσεις εφαρμογών, ζητήματα πραγματικού χρόνου και επιδόσεις 
  είναι μερικές από τις σημαντικότερες προκλήσεις σε αυτό το 
  τομέα.

## **Δοκιμές των και δοκιμές μέσω αναδυόμενων τεχνολογιών **

Τις τελευταίες δεκαετίες, η ανάπτυξη λογισμικού οδηγήθηκε 
από αναδυόμενες τάσεις, όπως η ευρεία διάδοση 
της κινητής τεχνολογίας, η υιοθέτηση υποδομών νέφους, η
ανάλυση μεγάλων δεδομένων και το λογισμικό ως υπηρεσία 
παραδείγματα, που ανέδειξαν νέους περιορισμούς και 
προκλήσεις για τον έλεγχο.

### *Δοκιμές αναδυόμενων τεχνολογιών*

  *Δοκιμές τεχνητής νοημοσύνης (AI), ML/Deep 
  Learning (DL) [13]: Οι τεχνολογίεςAI, ML και DL είναι 
  εφαρμόζονται με επιτυχία στην πράξη. Σύντομα ή 
  αργότερα, οι περισσότερες επιχειρηματικές εφαρμογές θα έχουν κάποια 
  μορφή AI, ML ή DL. Λόγω των 
  ιδιαιτεροτήτων τους, η δοκιμή τέτοιων εφαρμογών είναι 
  πρόκληση και μπορεί να είναι πολύ δαπανηρή. Οι τεχνολογίες AI, ML
  ή DL αναφέρονται σε κάθε δραστηριότητα που έχει σχεδιαστεί για να  αποκαλύψει σφάλματα AI, ML ή DL. 
    * Τρεις κύριες πτυχές πρέπει να λαμβάνονται υπόψη κατά 
    τον ορισμό των σφαλμάτων και των δοκιμών σε αυτό το σενάριο: οι 
    απαιτούμενες συνθήκες (ορθότητα, ευρωστία, 
    ασφάλεια και ιδιωτικότητα)- τα AI, ML ή DL 
    στοιχεία (π.χ., ένα σφάλμα μπορεί να υπάρχει στα δεδομένα, το 
    πρόγραμμα εκμάθησης ή στο πλαίσιο που χρησιμοποιείται), 
    και τις εμπλεκόμενες δραστηριότητες δοκιμών (περίπτωση δοκιμής 
    παραγωγή, προσδιορισμός του δοκιμαστικού μαντείου και 
    και κριτήρια επάρκειας των περιπτώσεων δοκιμής).
    * Σε όλες αυτές τις εφαρμογές, ένα πρωτότυπο μοντέλο  
    πρώτα δημιουργείται με βάση ιστορικά δεδομένα. Στη συνέχεια, η
    δοκιμή εκτός γραμμής, όπως η διασταυρούμενη επικύρωση, είναι 
    για να επαληθευτεί ότι το παραγόμενο μοντέλο 
    ικανοποιεί τις απαιτούμενες συνθήκες. Συνήθως, 
    μετά την ανάπτυξη, το μοντέλο χρησιμοποιείται για 
    σκοπούς πρόβλεψης με τη δημιουργία νέων δεδομένων. 
    Τέλος, τα παραγόμενα δεδομένα αναλύονται 
    μέσω διαδικτυακών δοκιμών για την αξιολόγηση του τρόπου με τον οποίο το 
    μοντέλο αλληλεπιδρά με τις συμπεριφορές των χρηστών.
  * Δοκιμές blockchain [15]: Οι ευρέως χρησιμοποιούμενες 
  τεχνικές δοκιμών για την επικύρωση αλυσίδων blockchains και 
  σχετικές εφαρμογές, όπως οι έξυπνες συμβάσεις, είναι 
  ο έλεγχος καταπόνησης, ο έλεγχος διείσδυσης και ο έλεγχος ιδιοκτησίας. Ωστόσο, ανάλογα με τη συγκεκριμένη 
  κατάσταση, θα πρέπει να λαμβάνονται υπόψη διαφορετικές πτυχές 
  κατά τη διάρκεια της δοκιμής ενός SUT που βασίζεται σε blockchain, 
  όπως οι ακόλουθες:
  * Τύπος πλατφόρμας: Το επίπεδο επικύρωσης εξαρτάται από 
  τον τύπο της πλατφόρμας που χρησιμοποιείται για την υλοποίηση -
  δημόσια ή ιδιωτική. Η τελευταία απαιτεί μια πολύ 
  μεγαλύτερη προσπάθεια δοκιμών.
  * Σύνδεση με άλλες εφαρμογές: Οι έλεγχοι ενσωμάτωσης
  θα πρέπει να εκτελούνται για τον έλεγχο της συνέπειας 
  όταν η αλυσίδα blockchain λειτουργεί με διάφορες 
  εφαρμογές.
  * Απόδοση: Οι δοκιμές επιδόσεων θα πρέπει 
  να διεξάγεται όταν τα ζητήματα επιδόσεων αποτελούν
  ανησυχία. Συγκεκριμένες στρατηγικές για τον χειρισμό πολλών 
  συναλλαγών θα πρέπει να σχεδιαστούν για να εγγυηθούν ένα
  ικανοποιητικό επίπεδο επιδόσεων. Ποιοτικές και 
  ποσοτικές μετρήσεις, όπως η
  λανθάνουσα κατάσταση επικύρωσης και η ασφάλεια του μέσου όρου συναλλαγών, θα πρέπει επίσης να λαμβάνονται υπόψη.
  * Δοκιμές στο νέφος : Οι δοκιμές 
  του νέφους επικυρώνουν την ποιότητα των εφαρμογών και 
  υποδομών που αναπτύσσονται στο νέφος 
  λαμβάνοντας υπόψη τόσο τις λειτουργικές όσο και τις μη λειτουργικές 
  ιδιότητες. Στο επίκεντρο βρίσκεται ο εντοπισμός προβλημάτων 
  που δημιουργούνται από τα συστήματα που βρίσκονται στο νέφος. 
  Ως εκ τούτου, οι δραστηριότητες δοκιμών χρησιμοποιούν τεχνικές για να
  επικυρώνουν τις επιδόσεις των υπηρεσιών που βασίζονται στο νέφος, την
  επεκτασιμότητα, την ελαστικότητα και την ασφάλεια. Επιπλέον, 
  οι δοκιμές θα πρέπει επίσης να επικεντρώνονται στη συμβατότητα και
  την διαλειτουργικότητα μεταξύ ετερογενών υπηρεσιών νέφους 
  πόρων όταν υπάρχουν διαφορετικά μοντέλα ανάπτυξης που
  χρησιμοποιούνται (π.χ. ιδιωτικά, δημόσια ή υβριδικά).
  * Δοκιμές ταυτόχρονων και κατανεμημένων εφαρμογών : Μια βασική πτυχή της δοκιμής 
  δυναμικών, πολύπλοκων, κατανεμημένων ή ταυτόχρονων 
  εφαρμογών είναι η αντιμετώπιση πολλαπλών λειτουργικών 
  συστημάτων και ενημερώσεων, οι πολλαπλές πλατφόρμες περιήγησης 
  και εκδόσεων, οι διαφορετικοί τύποι υλικού και οι
  πολλοί χρήστες. Για τέτοιου είδους δοκιμές, είναι δύσκολο να χρησιμοποιηθούν 
  προσεγγίσεις δοκιμών που βασίζονται στην κλασική 
  ιεραρχία μεταξύ στοιχείων ή συστημάτων, 
  αντ' αυτού, λύσεις που βασίζονται στην είσοδο/έξοδο, 
  στα νήματα εξάρτησης, ή στις δυναμικές σχέσεις συχνά 
  λειτουργούν καλύτερα. Επιπλέον, η δυνατότητα 
  συνεχούς ολοκλήρωσης και ανάπτυξης του 
  διαφόρων στοιχείων αναγκάζει τη διαδικασία δοκιμών  
  να περιλαμβάνει προσεγγίσεις για τη διαχείριση της 
  λειτουργίας συνεχούς δοκιμής , την έγχυση, την παρακολούθηση και την υποβολή εκθέσεων 
  ανάλογα με το χρόνο, τη χρήση του εύρους ζώνης, 
  και τους περιορισμούς προσαρμοστικότητας. Τέλος, 
  εξακολουθεί να υπάρχει η ανάγκη για λύσεις που επιτρέπουν την 
  επαναχρησιμοποίηση των γνώσεων και των αρχιτεκτονικών δοκιμών, 
  και του κώδικα για να γίνει η δραστηριότητα των δοκιμών πιο 
  αποτελεσματική και λιγότερο δαπανηρή.

### *Δοκιμές μέσω αναδυόμενων τεχνολογιών*

* Δοκιμές μέσω ML [13]: Οι ML ή DL 
τεχνικές χρησιμοποιούνται με επιτυχία για τη μείωση της 
 προσπάθειας που απαιτείται σε διάφορες δραστηριότητες στο λογισμικό 
(όπως η εξαγωγή συμπεριφοράς, η δοκιμή 
ή διόρθωση σφαλμάτων). Οι τεχνικές αυτές βοηθούν τόσο τους
ερευνητές όσο και τους επαγγελματίες στην υιοθέτηση και 
τον προσδιορισμό των κατάλληλων μεθόδων για τις επιθυμητές 
εφαρμογές τους. Υπάρχει αυξανόμενο ενδιαφέρον για 
την υιοθέτηση τεχνικών ML στον έλεγχο λογισμικού 
επειδή τα περισσότερα θέματα ελέγχου λογισμικού 
διατυπώνονται ως προβλήματα εκμάθησης ML. Πράγματι, η τεχνητή νοημοσύνη (AI), η μηχανική μάθηση (ML) ή η βαθιά μάθηση (DL) χρησιμοποιείται εντατικά σε όλα σχεδόν τα 
λογισμικά, όπως ο σχεδιασμός περιπτώσεων δοκιμής, το
πρόβλημα μαντείου (oracle), η αξιολόγηση περιπτώσεων δοκιμής, η 
ιεράρχηση και βελτίωση περιπτώσεων δοκιμής , και η μετάλλαξη
αυτοματοποίησης δοκιμών. Πράγματι, μπορούν να μειώσουν τις
προσπάθειες συντήρησης και να βελτιώσουν τη συνολική  
ποιότητα του SUT λόγω της ικανότητάς τους να αναλύουν μεγάλο 
όγκο δεδομένων για ταξινόμηση και 
ιεράρχηση των σφαλμάτων πιο αποτελεσματικά. Από μία
DevOps προοπτική, οι λύσεις AI, ML και DL 
μπορούν να χρησιμοποιηθούν στη συγγραφή αυτοματισμών SUT και στις
φάσεις εκτέλεσης των περιπτώσεων δοκιμών, καθώς και στην 
ανάλυση δοκιμών μετά την εκτέλεση που εντοπίζει τις τάσεις, 
τα μοτίβα και τον αντίκτυπο στη δραστηριότητα δοκιμών SUT.
* Δοκιμές μέσω blockchain [15]: Ο έλεγχος
περιπλέκεται όταν διαφορετικές ομάδες, 
εμπειρογνώμονες του τομέα και χρήστες πρέπει να συνεργαστούν 
σε μεγάλης κλίμακας συστήματα και σε πολύπλοκα 
συστήματα λογισμικού για την επίτευξη ενός κοινού στόχου. Αυτό 
οφείλεται κυρίως στον περιορισμό του χρόνου, των δεδομένων 
πολιτικών κοινής χρήσης, των κριτηρίων αποδοχής και τον αξιόπιστο 
συντονισμό μεταξύ των ομάδων που συμμετέχουν στη 
διαδικασία δοκιμών. Οι τεχνολογίες blockchain μπορούν να 
αξιοποιηθούν για τη βελτίωση της αποτελεσματικότητας των δοκιμών λογισμικού 
και να αποφευχθεί η χρήση κεντρικής αρχής για τη διαχείριση 
διαφορετικών δραστηριοτήτων δοκιμών. Αυτό μπορεί να συμβάλει στη διασφάλιση 
της κατανεμημένης διαχείρισης δεδομένων, της ανθεκτικότητας στην αλλοίωση, της 
δυνατότητας ελέγχου και στην αυτόματη απαίτηση 
συμμόρφωσης για τη βελτίωση της ποιότητας του λογισμικού 
δοκιμών και της ανάπτυξης. Οι 
προσεγγίσεις βασισμένες στο blockchain για την διαχείριση αξιόπιστων περιπτώσεων δοκιμών  και για την υποστήριξη λογισμικού βασισμένου σε δοκιμές 
και δοκιμές ασφάλειας εξετάζονται επίσης.
* Δοκιμές μέσω του υπολογιστικού νέφους [17]: Η δοκιμή μέσω του νέφους
αναφέρεται σε δοκιμές SUT που εκτελούνται 
αξιοποιώντας κλιμακούμενες τεχνολογίες νέφους. Συνήθως, 
το υπολογιστικό νέφος χρησιμοποιείται για σκοπούς δοκιμών οπουδήποτε 
προσομοιώσεις μεγάλης κλίμακας και ελαστικοί πόροι είναι 
απαραίτητοι. Πράγματι, αυτό μπορεί να επηρεάσει τη μείωση του κόστους, 
την ανάπτυξη και τη συντήρηση των δοκιμών 
υποδομής (ικριώματα) και την ηλεκτρονική επικύρωση 
των συστημάτων, όπως το SUT με βάση το ML. Μια συγκεκριμένη 
κατάσταση είναι η δοκιμή του νέφους  μέσω του ίδιου του νέφους. Αυτό είναι ένα παράδειγμα της διασταύρωσης 
μεταξύ της δοκιμής του και της δοκιμής μέσω των αναδυόμενων 
τεχνολογιών. Οι εφαρμογές και οι 
υποδομές που αναπτύσσονται στο νέφος μπορούν να 
δοκιμαστούν, αξιοποιώντας το εύρος ζώνης του νέφους.
* Δοκιμές μέσω προσομοίωσης: 
Η προσομοίωση είναι μια σημαντική τεχνολογία για τη
δραστηριότητα ελέγχου επειδή αποτελεί ένα έγκυρο μέσο για 
την αξιολόγηση της εκτέλεσης του SUT υπό κρίσιμες 
καταστάσεις ή καταστροφές ή την αξιολόγηση συγκεκριμένων 
συμπεριφορών ή δραστηριοτήτων ανάκτησης. Η 
πολυπλοκότητα της προσέγγισης δοκιμών μπορεί να ποικίλλει 
ανάλογα με την πολυπλοκότητα της προσομοίωσης 
συστήματος και μπορεί να περιλαμβάνει κλειστού βρόγχου:
αξιολόγηση των συσκευών, των επικοινωνιών, 
και της διασύνδεσης και χρήση δεδομένων πραγματικού χρόνου (π.χ, 
τάση, ρεύμα και κατάσταση διακοπτών). Ο έλεγχος προσομοίωσης μπορεί να εφαρμοστεί σε κάθε επίπεδο ανάπτυξης 
και μπορεί να περιλαμβάνει μαθηματικές, τυπικές 
αναπαραστάσεις του πραγματικού συστήματος, περιβάλλοντος, 
συνθήκες δικτύου και συσκευές ελέγχου. 
Η δοκιμή προσομοίωσης υιοθετείται σήμερα σε πολλούς 
τομείς εφαρμογών. Ειδικά στον 
τομέα της αυτοκινητοβιομηχανίας και των ενσωματωμένων συστημάτων, 
μεταξύ των διαφόρων προτάσεων, μία από τις αναδυόμενες λύσεις 
για τη δοκιμή προσομοίωσης είναι το hardware-in-the-loop 
(HIL). Στην περίπτωση αυτή, τα πραγματικά σήματα 
αποστέλλονται στο SUT για την προσομοίωση της πραγματικότητας και τη δοκιμή και 
σχεδιασμό της επανάληψης εκτελούνται συνεχώς 
ενώ χρησιμοποιείται το σύστημα του πραγματικού κόσμου.
* Δοκιμές μέσω crowdsourcing [16]: 
Η δοκιμή με τη βοήθεια πλήθους (επίσης γνωστή ως 
crowdtesting) είναι μια αναδυόμενη προσέγγιση για 
τη συμμετοχή χρηστών και εμπειρογνωμόνων στη δραστηριότητα της δοκιμής. 
Έτσι, οι χρήσεις crowdsourcing αντιπροσωπεύουν το 
διασκορπισμένο, προσωρινό εργατικό δυναμικό πολλαπλών 
μεμονωμένων δοκιμαστών. Η δοκιμή μέσω 
crowdsourcing χρησιμοποιείται κυρίως για τη δοκιμή κινητών 
εφαρμογών, επειδή διασφαλίζει την τεχνολογική
ποικιλομορφία και πελατοκεντρική επικύρωση. 
Ωστόσο, η δοκιμή πλήθους δεν υποκαθιστά την εσωτερική επικύρωση SUT. Αποτελεί ένα έγκυρο μέσο 
για τον εντοπισμό αποτυχιών και ζητημάτων, διότι 
εμπλέκει πολλά άτομα (δοκιμαστές) σε διαφορετικές 
τοποθεσίες, οι οποίοι χρησιμοποιούν διαφορετικές τεχνολογίες σε 
διαφορετικές συνθήκες και οι οποίοι έχουν διαφορετικές δεξιότητες 
και γνώσεις.

## **Εργαλεία δοκιμής λογισμικού**

Αρκετά εργαλεία δοκιμών εστιάζουν στις ιδιαιτερότητες του SUT 
και τις ανάγκες του. Αυτή η ενότητα περιγράφει τα κύρια ζητήματα και τις
προκλήσεις σχετικά με τα εργαλεία δοκιμών και παρέχει μια 
επισκόπηση των επί του παρόντος αναγνωρισμένων κατηγοριών τους.

### *Υποστήριξη και επιλογή εργαλείων δοκιμής*

Η δοκιμή περιλαμβάνει πολλές εργασίες έντασης εργασίας, δεδομένου ότι 
περιλαμβάνει την εκτέλεση πολυάριθμων εκτελέσεων προγραμμάτων και 
το χειρισμό σημαντικού όγκου πληροφοριών. 
Τα κατάλληλα εργαλεία μπορούν να ανακουφίσουν το βάρος των κουραστικών 
γραφειοκρατικών εργασιών και να τις καταστήσουν λιγότερο επιρρεπείς σε σφάλματα. 
Τα εξελιγμένα εργαλεία μπορούν να υποστηρίξουν το σχεδιασμό δοκιμών και την
δημιουργία δοκιμών, καθιστώντας τις πιο αποτελεσματικές.

Η καθοδήγηση προς τους διαχειριστές και τους ελεγκτές για την επιλογή δοκιμών 
εργαλείων που θα είναι πιο χρήσιμα για τον οργανισμό τους και τις
διαδικασίες είναι ένα σημαντικό θέμα, καθώς η επιλογή εργαλείων σε μεγάλο βαθμό 
επηρεάζει την αποδοτικότητα και την αποτελεσματικότητα των δοκιμών. Η 
επιλογή εργαλείου εξαρτάται από διάφορους παράγοντες, όπως οι
επιλογές ανάπτυξης, οι στόχοι αξιολόγησης και οι
εγκαταστάσεις εκτέλεσης. Σε γενικές γραμμές, μπορεί να μην υπάρχει 
μοναδικό εργαλείο για την ικανοποίηση συγκεκριμένων αναγκών, οπότε μια σειρά από 
επιλεγμένα εργαλεία θα μπορούσε να είναι κατάλληλη.

### *Κατηγορίες εργαλείων* 

Διάφορες ταξινομήσεις των εργαλείων δοκιμών περιγράφουν κυρίως 
τις λειτουργικότητές τους, όπως οι ακόλουθες:

  * *Οι δομές δοκιμών* (οδηγοί, stubs) παρέχουν 
  ένα ελεγχόμενο περιβάλλον στο οποίο οι δοκιμές  
  και τα αποτελέσματα των δοκιμών μπορούν να καταγραφούν. 
  Οι οδηγοί και τα stubs παρέχονται για την εκτέλεση τμημάτων 
  ενός SUT για την προσομοίωση των καλούμενων και καλεσμένων ενοτήτων.
  * *Οι γεννήτριες δοκιμών* βοηθούν στη δημιουργία 
  περιπτώσεων δοκιμών. Αυτή η παραγωγή μπορεί να είναι τυχαία, βασισμένη σε διαδρομές, βασισμένη σε μοντέλα ή ένας συνδυασμός αυτών.
  *Τα εργαλεία αυτόματης σύλληψης/επανάληψης*. 
  επανεκτελούν ή αναπαράγουν δοκιμές που έχουν εκτελεστεί προηγουμένως. 
  που έχουν καταγεγραμμένες εισόδους και εξόδους (π.χ, 
  οθόνες).
  * *Τα εργαλεία σύγκρισης Oracle/αρχείου/ελέγχου ισχυρισμών* βοηθούν στην απόφαση εάν μια δοκιμή
  * *Οι αναλυτές κάλυψης και τα όργανα*
  συνεργάζονται μεταξύ τους. Οι αναλυτές κάλυψης αξιολογούν ποια 
  και πόσες οντότητες του γραφήματος ροής του προγράμματος 
  έχουν ασκηθεί μεταξύ όλων εκείνων που απαιτούνται από 
  το επιλεγμένο κριτήριο κάλυψης δοκιμής. Η ανάλυση 
  μπορεί να γίνει μέσω οργάνων SUT που 
  εισάγουν ανιχνευτές καταγραφής στον κώδικα. 
  * *Τα ανιχνευτικά μηχανήματα* καταγράφουν το ιστορικό ενός 
  των διαδρομών εκτέλεσης του προγράμματος.
  *Τα *εργαλεία δοκιμών παλινδρόμησης* υποστηρίζουν την 
  επανεκτέλεση μιας σουίτας δοκιμών μετά από ένα τμήμα του 
  λογισμικού που έχει τροποποιηθεί. Μπορούν επίσης να βοηθήσουν 
  στην επιλογή ενός υποσυνόλου δοκιμών ανάλογα με την αλλαγή που έχει γίνει.
  *Τα εργαλεία αξιολόγησης αξιοπιστίας* υποστηρίζουν την
  ανάλυση ελέγχου των αποτελεσμάτων και την γραφική απεικόνιση για 
  αξιολόγηση των μέτρων που σχετίζονται με την αξιοπιστία σύμφωνα με 
  επιλεγμένα μοντέλα.
  *Τα εργαλεία με βάση την έγχυση* εστιάζουν στην εισαγωγή ή την αναπαραγωγή συγκεκριμένων προβλημάτων ώστε 
  να επιβεβαιωθεί ότι το SUT συμπεριφέρεται καταλλήλως κάτω από την 
  αντίστοιχη κατάσταση. Αυτό μπορεί να περιλαμβάνει 
  τη διαχείριση κάποιας εισόδου ή την ενεργοποίηση γεγονότων. 
  Συνήθως, υπάρχουν δύο κατηγορίες εργαλείων που βασίζονται στην έγχυση: η έγχυση επιθέσεων και η έγχυση σφαλμάτων.
  * *Τα εργαλεία που βασίζονται στην προσομοίωση* επαληθεύουν και 
  επικυρώνουν επιλεγμένες ιδιότητες. Συνήθως, εκμεταλλεύονται 
  συγκεκριμένα μοντέλα για να καταστεί δυνατή η αυτοματοποιημένη 
  εκτέλεση σεναρίων για να αξιολογηθεί κατά πόσον το SUT 
  λειτουργεί όπως αναμενόταν ή για να προβλέψουν πώς το SUT 
  θα ανταποκριθεί σε καθορισμένες εισόδους. Τυπικά 
  εργαλεία που βασίζονται στην προσομοίωση ταξινομούνται σε εργαλεία για 
  εργαλεία επαλήθευσης, εργαλεία για συνεργασία, εργαλεία για 
  βελτιστοποίησης, εργαλεία για τη δοκιμή αυτοματοποιημένων συστημάτων 
  και εργαλεία για την αξιολόγηση εννοιών λογισμικού. 
  * *Τα εργαλεία δοκιμών ασφαλείας* εστιάζουν σε 
  συγκεκριμένα τρωτά σημεία ασφαλείας. Μεταξύ αυτών είναι 
  εργαλεία για έγχυση επιθέσεων, δοκιμές διείσδυσης και 
  ασαφείς δοκιμές.
  * *Τα εργαλεία διαχείρισης δοκιμών* περιλαμβάνουν όλα τα 
  τα υποστηρικτικά εργαλεία που εξασφαλίζουν αποτελεσματική και 
  αποτελεσματική διαχείριση δοκιμών και συλλογή δεδομένων.
  *Τα εργαλεία δοκιμών cross-browser* επιτρέπουν στον 
  δοκιμαστή να κατασκευάζει και να εκτελεί γρήγορα 
  περιπτώσεις χρήστη δοκιμών διεπαφής  σε υπολογιστές, κινητά και διαδικτυακές
  εφαρμογές για να ελέγξει αν το SUT φαίνεται και 
  λειτουργεί όπως αναμένεται σε κάθε συσκευή και πρόγραμμα περιήγησης.
  * *Τα εργαλεία δοκιμών φόρτωσης* συλλέγουν πολύτιμα δεδομένα 
  και αποδεικτικά στοιχεία για την αξιολόγηση των επιδόσεων του SUT.
  * *Τα εργαλεία εντοπισμού ελαττωμάτων* βοηθούν στην παρακολούθηση των 
  εντοπισμένων σφαλμάτων κατά τη διάρκεια της ανάπτυξης του SUT. Τα εργαλεία αυτά συμπεριφέρονται ως συστήματα εντοπισμού 
  και συνήθως επιτρέπουν στους τελικούς χρήστες να εισάγουν αναφορές σφαλμάτων 
  άμεσα.
  *Τα *εργαλεία δοκιμών κινητής τηλεφωνίας* υποστηρίζουν την 
  υλοποίηση και δοκιμή εφαρμογών για κινητά τηλέφωνα 
  επιτρέποντας αρκετές επαναλαμβανόμενες δοκιμές UI κατά τη διάρκεια της 
  της πλατφόρμας της εφαρμογής, την ανάπτυξη σε πραγματικές κινητές 
  συσκευές ή εξομοιωτές, δοκιμή των εφαρμογών κινητής τηλεφωνίας 
  σε υλοποιήσεις πραγματικού χρόνου και τη συλλογή 
  δεδομένων για συγκεκριμένα μέτρα διασφάλισης ποιότητας.
  *Τα *εργαλεία δοκιμών API* ελέγχουν κατά πόσον
  οι εφαρμογές πληρούν τη λειτουργικότητα, τις επιδόσεις, την
  αξιοπιστία και τις προσδοκίες ασφάλειας σε όλη τη διάρκεια αυτοματοποίησης συγκεκριμένων δοκιμών API.
  *Εργαλεία επικύρωσης CSS* επικυρώνουν τα Cascading 
  Style Sheets (CSS) και ανακαλύπτουν σφάλματα, 
  ζητήματα και προειδοποιήσεις που μπορούν να διορθωθούν. Το CSS 
  Validation Service, που παρέχεται δωρεάν από το W3C, είναι 
  ένας από τους πιο συχνά χρησιμοποιούμενους επικυρωτές στην πράξη που 
  βοηθά τόσο τους σχεδιαστές όσο και τους προγραμματιστές ιστοσελίδων 
  να ελέγχουν τα CSS.
  * *Τα εργαλεία ελέγχου εφαρμογών ιστού*, επίσης 
  αναφέρονται ως εργαλεία ελέγχου ιστού, υποστηρίζουν 
  την επικύρωση της λειτουργικότητας και της απόδοσης 
  των SUT που βασίζονται στον ιστό πριν από την ανάπτυξή τους στην 
  παραγωγή. Τα εργαλεία αυτά παρέχουν σχετικές πληροφορίες 
  και δεδομένα για διάφορα ενδιαφερόμενα μέρη, όπως 
  προγραμματιστές, διακομιστές και υποδομές 
  διαχειριστές. Από την οπτική γωνία του DevOps, 
  αυτά τα εργαλεία αντιμετωπίζουν ζητήματα ή σφάλματα πριν τα SUTs να
  είναι διαθέσιμα στους τελικούς χρήστες.
