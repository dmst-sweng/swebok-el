# Ασφάλεια λογισμικού {#softsec}


## Ακρωνύμια

|CC  |Common Criteria              |
|SDLC|Secure development life cycle|

## Εισαγωγή

Η ασφάλεια έχει εξελιχθεί σε καθοριστικό παράγοντα στην ανάπτυξη λογισμικού εξαιτίας της διαρκώς αυξανόμενης κακόβουλης δραστηριότητας, 
η οποία στοχοποιεί τα υπολογιστικά συστήματα. Επιπλέον των συνήθων ζητημάτων  ορθότητας και αξιοπιστίας, οι προγραμματιστές
οφείλουν να επιδεικνύουν ιδιαίτερη προσοχή στην ασφάλεια του λογισμικού, το οποίο αναπτύσσουν. 
Η ασφαλής διαδικασία ανάπτυξης λογισμικού επιτυγχάνει την ασφάλεια μέσω της εφαρμογής ενός συνόλου καθιερωμένων ή/και προτεινόμενων κανόνων και πρακτικών.
Στο ίδιο πλαίσιο, η ασφαλής διαδικασία συντήρησης λογισμικού συμπληρώνει την ασφαλή ανάπτυξη, εξασφαλίζοντας την αποφυγή εισαγωγής ζητημάτων ασφαλείας 
κατά την διάρκεια της διαδικασίας συντήρησης.

## Κατανομή των θεμάτων για το γνωστικό πεδίο ασφάλειας λογισμικού

{id="fig-softsec-tree"}
![Σχήμα 13.1 Κατανομή των θεμάτων στο γνωστικό πεδίο ασφάλειας λογισμικού.](images/13-SoftSec.png)

Η κατανομή των θεμάτων για το γνωστικό πεδίο ασφάλειας λογισμικού
απεικονίζεται στο [Σχήμα 13.1](#fig-softsec-tree).

## **Βασικές αρχές ασφάλειας λογισμικού**

Γενικά αποδεκτή ιδέα αναφορικά με την ασφάλεια λογισμικού συνιστά η αντίληψη ότι είναι συγκριτικά αποτελεσματικότερη η εξαρχής σχεδίαση της ασφάλειας
στο λογισμικό από ό,τι η ενσωμάτωση αυτής κατόπιν της ανάπτυξης του λογισμικού. Για την σχεδίαση της ασφάλειας στο λογισμικό κρίνεται απαραίτητο 
να ληφθεί υπόψη καθένα από τα στάδια του κύκλου ζωής ανάπτυξης. Η ασφαλής ανάπτυξη λογισμικού περιλαμβάνει την ασφάλεια των απαιτήσεων,
του σχεδιασμού, της κατασκευής και του ελέγχου λογισμικού. Επιπλέον, το θέμα της ασφάλειας πρέπει να ληφθεί υπόψη και κατά την διάρκεια της συντήρησης
του λογισμικού, καθώς είναι πιθανή σε αυτό το στάδιο και συχνά συμβαίνει, η δημιουργία προβλημάτων ασφαλείας και περιπτώσεων ευπάθειας.

### *Ασφάλεια λογισμικού*

Η *ασφάλεια* συνιστά χαρακτηριστικό ποιότητας ενός προϊόντος, εκφράζοντας τον βαθμό στον οποίο ένα προϊόν ή σύστημα προστατεύει πληροφορίες 
και δεδομένα έτσι ώστε άτομα, άλλα συστήματα ή προϊόντα να έχουν πρόσβαση σε αυτά, ανάλογη των τύπων και του επιπέδου εξουσιοδότησής τους [10] 
(Για περισσότερες πληροφορίες για την ποιότητα προϊόντος, βλ. γνωστικό πεδίο Ποιότητας λογισμικού).

### *Ασφάλεια πληροφοριών*

Η *ασφάλεια πληροφοριών* διαφυλάσσει την εμπιστευτικότητα, ακεραιότητα και διαθεσιμότητα των πληροφοριών. 
Άλλα στοιχεία, όπως η αυθεντικότητα, υπευθυνότητα, μη-απόρριψη και αξιοπιστία ενδέχεται επίσης να εμπλέκονται [11].
Η *εμπιστευτικότητα* συνιστά την ιδιότητα εξασφάλισης μη αποκάλυψης των πληροφοριών σε μη εξουσιοδοτημένα άτομα, οντότητες ή διαδικασίες.
Η *ακεραιότητα* ορίζεται ως η ιδιότητα ακρίβειας και πληρότητας. Τέλος, η *διαθεσιμότητα* αποτελεί το στοιχείο της προσβασιμότητας και ικανότητας χρήσης,
όποτε ζητηθεί, από εξουσιοδοτημένη οντότητα. Οι προγραμματιστές λογισμικού πρέπει να ορίζουν τις ιδιότητες ασφαλείας του λογισμικού τους και
να τις συντηρούν καθόλη την διάρκεια της διαδικασίας ανάπτυξης. 

### *Κυβερνοασφάλεια*

Η κυβερνοασφάλεια σχετίζεται με θέματα ασφάλειας στον κυβερνοχώρο, συμπεριλαμβανομένων των παρακάτω:

    *Επιθέσεις κοινωνικής μηχανικής
    *Ηλεκτρονική πειρατεία (Hacking)
    *Διάδοση κακόβουλου λογισμικού (malware)
    *Λογισμικό κατασκοπείας (Spyware)
    *Άλλο δυνητικά ανεπιθύμητο λογισμικό [12]

Οι προγραμματιστές λογισμικού οφείλουν να θεωρούν την μετρίαση τέτοιων κινδύνων ως μέρος της διαδικασίας ανάπτυξης λογισμικού. 

## **Διαχείριση και οργάνωση της ασφάλειας**

Η διαχείριση της ασφάλειας κρίνεται αποτελεσματικότερη όταν πραγματοποιείται συστηματικά, με άλλα λόγια, όταν είναι ενσωματωμένη στην οργανωσιακή κουλτούρα,
σε συμπεριφορές και δράσεις. Οι υπεύθυνοι έργου χρειάζεται να αναδείξουν την ασφάλεια λογισμικού από ξεχωριστό τεχνικό ζήτημα σε θέμα που αφορά ολόκληρη
την επιχείρηση [1]. 

### *Μοντέλο ωριμότητας ικανότητας*

Πολλοί οργανισμοί εφαρμόζουν μηχανική ασφάλειας κατά τη διάρκεια της ανάπτυξης προγραμμάτων υπολογιστών, συμπεριλαμβανομένων των λειτουργικών συστημάτων,
λειτουργιών που διαχειρίζονται και εφαρμόζουν την ασφάλεια, πακέτων προϊόντων λογισμικού, ενδιάμεσου λογισμικού και εφαρμογών. Ως αποτέλεσμα, 
ένα ευρύ πλήθος ατόμων, συμπεριλαμβανομένων  σχεδιαστών προϊόντων, παρόχων υπηρεσιών, ολοκληρωτών και διαχειριστών συστημάτων και ειδικών σε θέματα ασφαλείας,
πρέπει  να γνωρίζουν πώς να εφαρμόζουν τις κατάλληλες μεθόδους και πρακτικές ασφάλειας. Η μηχανική ασφάλειας συστημάτων και πιο συγκεκριμένα το 
μοντέλο ωριμότητας ικανότητας (SSE-CMM), το οποίο συμβάλλει στην μέτρηση της ικανότητας επεξεργασίας ενός οργανισμού που εκτελεί εκτιμήσεις κινδύνου [14],
μπορεί να θεωρηθεί πολύτιμο εργαλείο.

### *Συστήματα διαχείρισης ασφάλειας πληροφοριών*

Ο Διεθνής Οργανισμός Τυποποίησης/Η Διεθνής Ηλεκτροτεχνική Επιτροπή (ISO/IEC) 27001:2013 ορίζει τις απαιτήσεις δημιουργίας, εφαρμογής,
συντήρησης και συνεχούς βελτίωσης ενός συστήματος διαχείρισης της ασφάλειας λογισμικού (ISMS) εντός του οργανωσιακού πλαισίου [15]. 
Λογισμικό το οποίο αποτελεί μέρος ISMS εντός ενός οργανισμού, είναι συμβατό με την πολιτική ασφάλειας. Με άλλα λόγια, μέρος των ιδιοτήτων της
ασφάλειας λογισμικού προέρχεται από την πολιτική για τα ISMS.

### *Ευέλικτη μεθοδολογία στην ασφάλεια λογισμικού*

Οι Ευέλικτες ομάδες (Agile teams) οφείλουν να κατανοούν και να υιοθετούν κατάλληλες πρακτικές και να αναλαμβάνουν μεγαλύτερη ευθύνη για την ασφάλεια
των συστημάτων τους. Οι ειδικοί σε θέματα ασφάλειας οφείλουν να μάθουν να αποδέχονται την αλλαγή, να εργάζονται ταχύτερα και να σκέφτονται τους
κινδύνους ασφάλειας, όπως και τους τρόπους διαχείρισής τους σταδιακά. Τελευταίο και πιο σημαντικό, η ασφάλεια χρειάζεται να μετατραπεί σε υποκινητή
αντί για παρεμποδιστή. Τα κλειδιά για ένα επιτυχημένο Ευέλικτο πρόγραμμα ασφάλειας είναι η συμμετοχή της ομάδας ασφαλείας και των προγραμματιστών, 
η ενεργοποίηση (enablement), ο αυτοματισμός (automation) και η ευελιξία (agility), ώστε να υπάρχει παράλληλη δράση με την Ευέλικτη ομάδα [4].

## **Μηχανική ασφάλειας λογισμικού και διαδικασιών**

### *Μηχανική ασφάλειας και ασφαλής κύκλος ζωής ανάπτυξης (SDLC)* 

Το λογισμικό θεωρείται τόσο ασφαλές, όσο και η διαδικασία ανάπτυξής του. Η ασφάλεια πρέπει να ενσωματωθεί στη μηχανική λογισμικού ώστε να εξασφαλιστεί
η ύπαρξή της στο λογισμικό. Η έννοια του ασφαλούς κύκλου ζωής ανάπτυξης (SDLC) συνιστά τάση, η οποία επιχειρεί να πραγματοποιήσει το παραπάνω. Το SDLC χρησιμοποιεί ένα κλασσικό
σπειροειδές μοντέλο, το οποίο αντιλαμβάνεται ολιστικά την ασφάλεια από την οπτική του κύκλου ζωής λογισμικού και εξασφαλίζει ότι αυτή είναι έμφυτη
στον σχεδιασμό και την ανάπτυξή του και δεν αποτελεί μεταγενέστερη σκέψη, στο στάδιο της παραγωγής. Η διαδικασία του SDLC υποστηρίζεται ότι μειώνει τα κόστη
συντήρησης και αυξάνει την αξιοπιστία του λογισμικού απέναντι  σε σφάλματα σχετιζόμενα με την ασφάλεια.

Προσφάτως, παρατηρήθηκε η εμφάνιση του DevSecOps (εννοώντας την ολοκλήρωση της διαδικασίας ανάπτυξης, της ασφάλειας και των λειτουργιών). Επιπλέον του SDLC ,
το DevSecOps περιλαμβάνει μια προσέγγιση  για την κουλτούρα, αυτοματοποίηση και σχεδιασμό πλατφορμών  ώστε να καθιστά τον κύκλο ζωής του λογισμικού τόσο
Ευέλικτο και υπεύθυνο όσο η Ευέλικτη ανάπτυξη και η συνεχής ολοκλήρωση (CI).

### *Συνήθη κριτήρια για την αξιολόγηση της ασφάλειας της τεχνολογίας πληροφοριών*

Η αξιολόγηση της ασφάλειας δημιουργεί αίσθημα εμπιστοσύνης στην λειτουργικότητα ασφάλειας των προϊόντων  πληροφορικής και στα μέτρα διασφάλισης,
τα οποία εφαρμόζονται σε αυτά. Τα αποτελέσματα της αξιολόγησης ενδέχεται να βοηθούν τους καταναλωτές να καθορίζουν αν κάποια προϊόντα πληροφορικής
καλύπτουν τις ανάγκες τους για ασφάλεια. Το πρότυπο ISO/IEC 15408, ονομαζόμενο Συνήθη Κριτήρια (CC Common Criteria) για την Αξιολόγηση της Ασφάλειας της 
Τεχνολογίας Πληροφορίας, αποτελεί χρήσιμο οδηγό για την ανάπτυξη, αξιολόγηση ή/και προμήθεια προϊόντων πληροφορικής με λειτουργικότητα ασφάλειας [34].  


Τα Συνήθη Κριτήρια (CC) αφορούν την προστασία των στοιχείων από μη εξουσιοδοτημένη γνωστοποίηση, τροποποίηση ή απώλεια χρήσης. Οι κατηγορίες προστασίας,
οι οποίες σχετίζονται με τους τρεις προαναφερόμενους τύπους αποτυχίας ασφαλείας, ονομάζονται συνήθως και αντιστοίχως, *εμπιστευτικότητα*, *ακεραιότητα* και 
*διαθεσιμότητα*.

## **Μηχανική ασφάλειας για συστήματα λογισμικού**

### *Απαιτήσεις ασφάλειας*

Η ασφάλεια των απαιτήσεων λογισμικού έχει ως αντικείμενο την διευκρίνιση και συγκεκριμενοποίηση της πολιτικής ασφάλειας και των στόχων στις απαιτήσεις λογισμικού,
θέτοντας με αυτό τον τρόπο τα θεμέλια για ζητήματα ασφάλειας κατά την διαδικασία της ανάπτυξης λογισμικού. Παράγοντες οι οποίοι πρέπει να ληφθούν υπόψη σε αυτό
το στάδιο είναι οι απαιτήσεις λογισμικού και οι απειλές ή κίνδυνοι. Οι απαιτήσεις αναφέρονται στις συγκεκριμένες λειτουργίες που είναι κρίσιμες για την ασφάλεια
ενώ οι κίνδυνοι στους πιθανούς τρόπους, με τους οποίους ενδέχεται να τεθεί υπό απειλή η ασφάλεια του λογισμικού.

### *Σχεδιασμός ασφάλειας*

Ο *σχεδιασμός ασφάλειας* αναφέρεται στους τρόπους αποφυγής μη εξουσιοδοτημένης γνωστοποίησης, δημιουργίας, αλλαγής, διαγραφής ή άρνησης πρόσβασης σε
πληροφορίες και άλλους πόρους. Επιπλέον, σχετίζεται με μεθόδους αντοχής σε επιθέσεις και παραβιάσεις, οι οποίες αφορούν την ασφάλεια, περιορίζοντας την ζημιά,
συνεχίζοντας την προσφορά υπηρεσίας, επιταχύνοντας την επιδιόρθωση και ανάκτηση και εξασφαλίζοντας την ανάκαμψη με ασφάλεια μετά την αποτυχία.
Ο έλεγχος πρόσβασης συνιστά θεμελιώδη έννοια της ασφάλειας, ενώ σημαίνοντα ρόλο διαδραματίζει η εξασφάλιση της σωστής χρήσης της κρυπτολογίας.

Η ασφάλεια του σχεδιασμού λογισμικού ασχολείται με τον σχεδιασμό τμημάτων λογισμικού, τα οποία συνδέονται μεταξύ τους ώστε να συμβαδίζουν 
με τους στόχους που καθορίζονται από τις απαιτήσεις ασφάλειας. Το συγκεκριμένο βήμα διασαφηνίζει τις λεπτομέρειες των ζητημάτων ασφάλειας και
διαμορφώνει διακριτά βήματα για την εκτέλεση. Παράγοντες που πρέπει να ληφθούν υπόψη ενδέχεται να  περιλαμβάνουν πλαίσια και τρόπους πρόσβασης, 
τα οποία ορίζουν τις συνολικές στρατηγικές παρακολούθησης/εφαρμογής, όπως και επιμέρους μηχανισμούς εφαρμογής πολιτικών. 

### *Πρότυπα ασφάλειας*

Ένα *πρότυπο ασφάλειας* περιγράφει ένα συγκεκριμένο επαναλαμβανόμενο πρόβλημα ασφάλειας, το οποίο προκύπτει εντός συγκεκριμένου πλαισίου και επιδέχεται
καλά αποδεδειγμένη γενική λύση [21].

### *Κατασκευή για παροχή ασφάλειας*

Η ασφάλεια κατασκευής λογισμικού σχετίζεται με τρόπους συγγραφής κώδικα προγραμματισμού για την αντιμετώπιση ζητημάτων ασφάλειας, σε συγκεκριμένες
περιπτώσεις. Ο όρος ασφάλεια κατασκευής λογισμικού ενδέχεται να έχει διαφορετική σημασία για διαφορετικούς ανθρώπους. Μπορεί να σημαίνει τον τρόπο με 
τον οποίο μια συγκεκριμένη λειτουργία είναι γραμμένη ώστε ο κώδικας αυτός καθαυτός να κρίνεται ασφαλής, ή μπορεί να σημαίνει την συγγραφή κώδικα για 
παροχή ασφάλειας στο λογισμικό. Δυστυχώς, πολλοί άνθρωποι αδυνατούν να αντιληφθούν την διάκριση ανάμεσα στα παραπάνω. Ένας λόγος, στον οποίο οφείλεται 
η σύγχυση, είναι η ύπαρξη ασάφειας αναφορικά με τον τρόπο επίτευξης της ασφάλειας συγκεκριμένου κώδικα. Για παράδειγμα, στην γλώσσα προγραμματισμού C, 
η έκφραση “i<<1” (μετατόπισε την δυαδική αναπαράσταση της τιμής του i  προς τα αριστερά κατά ένα) και “2*” (πολλαπλασίασε την τιμή της μεταβλητής i επί 
την σταθερά 2) σημαίνουν το ίδιο σε σημασιολογικό επίπεδο, έχουν όμως και τις ίδιες προεκτάσεις ασφάλειας;

Η απάντηση μπορεί να διαφοροποιείται για διαφορετικούς συνδυασμούς ISAs (αρχιτεκτονικών συνόλου εντολών) και μεταγλωττιστών . Εξαιτίας αυτής της απουσίας κατανόησης, η ασφάλεια κατασκευής 
λογισμικού—στην τρέχουσα κατάστασή της—αναφέρεται κυρίως στην δεύτερη οπτική που παρατέθηκε παραπάνω: την συγγραφή κώδικα για την παροχή ασφάλειας στο 
λογισμικό. Η συγγραφή κώδικα για την παροχή ασφάλειας μπορεί να επιτευχθεί μέσω εφαρμογής προτεινόμενων κανόνων. Μερικοί από αυτούς τους κανόνες είναι οι εξής:

    * Δόμησε την διαδικασία έτσι ώστε όλα τα τμήματα, τα οποία απαιτούν παραπάνω δικαιώματα, να είναι ξεχωριστές ενότητες (modules). Οι ενότητες πρέπει να είναι όσο το δυνατόν μικρότερες και να εκτελούν μόνο τα καθήκοντα που απαιτούν τα συγκεκριμένα δικαιώματα.
    * Εξασφάλισε ότι όσες υποθέσεις αφορούν το πρόγραμμα επικυρώνονται. Εφόσον αυτό δεν καθίσταται εφικτό, κατάγραψε αυτές για τους εγκαταστάτες και τους συντηρητές, ώστε να έχουν επίγνωση των υποθέσεων που ενδέχεται να επιχειρήσουν να ακυρώσουν οι επιτιθέμενοι.
    * Εξασφάλισε ότι το πρόγραμμα δεν μοιράζεται αντικείμενα στην μνήμη με άλλα προγράμματα.
    * Έλεγξε την κατάσταση σφάλματος κάθε λειτουργίας. Μην κάνεις ανάκτηση εκτός και αν, ούτε η αιτία του σφάλματος, ούτε οι επιπτώσεις του, επηρεάζουν οποιονδήποτε παράγοντα ασφάλειας. Το πρόγραμμα οφείλει να επαναφέρει το λογισμικό στην κατάσταση που βρισκόταν, πριν ξεκινήσει η διαδικασία και στη συνέχεια να τερματίζεται.

Παρά το γεγονός ότι δεν υφίστανται αδιάτρητοι τρόποι για την επίτευξη πλήρως ασφαλούς διαδικασίας ανάπτυξης λογισμικού, εντοπίζονται ορισμένες γενικές 
μεθοδολογίες, οι οποίες μπορούν να βοηθήσουν. Οι συγκεκριμένες μεθοδολογίες αφορούν κάθε στάδιο του κύκλου ζωής ανάπτυξης λογισμικού. Η Ομάδα Αντιμετώπισης 
Έκτακτων Αναγκών στην Πληροφορική (Computer Emergency Response Team CERT) εκδίδει αξιόπιστες μεθοδολογίες, εκ των οποίων παρουσιάζονται παρακάτω οι δέκα 
καλύτερες πρακτικές ασφάλειας λογισμικού (οι λεπτομέρειες παρουσιάζονται στο [22]):

    1. Επικυρώστε τα δεδομένα εισόδου
    2. Προσέξτε τις ειδοποιήσεις του μεταγλωττιστή 
    3. Δημιουργήστε αρχιτεκτονική και σχέδιο για τις πολιτικές ασφάλειας
    4. Προτιμήστε την απλότητα
    5. Αρνηθείτε τις προεπιλογές
    6. Συμμορφωθείτε με την αρχή του ελάχιστου προνομίου
    7. Εξυγιάνετε τα δεδομένα, προτού αυτά σταλούν σε άλλο λογισμικό
    8. Εξασκηθείτε στην άμυνα σε βάθος
    9. Χρησιμοποιήστε αποτελεσματικές τεχνικές εξασφάλισης ποιότητας 
    10. Υιοθετήστε ένα πρότυπο ασφάλειας κατασκευής λογισμικού 

### *Έλεγχος ασφάλειας* 

Ο έλεγχος ασφάλειας επιβεβαιώνει ότι το λογισμικό που εφαρμόζεται πληροί τις απαιτήσεις ασφάλειας. Επιπλέον, επικυρώνει ότι η εφαρμογή του λογισμικού 
δεν περιλαμβάνει καμία από τις γνωστές ευπάθειες. Παρά το γεγονός ότι, για την εξασφάλιση του πρώτου, επαρκούν μεθοδολογίες γενικού ελέγχου λογισμικού, 
για το τελευταίο, κρίνεται αναγκαία η χρήση μεθόδων ελέγχου, ειδικών για την ασφάλεια (Για περισσότερες πληροφορίες σχετικά με τον έλεγχο, βλ. 
γνωστικό πεδίο Έλεγχος Λογισμικού).

Υπάρχουν δύο προσεγγίσεις αναφορικά με τον ειδικό για την ασφάλεια έλεγχο. Η πρώτη εκ των δύο αφορά στον εντοπισμό τρωτών σημείων της γλώσσας προγραμματισμού 
ή της εφαρμογής, μέσω στατικού ελέγχου του πηγαίου κώδικα, διαδικασία, η οποία μπορεί να αυτοματοποιηθεί μέσω της χρήσης εργαλείων. Η δεύτερη αποτελεί την 
*δοκιμή διείσδυσης* (penetration test), γνωστή και ως *δοκιμή ηθικής πειρατείας* (ethical hacking test). Η παρούσα προσέγγιση εντοπίζει τρωτά σημεία στην 
συμπεριφορά του λογισμικού. Μπορεί να αυτοματοποιηθεί χρησιμοποιώντας εργαλεία, όπως σαρωτές ηλεκτρονικών εφαρμογών και εργαλεία fuzzing. Ειδικοί σε θέματα 
ασφάλειας, οι οποίοι είναι ειδικευμένοι στις πιο πρόσφατες τεχνικές ασφάλειας στον τομέα εφαρμογών, οφείλουν να διεξάγουν αυτές τις δοκιμές.

### *Διαχείριση ευπαθειών*

Η χρήση ορθών πρακτικών συγγραφής κώδικα μπορεί να συμβάλει στην ουσιαστική μείωση ελαττωμάτων λογισμικού, τα οποία εισάγονται κατά την υλοποίηση [1]. 
Τα συνήθη ελαττώματα λογισμικού αυτού του τύπου κατηγοριοποιούνται και μοιράζονται σε βάσεις δεδομένων : στην Common Vulnerabilities and Exposures (CVE) [28], στην Common Weakness Enumeration (CWE) [29]
και στην Common Attack Pattern Enumeration (CAPEC) [30]. Οι προγραμματιστές μπορούν να ανατρέξουν σε αυτές τις βάσεις δεδομένων για την εφαρμογή ασφάλειας, 
ενώ διατίθενται και ορισμένα εργαλεία, ώστε να μπορέσουν να ελέγξουν για κοινές ευπάθειες στον κώδικα. 

## **Εργαλεία ασφάλειας λογισμικού**

### *Εργαλεία ελέγχου ευπαθειών ασφάλειας*

Ορισμένα εργαλεία ανάλυσης πηγαίου κώδικα ελέγχουν τον κώδικα για τον εντοπισμό προβλημάτων ασφάλειας, όπως ευπαθειών ασφάλειας. Ωστόσο, η αναγνώριση 
τρωτών σημείων συνιστά πολύπλοκη διαδικασία, εξαιτίας του γεγονότος ότι αυτά παρουσιάζονται συχνά σε δύσκολες ως προς την αναπαραγωγή καταστάσεις λογισμικού 
ή εμφανίζονται υπό ασυνήθιστες συνθήκες [1]. Τα εργαλεία ανάλυσης ασφάλειας μπορούν να βοηθήσουν, αλλά αδυνατούν να εντοπίσουν όλα τα τρωτά σημεία.

### *Εργαλεία ελέγχου διείσδυσης* 

Οι δοκιμές διείσδυσης ελέγχουν ένα σύστημα στο τελικό περιβάλλον παραγωγής του. Αυτά τα εργαλεία εισάγουν λανθασμένα, κακόβουλα και τυχαία δεδομένα στα 
σημεία εισόδου ενός συστήματος, ώστε να αποκαλύψουν σφάλματα – διαδικασία η οποία συχνά αναφέρεται ως fuzzing [2].

## **Ειδική ασφάλεια για διεύθυνση διαδικτύου του λογισμικού** 

### *Ασφάλεια για κοντέινερ και υπολογιστικό νέφος* 

Η υποδομή και οι υπηρεσίες του υπολογιστικού νέφους συχνά κρίνονται ως αρκετά φθηνές και εύκολες στην χρήση, με αποτέλεσμα, συχνά, η χρησιμοποίησή τους να 
οδηγεί στον διασκορπισμό των περιουσιακών στοιχείων ανά τον πλανήτη και κατ’ επέκτασιν στην  λήθη. Τα ξεχασμένα αυτά περιουσιακά στοιχεία αποτελούν ωρολογιακή 
βόμβα, έτοιμη να εκραγεί και να προκαλέσει ζήτημα ασφάλειας [31].

Μια σημαντική διαφορά των περιβαλλόντων υπολογιστικού νέφους αποτελεί το γεγονός ότι οι φυσικοί πόροι και η ασφάλεια δεν συνιστούν γενικώς ανησυχία. 
Οι προγραμματιστές λογισμικού έχουν την δυνατότητα, χωρίς καμία δυσκολία, να αναθέτουν σε εξωτερικούς συνεργάτες τις ετικέτες περιουσιακών στοιχείων, 
τα φράγματα κατά της διαρροής (anti-tailgating), τα φράγματα μεταξύ των πλακών (slab-to-slab barriers), την τοποθέτηση παραθύρων κέντρων δεδομένων, τις κάμερες και άλλα είδη φυσικής 
ασφάλειας και ελέγχου παρακολούθησης των περιουσιακών στοιχείων.

### *Ασφάλεια για λογισμικό του Διαδικτύου των Πραγμάτων (IoT)*

Ως μέρος του σημερινού φαινομένου του Διαδικτύου των Πραγμάτων, τα συστήματα είναι αλληλοσυνδεδεμένα με πολλές άλλες συσκευές, ειδικά με συστήματα τα οποία 
ταλανίζονται από ευρέως γνωστά σφάλματα ασφάλειας, έμφυτα στην σημερινή επιχειρησιακή τεχνολογία της πληροφορίας. Οι επιτιθέμενοι, οι οποίοι αποκτούν πρόσβαση 
στις πλατφόρμες της τεχνολογίας πληροφορίας των επιχειρήσεων, για παράδειγμα, μέσω εκμετάλλευσης των τρωτών σημείων των διακομιστών, πιθανότατα θα αποκτήσουν πρόσβαση 
και σε μη επαρκώς προστατευόμενες βιομηχανικές συσκευές του Διαδικτύου των Πραγμάτων. Ως απόρροια αυτού, ενδέχεται να προκληθεί σοβαρή ζημία, συμπεριλαμβανομένων 
και ζητημάτων ασφαλείας. Ως εκ τούτου, η εισαγωγή τεράστιου αριθμού σημείων εξόδου (end points) από το καταναλωτικό ή βιομηχανικό περιβάλλον, δημιουργεί πρόσφορο 
έδαφος για την εκμετάλλευση των αδύναμων κρίκων. Παρά την σκλήρυνση των σημείων εξόδου, τη διασφάλιση των επικοινωνιών συσκευής με συσκευή και τη διασφάλιση 
της αξιοπιστίας των συσκευών και πληροφοριών σε ό,τι μέχρι σήμερα ήταν κλειστό, τα ομοιογενή συστήματα παρουσιάζουν νέες προκλήσεις. Για αυτό τον λόγο, 
απαιτούνται ολοκληρωμένες μέθοδοι ανάλυσης κινδύνου και απειλών, καθώς και εργαλεία διαχείρισης για πλατφόρμες του Διαδικτύου των Πραγμάτων [33].

### *Ασφάλεια για εφαρμογές βασισμένες στην μηχανική μάθηση*

Παρά το γεγονός ότι τεχνικές μηχανικής μάθησης εφαρμόζονται ευρέως σε πολλά συστήματα, η μηχανική μάθηση παρουσιάζει μια συγκεκριμένη ευπάθεια: Οι επιτιθέμενοι 
μπορούν να τροποποιήσουν τις αποφάσεις των μοντέλων μηχανικής μάθησης. Εντοπίζονται δύο είδη επιθέσεων: η δηλητηρίαση μοντέλων (model poisoning), η οποία επιτίθεται 
σε δεδομένα εκπαίδευσης και η υπεκφυγή (evasion), η οποία επιτίθεται στα εισαγόμενα δεδομένα των εκπαιδευμένων μοντέλων[39].