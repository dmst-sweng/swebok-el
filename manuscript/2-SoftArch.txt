# Αρχιτεκτονική Λογισμικού

## Ακρωνύμια

|AD 	|Architecture Description		            |
|ADL	|Architecture Description Language          |
|API    |Application Programming Interface          |
|ASR    |Architecturally Significant Requirement    |
|IDL    |Interface Description Language             |
|MVC    |Model View Controller                      |

## Εισαγωγή

Αυτό το κεφάλαιο λαμβάνει υπόψη την αρχιτεκτονική λογισμικού από διάφορες προοπτικές: έννοιες αρχιτεκτονικής λογισμικού, αναπαράσταση αρχιτεκτονικών και προϊόντα εργασίας, περιβάλλον, διαδικασίες και μεθόδους, καθώς και ανάλυση και αξιολόγηση. Σε αντίθεση με την προηγούμενη έκδοση, αυτή η έκδοση δημιουργεί μια περιοχή γνώσης για την αρχιτεκτονική λογισμικού, ξεχωριστή από την περιοχή γνώσης για τον σχεδιασμό λογισμικού (Γνωστικό πεδίο Σχεδιασμού λογισμικού), λόγω του σημαντικού ενδιαφέροντος και ανάπτυξης των αρχιτεκτονικών από τη δεκαετία του 1990.

## Ανάλυση θεμάτων για την αρχιτεκτονική λογισμικού

Στο σχ. 1 μπορείτε να δείτε την εκτενή ανάλυση των διάφορων θεμάτων για την περιοχή γνώσης της Αρχιτεκτονικής Λογισμικού.

{id="fig-softarch-tree"}
![Σχήμα 2.1 Κατανομή των θεμάτων στο γνωστικό πεδίο αρχιτεκτονική λογισμικού.](images/2-SoftArch.png)

## Βασικές αρχές της αρχιτεκτονικής λογισμικού

### Η αίσθηση της αρχιτεκτονικής

Η μηχανική λογισμικού και σχετικές επιστήμες χρησιμοποιούν πολλές έννοιες της "αρχιτεκτονικής". Πρώτον, η "αρχιτεκτονική" αναφέρεται συχνά σε μια αρχή: την τέχνη και την επιστήμη της κατασκευής πραγμάτων - σε αυτήν την περίπτωση, συστημάτων λογισμικού. Η επιστήμη αυτή περιλαμβάνει έννοιες, αρχές, διαδικασίες και μεθόδους που η κοινότητα έχει ανακαλύψει και υιοθετήσει.

Δεύτερον, η *αρχιτεκτονική* αναφέρεται στις διάφορες διαδικασίες μέσω των οποίων αυτή η αρχή υλοποιείται. Σε αυτήν την περιοχή γνώσης, διαχωρίζουμε τον σχεδιασμό αρχιτεκτονικής ως μια συγκεκριμένη φάση στον κύκλο ζωής που περιλαμβάνει ένα συγκεκριμένο σύνολο δραστηριοτήτων, και το διαχωρίζουμε από τις ευρύτερες διαδικασίες αρχιτεκτονικής που καλύπτουν ολόκληρο τον κύκλο ζωής. Και τα δύο συζητούνται στην ενότητα *Επεξεργασία Αρχιτεκτονικής Λογισμικού*.

Τρίτον, η "αρχιτεκτονική" αναφέρεται στο *αποτέλεσμα* της εφαρμογής αρχών αρχιτεκτονικής σχεδίασης και των διαδικασιών για τη διαμόρφωση αρχιτεκτονικών για συστήματα λογισμικού. Οι αρχιτεκτονικές ως αποτελέσματα εκφράζονται σε *αρχιτεκτονικές περιγραφές*. Το συγκεκριμένο θέμα θα συζητηθεί παραπάνω στην ενότητα *Περιγραφή Αρχιτεκτονικής Λογισμικού*. Η έννοια της αρχιτεκτονικής έχει εξελιχθεί και χρησιμοποιούνται πολλοί ορισμοί σήμερα. Ένας πρώιμος ορισμός της αρχιτεκτονικής από το 1990, εστίαζε στη δομή του λογισμικού:

Αρχιτεκτονική. Η οργανωσιακή δομή ενός συστήματος ή μίας συνιστώσας. [από: IEEE Std 610.12–1990, *IEEE Glossary of Software Engineering Terminology*]

Αυτός ο ορισμός δεν χαρακτήριζε ορθά της εξελιγμένη ως προς την αρχιτεκτονική σκέψη, π.χ. αυτός ο ορισμός δεν επιτρέπει τον διαχωρισμό του λεπτομερούς σχεδιασμού μιας συνιστώσας από το Makefile της. Κάθε παράδειγμα που περιγράφει την *οργανωσιακή δομή* του συστήματος λογισμικού ή των συνιστώσων του δεν πρέπει να θεωρείται αρχιτεκτονική. Ακόμα, η έμφαση στη δομή συχνά περιορίζεται στην δομή του κώδικα και αποτυγχάνει να συμπεριλάβει όλες της δομές ενός συστήματος λογισμικού:

    Η αρχιτεκτονική λογισμικού ενός συστήματος είναι το σύνολο των δομών που απαιτούνται για να έχει λογική σύνδεση σύστημα. Αυτές οι δομές αποτελούνται από στοιχεία λογισμικού, σχέσεις μεταξύ αυτών και ιδιότητες και των δύο. [2]

Κατά τα μέσα του 1990 η αρχιτεκτονική λογισμικού εμφανίστηκε ως μια ευρύτερη έννοια που εμπλέκει μια πιο γενική μελέτη των δομών και των αρχιτεκτονικών του λογισμικού. Πολλές δομές των συστημάτων λογισμικού δεν αντανακλούνται απευθείας στη δομή του κώδικα. Και οι δύο τύποι δομών έχουν επιπτώσεις στο σύστημα συνολικά: Ποιες είναι οι δυνατότητες του συστήματος; Ποιες αλληλεπιδράσεις έχει με άλλα συστήματα; Πώς χειρίζεται ιδιότητες όπως η ασφάλεια; Η αναγνώριση πως το λογισμικό περιλαμβάνει πολλές διαφορετικές δομές έχει προκαλέσει συζητήσεις για μια σειρά από ενδιαφέρουσες έννοιες για την αρχιτεκτονική λογισμικού (και γενικότερα για το σχεδιασμό λογισμικού), οδηγώντας σε τρέχουσες ορισμούς όπως:

    Αρχιτεκτονική (ενός συστήματος). Βασικά σενάρια ή ιδιότητες ενός συστήματος στο περιβάλλον του, διαμορφωμένα μέσα από τα στοιχεία που περιέχει, τις σχέσεις που διαμορφώνονται και με βάση τις αρχές σχεδιασμού και εξέλιξής του. [17]

Κύριες ιδέες σε αυτό τον ορισμό είναι: (1) Η αρχιτεκτονική αναφέρεται σε ό, τι είναι *βασικό* σε ένα σύστημα λογισμικού, δεν θεωρείται κάθε ένα στοιχείο, διασύνδεση ή διεπαφή βασικό. (2) Η αρχιτεκτονική λογισμικού λαμβάνει υπόψη *ένα σύστημα στο περιβάλλον του*. Παρόμοια με την αρχιτεκτονική κτιρίων, η αρχιτεκτονική λογισμικού είναι προσανατολισμένη προς τα έξω. Λαμβάνει υπόψη το περιβάλλον ενός συστήματος πέρα ​​από τα όριά του, για να εξετάσει τους ανθρώπους, τις οργανώσεις, το λογισμικό, τον υλικό και άλλες συσκευές με τις οποίες το σύστημα πρέπει να αλληλεπιδράσει.

### Ενδιαφερόμενοι φορείς και πτυχές

Ένα σύστημα λογισμικού έχει πολλούς *ενδιαφερόμενους φορείς* με διαφορετικούς ρόλους και ενδιαφέροντα προς το σύστημα. Αυτά τα διαφορετικά ενδιαφέρονται ονομάζονται *πτυχές*, και σύμφωνα με τον *διαχωρισμό πτυχών του Dijkstra*:

    Θα προσπαθήσω να σας εξηγήσω, ποια κατά τη γνώμη μου είναι η χαρακτηριστική ιδιότητα για όλο το ευφυές σκέψης. Είναι, ότι κάποιος είναι διατεθειμένος να μελετήσει σε βάθος ένα κομμάτι του αντικειμένου του απομονώνοντάς το για τη συνέπειά του, γνωρίζοντας συνεχώς ότι απασχολείται μόνο με ένα από τα κομμάτια του αντικειμένου. Γνωρίζουμε ότι ένα πρόγραμμα πρέπει να είναι σωστό και μπορούμε να το μελετήσουμε μόνο από αυτή τη σκοπιά. Γνωρίζουμε επίσης ότι πρέπει να είναι αποτελεσματικό και μπορούμε να μελετήσουμε την απόδοσή του μία άλλη φορά. Με μία άλλη οπτική, μπορούμε να αναρωτηθούμε εάν το πρόγραμμα είναι επιθυμητό και αν ναι, γιατί είναι επιθυμητό. Αλλά δεν κερδίζουμε κάτι - αντιθέτως! - αν προσπαθήσουμε να αντιμετωπίσουμε αυτά τα θέματα ταυτόχρονα. Αυτό που ονομάζω μερικές φορές «διαχωρισμό των πτυχών», που ακόμη και αν δεν είναι απολύτος δυνατό πάντα, είναι η μόνη διαθέσιμη τεχνική για να οργανώνεται αποδοτικά η σκέψη κάποιου, από όσα γνωρίζω. Αυτό είναι αυτό που εννοώ με το να "[επικεντρώνουμε] την προσοχή πάνω σε κάποιο θέμα": δεν σημαίνει να αγνοούμε τις άλλες πτυχές, απλά σκεφτόμενοι με την οπτική αυτής της πτυχής, οι άλλες είναι ασήμαντες. Είναι το να είσαι μονόπλευρος και πολύπλευρος ταυτόχρονα. [10]

Αυτό που είναι θεμελιώδες για ένα σύστημα διαφέρει ανάλογα με τα ενδιαφέροντα και τους ρόλους των ενδιαφερόμενων φορέων. Οι δομές του λογισμικού, συνεπώς, διαφέρουν επίσης ανάλογα με τους ρόλους και τα ενδιαφέροντα των φορέων. (Δείτε επίσης την ενότητα *Γνωστικό πεδίο Μεθόδοι σχεδίασης στη σχεδίαση λογισμικού.*) 

Ο πελάτης ενός συστήματος λογισμικού ενδιαφέρεται περισσότερο για το πότε το σύστημα θα είναι έτοιμο και πόσο θα κοστίσει να κατασκευαστεί και να λειτουργήσει. Οι χρήστες ενδιαφέρονται περισσότερο για το τι κάνει και πώς να το χρησιμοποιήσουν. Οι σχεδιαστές και οι προγραμματιστές που χτίζουν το σύστημα έχουν τις δικές τους πτυχές, όπως αν ένας αλγόριθμος θα ανταποκριθεί στις απαιτήσεις του συστήματος. Αυτοί που είναι υπεύθυνοι για την ασφάλεια του συστήματος έχουν διαφορετικές πτυχές.

Οι πτυχές καλύπτουν μια ευρεία γκάμα θεμάτων, που πιθανώς σχετίζονται με οποιαδήποτε επίδραση σε ένα σύστημα και στο περιβάλλον του, συμπεριλαμβανομένων των αναπτυξιακών, τεχνολογικών, επιχειρησιακών, οργανωτικών, πολιτικών, οικονομικών, νομικών, κανονιστικών, οικολογικών και κοινωνικών επιρροών. Όπως οι απαιτήσεις λογισμικού, μπορούν να ταξινομηθούν ως λειτουργικές, μη λειτουργικές ή περιορισμούς. Δείτε την ενότητα *Απαιτήσεις Λογισμικού*. Οι πτυχές εκδηλώνονται σε διάφορες γνώριμες μορφές, συμπεριλαμβανομένων των απαιτήσεων, των χαρακτηριστικών ποιότητας ή "ικανοτήτων", των αναδυόμενων ιδιοτήτων (που μπορεί να είναι είτε επιθυμητές είτε απαγορευτικές) και διάφορων ειδών περιορισμών (όπως αναφέρονται παραπάνω). Δείτε την ενότητα Ποιότητα Λογισμικού. Το θέμα 2, *Περιγραφή Αρχιτεκτονικής Λογισμικού*, δείχνει πώς οι πτυχές αυτές διαμορφώνουν τις αχιτεκτονικές και τα προϊόντα εργασίας που τις περιγράφουν . Παράδειγμα κάποιων πτυχών παρατίθενται στην επόμενη παράγραφο.

__Παραδείγματα πτυχών της αρχιτεκτονικής λογισμικού:__
δυνατότητα, ευελιξία, διασφάλιση, αυτονομία, διαθεσιμότητα, συμπεριφορά, επιχειρηματικοί στόχοι και στρατηγικές, πολυπλοκότητα, συμμόρφωση με ρυθμίσεις, συγχρονισμό, έλεγχο, κόστος, προσβασιμότητα δεδομένων, δυνατότητα ανάπτυξης, δυνατότητα χρήσης, ενεργειακή απόδοση, εξελικτικότητα, επεκτασιμότητα, σκοπιμότητα, ευελιξία, λειτουργικότητα, πληροφορίες διασφάλιση, επικοινωνία μεταξύ διεργασιών, διαλειτουργικότητα, γνωστοί περιορισμοί, δυνατότητα συντήρησης, δυνατότητα τροποποίησης, αρθρωτότητα, άνοιγμα, απόδοση, απόρρητο, ποιότητα υπηρεσιών, αξιοπιστία, αξιοποίηση πόρων, επαναχρησιμοποίηση, ασφάλεια, επεκτασιμότητα, χρονοδιάγραμμα, ασφάλεια, λειτουργίες συστήματος, δομή λογισμικού, υποσύστημα ενοποίησηs, βιωσιμότητα, χαρακτηριστικά συστήματος, δυνατότητα δοκιμής, χρηστικότητα, χρήση, εμπειρία χρήστη.

### Χρήσεις αρχιτεκτονικής

Μία κύρια χρήση της αρχιτεκτονικής ενός λογισμικού είναι να παρέχει στους ανθρώπους που εργάζονται με αυτό μια κοινή κατανόηση του συστήματος ώστε να καθοδηγήσουν το σχεδιασμό και την κατασκευή του. Η αρχιτεκτονική επίσης λειτουργεί ως πρώιμο σχέδιο του λογισμικού συστήματος που παρέχει μία βάση για την ανάλυση και την αξιολόγηση εναλλακτικών. Ένα τρίτο κοινό παράδειγμα χρήσης είναι η δυνατότητα αντιστροφής μηχανικής (ή *αντιστροφής αρχιτεκτονικής*) βοηθώντας όσους εργάζονται με αυτό να κατανοήσουν ένα υπάρχον λογισμικό σύστημα πριν αναλάβουν την συντήρησή του, την ενίσχυσή του ή την τροποποίησή του. Για να υποστηρίξει αυτές τις χρήσεις, πρέπει να υπάρχει τεκμιρίωση για την αρχιτεκτονική (δείτε την ενότητα *Περιγραφή αρχιτεκτονικής λογισμικού*).

Ο νόμος του Conway υποστηρίζει ότι "οι οργανισμοί που σχεδιάζουν συστήματα... περιορίζονται στο να παράγουν σχεδιασμούς που είναι αντίγραφα των δομών επικοινωνίας αυτών των οργανισμών". [9] Αυτό υποδηλώνει ότι οι αρχιτεκτονικές συχνά αντανακλούν τη δομή των οργανώσεων που τις ανέπτυξαν. Ανάλογα με το λογισμικό σύστημα και τον οργανισμό, αυτό μπορεί να αποτελεί μια δύναμη ή μια αδυναμία. Η αρχιτεκτονική μπορεί να βελτιώσει την επικοινωνία εντός μιας μεγάλης ομάδας ή να την επηρεάσει αρνητικά. Κάθε μέρος του οργανισμού μπορεί να βασίσει τον σχεδιασμό, τον προϋπολογισμό και τον προγραμματισμό του βάσει των γνώσεών του για την αρχιτεκτονική του συστήματος. Η δημιουργία μιας καλά σχεδιασμένης και τεκμηριωμένης αρχιτεκτονικής είναι μια προσέγγιση για την αύξηση της εφαρμοσιμότητας και της επαναχρησιμοποίησης των σχεδίων και των συνιστώσεων του λογισμικού. Η αρχιτεκτονική αποτελεί τη βάση για ομαδοποίηση σχεδίων για προγράμματα ή για προϊόντα λογισμικού. Αυτό μπορεί να επιτευχθεί αναγνωρίζοντας τις κοινοτυπίες μεταξύ αυτών των ομάδων και σχεδιάζοντας επαναχρησιμοποιήσιμα και εξατομικευμένα στοιχεία για τα διαφορετικά μέλη των ομάδων.

## Περιγραφή αρχιτεκτονικής λογισμικού

Στην ενότητα 1, *Βασικές Αρχές της Αρχιτεκτονικής Λογισμικού*, η αρχιτεκτονική λογισμικού ορίστηκε ως η βασικά έννοια ή οι βασικές ιδιότητες ενός συστήματος λογισμικού στο περιβάλλον του. Ωστόσο, κάθε ενδιαφερόμενο μέρος μπορεί να έχει διαφορετική αντίληψη για το τι είναι θεμελιώδες για ένα σύστημα λογισμικού, με δεδομένο την οπτική του. Έχοντας ένα νοητικό μοντέλο αρχιτεκτονικής συστήματος μπορεί να είναι καλό για μικρά συστήματα και για άτομα που εργάζονται μόνοι. Ωστόσο, για μεγάλα, πολύπλοκα συστήματα που αναπτύσσονται και λειτουργούν από ομάδες, μια υλική αναπαράσταση είναι ανεκτίμητη, ειδικά όταν η αντίληψη για το σύστημα εξελίσσεται και όταν νέοι άνθρωποι εντάσσονται ή αποχωρούν από την ομάδα. Έχοντας μια συγκεκριμένη αναπαράσταση ως προϊόν εργασίας μπορεί επίσης να χρησιμοποιηθεί ως μία βάση για την ανάλυση της αρχιτεκτονικής, τη διοργάνωση του σχεδιασμού της και την καθοδήγηση για την υλοποίησή της. Αυτά τα προϊόντα ονομάζονται *περιγραφές αρχιτεκτονικής* (architecture descriptions - ADs).

Μία AD τεκμηριώνει μια αρχιτεκτονική για ένα λογισμικό σύστημα. Είναι στοχευμένη σε αυτούς τους ενδιαφερόμενους φορείς που έχουν πτυχές σχετικά με το λογισμικό σύστημα τις οποίες η αρχιτεκτονική του μπορεί να τις απαντήσει. Όπως αναφέρεται στην ενότητα 1, *Θεμέλια της Αρχιτεκτονικής Λογισμικού*, το βασικό ακροατήριο αποτελείται από τους σχεδιαστές, μηχανικούς και προγραμματιστές οι οποίοι ευθύνονται για την κατασκευή του συστήματος. Για αυτούς τους ενδιαφερόμενους, μία AD λειτουργεί ως *σχέδιο* για να καθοδηγήσει την κατασκευή του συστήματος. Για άλλους, μία AD είναι μια βάση για τη δουλειά τους, για παράδειγμα για τον έλεγχο και την ποιότητα, την πιστοποίηση, την αναπτυξιακή διαδικασία, την λειτουργία, τη συντήρηση και τη μελλοντική εξέλιξη.

Ιστορικά, οι AD χρησιμοποιούσαν κείμενο και ανεπίσημα διαγράμματα για να μεταδώσουν την αρχιτεκτονική. Ωστόσο, η ποικιλία του ακροατηρίου και οι διαφορετικές πτυχές τους οδήγησαν σε μια ποικιλία αναπαραστάσεων της αρχιτεκτονικής. Συχνά, αυτές οι αναπαραστάσεις είναι εξειδικευμένες βάσει των υφιστάμενων πρακτικών της κοινότητας ή των εμπλεκόμενων επιστημονικών πεδίων για να αντιμετωπίσουν αποτελεσματικά αυτήν την ποικιλία των ενδιαφερομένων και των πτυχών τους (δείτε το γνωστικό πεδίο *Σχεδίαση λογισμικού και μοντέλα και το γνωστικό πεδίο Μέθοδοι μηχανικής λογισμικού*). Αυτές οι διάφορες αναπαραστάσεις ονομάζονται *όψεις αρχιτεκτονικής* (architecture view).

### Όψεις αρχιτεκτονικής και οπτικές

Μια *αρχιτεκτονική όψη* αντιπροσωπεύει ένα ή περισσότερα στοιχεία μιας αρχιτεκτονικής για να αντιμετωπίσει ένα ή περισσότερα θέματα [26*]. Οι όψεις εξυπηρετούν συγκεκριμένα ζητήματα - για παράδειγμα, μια λογική όψη (απεικονίζει πώς το σύστημα θα ικανοποιήσει τις λειτουργικές απαιτήσεις), μια όψη διεργασιών (απεικονίζει πώς το σύστημα θα χρησιμοποιήσει την ταυτόχρονη εκτέλεση), μια φυσική όψη (απεικονίζει πώς το σύστημα θα εγκατασταθεί και θα διανεμηθεί) και μια όψη ανάπτυξης (απεικονίζει πώς ο σχεδιασμός στο επίπεδο του συστήματος χωρίζεται σε μονάδες υλοποίησης, τις εξαρτήσεις ανάμεσα σε αυτές τις μονάδες και πώς θα πρέπει να γίνει η υλοποίηση). Ο διαχωρισμός των θεμάτων με τη χρήση όψεων επιτρέπει στα ενδιαφερόμενα μέρη να επικεντρωθούν σε λίγα θέματα κάθε φορά και προσφέρει έναν τρόπο διαχείρισης της δυνατότητας κατανόησης της αρχιτεκτονικής και της συνολικής πολυπλοκότητας.

Καθώς οι πρακτικές σχεδίασης αρχιτεκτονικής έχουν εξελιχθεί από τη χρήση κειμένου και ανεπίσημων διαγραμμάτων στη χρήση πιο αυστηρών αναπαραστάσεων, κάθε αρχιτεκτονική όψη απεικονίζει αρχιτεκτονικά στοιχεία του συστήματος χρησιμοποιώντας καλά καθορισμένες συνθήκες, σημειώσεις και μοντέλα [26*]. Οι συνθήκες για κάθε όψη καταγράφονται ως *οπτικές αρχιτεκτονικής* (viewpoints) [17]. Οι οπτικές καθοδηγούν τη δημιουργία, την ερμηνεία και τη χρήση των αρχιτεκτονικών όψεων. Κάθε οπτική συνδέει τις πτυχές των ενδιαφερόμενων μερών με ένα σύνολο συνθηκών. Στην αρχιτεκτονική βασισμένη σε μοντέλα, κάθε όψη μπορεί να ελεγχθεί από τον υπολογιστή έναντι της αντίστοιχης οπτικής.

Οι κοινές οπτικές περιλαμβάνουν τη οπτική του module, που χρησιμοποιείται για να εκφράσει την υλοποίηση ενός λογισμικού σε όρους των modules του και της οργάνωσής τους [2*], η οπτική των component και connector, που χρησιμοποιείται για να εκφράσει τη μεγάλη κλίμακα εκτέλεσης του λογισμικού και των αλληλεπιδράσεών του [2*], η λογική οπτική, που χρησιμοποιείται για να εκφράσει θεμελιώδεις έννοιες του πεδίου και της δυνατότητας του λογισμικού [18], η οπτική των σεναρίων / use cases, που χρησιμοποιείται για να εκφράσει τον τρόπο με τον οποίο οι χρήστες αλληλεπιδρούν με το σύστημα [18], η οπτική των πληροφοριών, που χρησιμοποιείται για να εκφράσει τα βασικά στοιχεία πληροφοριών ενός συστήματος και τον τρόπο με τον οποίο προσπελαύνονται και αποθηκεύονται [26*], και η οπτική της ανάπτυξης, που χρησιμοποιείται για να εκφράσει τον τρόπο με τον οποίο ένα σύστημα διαμορφώνεται και αναπτύσεται για λειτουργία [26*]. Άλλες καταγεγραμμένες οπτικές περιλαμβάνουν οπτικές για τη διαθεσιμότητα, συμπεριφορά, επικοινωνία, χειρισμό εξαιρέσεων, απόδοση, αξιοπιστία και ασφάλεια.

Κάθε οπτική παρέχει ένα λεξικό ή μία γλώσσα για τη συζήτηση ενός συνόλου από θέματα και τους μηχανισμούς για την αντιμετώπισή τους. Η γλώσσα της οπτικής δίνει στους ενδιαφερόμενους φορείς ένα κοινό μέσο έκφρασης. Οι οπτικές γωνίες δεν χρειάζεται να περιορίζονται σε ένα σύστημα λογισμικού, αλλά μπορούν να επαναχρησιμοποιηθούν από μια οργάνωση ή μια κοινότητα εφαρμογών για πολλά παρόμοια συστήματα. Όταν χρησιμοποιούνται γενικές αναπαραστάσεις όπως η ενωποιημένη γλώσσα μοντέλων (Unified Modeling Language - UML), μπορούν να εξατομικευτούν σύμφωνα με το σύστημα, τον τομέα του ή τις οργανώσεις που εμπλέκονται. (Δείτε την ενότητα *2.3 Γλώσσες περιγραφής αρχιτεκτονικής και δομές αρχιτεκτονικής.*)

Πέρα από την καθορισμό των μορφών αναπαράστασης, μία οπτική της αρχιτεκτονικής μπορεί να αποτυπώσει τους τρόπους εργασίας μέσα σε μια περιοχή ή κοινότητα πρακτικής εφαρμογής. Για παράδειγμα, μία οπτική αξιοπιστίας λογισμικού αποτυπώνει τις υπάρχουσες πρακτικές από την κοινότητα αξιοπιστίας λογισμικού για την αναγνώριση και ανάλυση θεμάτων αξιοπιστίας, τη διατύπωση εναλλακτικών λύσεων και τη σύνθεση και αναπαράσταση λύσεων. Όπως τα εγχειρίδια μηχανικής, οι ειδικές και εξειδικευμένες οπτικές παρέχουν έναν τρόπο για την τεκμηρίωση επαναλαμβανόμενων ή επαναχρησιμοποιήσιμων προσεγγίσεων σε επαναλαμβανόμενα θέματα λογισμικού. Οι Clements κ. α. έχουν εισαγάγει τα είδη οπτικών που θεσπίζουν μια ομαδοποίηση σε τρεις διαφορετικές κατηγορίες. Αυτές οι κατηγορίες είναι οι οπτικές μονάδας, στοιχείου και σύνδεσης και εκχώρησης [8].

Οι περιγραφές αρχιτεκτονικής συνήθως χρησιμοποιούν *πολλαπλές* όψεις για να αντιπροσωπεύσουν τις διαφορετικές δομές που απαιτούνται για να αντιμετωπιστούν οι διάφορες πτυχές των ενδιαφερομένων φορέων. Υπάρχουν δύο κοινές προσεγγίσεις για τη δημιουργία όψεων: η *συνθετική προσέγγιση* και η *προβαλλόμενη προσέγγιση*. Στη συνθετική προσέγγιση, οι αρχιτέκτονες δημιουργούν όψεις του συστήματος και ενσωματώνουν αυτές τις όψεις σε μια περιγραφή της αρχιτεκτονικής χρησιμοποιώντας κανόνες αντιστοιχίας. Στην προβαλλόμενη προσέγγιση, ένας αρχιτέκτονας εκμαιεύει κάθε όψη μέσω κάποιας συνήθως μηχανική ρουτίνας εξαγωγής από ένα μοντέλο "uber" [17]. Μια συνέπεια της εισαγωγής πολλαπλών όψεων σε μια περιγραφή αρχιτεκτονικής είναι μία πιθανή λάθος σύνδεση μεταξύ των όψεων. Έχουν συνέπεια; Περιγράφουν το ίδιο σύστημα; Αυτό έχει ονομαστεί το *πρόβλημα των πολλαπλών όψεων* [27]. Η προσέγγιση της όψης περιορίζει τις πιθανές ασυνέπειες, καθώς οι όψεις προέρχονται από ένα μόνο (πιθανώς συνεκτικό) μοντέλο, αλλά με κόστος την εκφραστικότητα: το υποκείμενο μοντέλο ενδέχεται να μην είναι ικανό να καλύψει ιδιότυπα θέματα. Με τη συνθετική προσέγγιση, οι αρχιτέκτονες ενσωματώνουν τις όψεις σε ένα σύνολο, χρησιμοποιώντας συνδέσεις ή άλλες μορφές ανίχνευσης, για την αναφορά στοιχείων των όψεων και για να επιτευχθεί συνέπεια. [17, 18] Οι οπτικές συνήθως περιλαμβάνουν κανόνες για την επίτευξη συνέπειας ή άλλων σχέσεων μεταξύ των όψεων.

### Αρχιτεκτονικά στυλ και μοτίβα

Εμπνευσμένο από τη χρήση του στην αρχιτεκτονική κτιρίων, *αρχιτεκτονικό στυλ* είναι ένας συγκεκριμένος τρόπος κατασκευής που παρέχει τα χαρακτηριστικά ενός λογισμικού συστήματος. Ένα αρχιτεκτονικό στυλ συχνά εκφράζει την οργάνωση της μεγάλης κλίμακας ενός συστήματος λογισμικού. Αντίθετα, ένα *αρχιτεκτονικό μοτίβο* εκφράζει μια κοινή λύση σε ένα επαναλαμβανόμενο πρόβλημα μέσα στο πλαίσιο ενός λογισμικού συστήματος. Τα μοτίβα συζητούνται στην ενότητα *4.4 του γνωστικό πεδίου Σχεδίασης Λογισμικού.*

Ανά τα χρόνια έχουν καταγραφεί ποικίλα αρχιτεκτονικά στυλ και μοτίβα [7, 27]:

* Γενικές δομές (π.χ. στωματοποιημένες (layered), κλήσης και επιστροφής (call-and-return), σωλήνες (pipes) και φίλτρα (filters), blackboard, υπηρεσίες (services) και μικρο-υπηρεσίες (microservices))

* Κατανεμημένα συστήματα (π.χ. πελάτης-εξυπηρετητής (client-server), n-επιπέδων (n-tier),
διαμεσολαβητής (broker), δημοσίευση-εγγραφή (publish-subscribe), σημείο με σημείο (point-to-point), αρχέτυπο-αντίγραφο (masterreplica))

* Με υποκίνηση μεθόδου (π.χ. αντικειμενοστραφή (object-oriented), event-driven, ροής δεδομένων (data flow))

* Αλληλεπίδρασης χρήστη-υπολογιστή (π.χ. model-viewcontroller, presentation-abstraction-control)

* Προσαρμοστικά συστήματα (π.χ. microkernel, reflection και
meta-level αρχιτεκτονικές)

* Εικονικές μηχανές (π.χ. διερμηνευτές - interpreters βασισμένες σε κανόνες - rule-based, διαδικασίες ελέγχου - process control) 

Δεν υπάρχει αυστηρός διαχωρισμός μεταξύ αρχιτεκτονικών στυλ και μοτίβων. Ένα αρχιτεκτονικό στυλ περιγράφει τη συνολική δομή ενός συστήματος ή υποσυστήματος και καθορίζει τα κυρίαρχα μέρη ενός (υπο)συστήματος καθώς και τον τρόπο που αλληλεπιδρούν μεταξύ τους. [7, 26 ] Τα αρχιτεκτονικά μοτίβα υπάρχουν σε διάφορα επίπεδα και μπορούν να εφαρμοστούν σε μια αρχιτεκτονική λογισμικού πάνω από μία φορές. Και τα δύο παρέχουν μια λύση για ένα συγκεκριμένο πρόβλημα υπολογιστικής επεξεργασίας σε ένα δεδομένο πλαίσιο. Στην πραγματικότητα, οποιοδήποτε αρχιτεκτονικό στυλ μπορεί να περιγραφεί ως αρχιτεκτονικό μοτίβο. [7]

Σε σχέση με τις οπτικές αρχιτεκτονικής, οι οποίες παρέχουν γλώσσες για να μιλάμε για τις διάφορες πτυχές των συστημάτων λογισμικού, ένα κοινό με τα μοτίβα και τα στυλ αρχιτεκτονικής είναι τα ιδιώματα σε εκείνες τις γλώσσες για να εκφραστούν συγκεκριμένες πτυχές των αρχιτεκτονικών (και σχεδιασμών, βλ. ενότητα *4.4 Σχεδιαστικά μοτίβα στο γνωστικό πεδίο Σχεδιασμό λογισμικού*). Ένα αρχιτεκτονικό μοτίβο ή στυλ χρησιμοποιεί ένα λεξιλόγιο, που αντλείται από τη γλώσσα της οπτικής, με καθορισμένο τρόπο, για να μιλήσει για τα στοιχεία της όψης, συμπεριλαμβανομένων των διάφορων ειδών στοιχείων και σχέσεων, τις αναφορές τους και τους περιορισμούς των συνδιασμών τους [17,27]. Με αυτόν τον τρόπο, οι οπτικές, τα μοτίβα και τα στυλ είναι μηχανισμοί για την κωδικοποίηση συνιστωμένων πρακτικών για διευκόλυνση της επαναχρησιμοποίησης.

### Γλώσσες περιγραφής αρχιτεκτονικής και αρχιτεκτονικά δομές

Μία *γλώσσα περιγραφής αρχιτεκτονικής* (architecture description language - ADL) είναι μια γλώσσα που σχεδιάστηκε ειδικά για να εκφράζει αρχιτεκτονικές λογισμικού. Οι ADLs προέκυψαν από γλώσσες σύνδεσης μονάδων [25] για προγραμματισμό σε μεγάλη κλίμακα. Ορισμένες ADLs απευθύνονται σε ένα μόνο πεδίο εφαρμογής ή αρχιτεκτονικό στυλ (όπως το MetaH για συστήματα αεροναυπηγικής με event-driven στυλ), ενώ άλλες καλύπτουν ένα ευρύ φάσμα θεμάτων ολόκληρης της επιχείρησης (όπως το ArchiMate™). Συχνά, η UML χρησιμοποιείται ως ADL. Οι ADLs παρέχουν συνήθως δυνατότητες πέρα ​​από την περιγραφή, για να επιτρέπουν την ανάλυση της αρχιτεκτονικής ή την παραγωγή κώδικα.

Μία *δομή αρχιτεκτονικής* (architecture framework) καταγράφει τις "συμβάσεις, τις αρχές και τις πρακτικές για την περιγραφή αρχιτεκτονικών που καθιερώνονται εντός ενός συγκεκριμένου τομέα εφαρμογής και / ή κοινότητας ενδιαφερομένων" [17]. Οι δομές καθορίζουν τις καλύτερες πρακτικές εντός ενός συγκεκριμένου τομέα και υλοποιούνται ως ένα αλληλουχούμενο σύνολο από οπτικές ή ADLs. Παραδείγματα είναι το OMG Unified Architecture Framework (UAF®) και το ISO Reference Model for Open Distributed Processing (RM-ODP).

### Η Αρχιτεκτονική ως παράγοντας σημαντικότητας στις αποφάσεις

Η σχεδίαση της αρχιτεκτονικής είναι μία δημιουργική διαδικασία. Κατά τη διάρκεια αυτής, οι αρχιτέκτονες λαμβάνουν πολλές αποφάσεις που επηρεάζουν βαθιά την αρχιτεκτονική, τη διαδικασία ανάπτυξης και το λογισμικό σύστημα. Πολλοί παράγοντες επηρεάζουν τη λήψη αποφάσεων, συμπεριλαμβανομένων των σημαντικότερων πτυχών των ενδιαφερομένων μερών για το λογισμικό σύστημα, των απαιτήσεων τους και των διαθέσιμων πόρων τόσο κατά τη διάρκεια της ανάπτυξης όσο και καθ' όλη τη διάρκεια του κύκλου ζωής. Η επίδραση στα χαρακτηριστικά ποιότητας και οι ανταλλαγές μεταξύ ανταγωνιζόμενων χαρακτηριστικών είναι συχνά η βάση για αποφάσεις σχεδιασμού.

Η δραστηριότητα του αρχιτεκτονικού σχεδιασμού παράγει ως αποτέλεσμα ένα δίκτυο από αποφάσεις, με ορισμένες αποφάσεις να προκύπτουν από άλλες προηγούμενες. Η ανάλυση απόφασης παρέχει μια προσέγγιση για την αξιολόγηση της αρχιτεκτονικής. Οι αποφάσεις πρέπει να τεκμηριώνονται ρητά, μαζί με επεξήγηση της λογικής πίσω από πιο πολύπλοκες αποφάσεις.

Η *λογική της αρχιτεκτονικής* αποτυπώνει τον *λόγο* για τον οποίο πραγματοποιήθηκε μια αρχιτεκτονική απόφαση. Αυτό περιλαμβάνει τις υποθέσεις που έγιναν πριν από την απόφαση, τις εναλλακτικές που εξετάστηκαν και τα trade-offs ή κριτήρια που χρησιμοποιήθηκαν για την επιλογή μιας προσέγγισης και την απόρριψη των υπολοίπων. Η καταγραφή απορριφθέντων αποφάσεων και των αιτιών της απόρριψής τους μπορεί επίσης να είναι χρήσιμη. Στο μέλλον, αυτό μπορεί να αποτρέψει μια κακιά απόφαση κατά την ανάπτυξη λογισμικού, μια που απορρίφθηκε νωρίτερα για λόγους που πλέον δεν θυμόμαστε, ή να αναγνωρίσει ότι οι σχετικές συνθήκες έχουν αλλάξει και ότι μπορούν να επανεξεταστούν οι αποφάσεις.

Το *τεχνικό χρέος* (technical debt) στην αρχιτεκτονική εισήχθη για να αντικατοπτρίζει το γεγονός ότι οι αποφάσεις που λαμβάνονται σήμερα για μια αρχιτεκτονική μπορεί να έχουν σημαντικές συνέπειες αργότερα στον κύκλο ζωής του λογισμικού συστήματος. Οι αποφάσεις μπορούν να δυσκολέψουν τη συντηρησιμότητά ή τη μελλοντική εξέλιξή του συστήματος και αυτό το χρέος θα πρέπει να αποπληρωθεί συνήθως από άλλους και όχι απαραίτητα από αυτούς που το προκάλεσαν. Αυτό το χρέος έχει οικονομικό αντίκτυπο στη μελλοντική ανάπτυξη και λειτουργία του συστήματος. Για παράδειγμα, όταν ένα η ανάπτυξη ενός λογισμικού πιέζεται σε θέμα χρόνου και σχεδιάζετε ένα αρχικό σύστημα με μικρή δυνατότητα διάσπασης  για την πρώτη του έκδοση. Η ανικανότητα διάσπασης των στοιχείων ενός λογισμικού συστήματος επηρεάζει το χρόνο ανάπτυξης για μελλοντικές εκδόσεις, επηρεάζει άλλους προγραμματιστές και πιθανός τη μελλοντική συντηρησιμότητα του συστήματος. Επιπλέον λειτουργικότητα μπορεί να προστεθεί αργότερα μόνο μέσω εκτενούς αναδιαμόρφωσης του συστήματος  που επηρεάζει τον μελλοντικό χρονοπρογραμματισμό και εισάγει επιπλέον ελαττώματα. [19]. Το αρχιτεκτονικό τεχνικό χρέος μπορεί να αναλυθεί και να γίνει διαχειρίσιμο, όπως και άλλες πτυχές, χρησιμοποιώντας μοντέλα και οπτικές [20].

## Η διαδικασία της αρχιτεκτονικής λογισμικού

Αυτή η ενότητα παρουσιάζει ένα γενικό μοντέλο της διαδικασίας σχεδιασμού μίας αρχιτεκτονικής. Χρησιμοποιείται για να δείξει πώς ο σχεδιασμός της αρχιτεκτονικής εντάσσεται στο γενικό πλαίσιο των διαδικασιών μηχανικής λογισμικού (δείτε την ενότητα *Γνωστικό πεδίο μηχανικής λογισμικού*) και αποτελεί ένα πεδίο κατανόησης των πολλών μεθόδων αρχιτεκτονικής που χρησιμοποιούνται σήμερα. Αναγνωρίζετε επίσης ότι ο σχεδιασμός αρχιτεκτονικής μπορεί να λαμβάνει χώρα σε διαφορετικές καταστάσεις.

### Το πλαίσιο της αρχιτεκτονικής

Η αρχιτεκτονική συμβαίνει σε διάφορα πλαίσια. Στο παραδοσιακό κύκλο ζωής, υπάρχει ένα στάδιο αρχιτεκτονικού σχεδιασμού που καθορίζεται από τις απαιτήσεις του λογισμικού (δείτε το *Γνωστικό Πεδίο Απαιτήσεις Λογισμικού*). Ορισμένες απαιτήσεις θα επηρεάσουν τις βασικές αποφάσεις για την αρχιτεκτονική, ενώ άλλες απαιτήσεις θα αναβληθούν για μετέπειτα στάδια της διαδικασίας του λογισμικού, όπως ο σχεδιασμός ή η κατασκευή.

Σε περιβάλλοντα γραμμής προϊόντων ή οικογένειας προϊόντων, αναπτύσσεται μια αρχιτεκτονική για τη γραμμή ή οικογένεια των προϊόντων, βασισμένη σε ένα βασικό σύνολο αναγκών, απαιτήσεων και άλλων παραγόντων. Αυτή η αρχιτεκτονική θα είναι η αφετηρία για ένα ή περισσότερα προϊόντα που θα αναπτυχθούν σύμφωνα με συγκεκριμένες απαιτήσεις βασισμένες στην παραπάνω αρχιτεκτονική.

Στις ευέλικτες (agile) προσεγγίσεις, δεν υπάρχει συνήθως η φάση σχεδιασμού αρχιτεκτονικής. Η μόνη περιγραφή αρχιτεκτονικής μπορεί να είναι ο ίδιος ο κώδικας. Σε άλλες ευέλικτες προσεγγίσεις, η αρχιτεκτονική λογισμικού θεωρείται ότι εμφανίζεται από την κωδικοποίηση του συστήματος βάσει των ιστοριών χρηστών (user stories) μέσω μιας γρήγορης διαδοχής κύκλων ανάπτυξης. Παρόλο που αυτή η προσέγγιση είχε μερική επιτυχία με συστήματα πληροφορικής που εστιάζουν στο χρήστη, είναι δύσκολο να εξασφαλιστεί ότι *προκύπτει* μια επαρκής αρχιτεκτονική για άλλες κατηγορίες εφαρμογών, όπως ενσωματωμένα και cyber-physical συστήματα, όταν κρίσιμες αρχιτεκτονικές ιδιότητες μπορεί να μην αναφέρονται από καμία ιστορία χρήστη.

Σε επιχειρησιακά και συστημάτων-των-συστημάτων (system-of-systems) περιβάλλοντα, όπως στις γραμμές προϊόντων και στις οικογένειες προϊόντων, η καθολική αρχιτεκτονική (της επιχείρησης, του συστήματος ή της γραμμής προϊόντων / οικογένειας) παρέχει βασικές απαιτήσεις και καθοδήγηση στη μορφή και τους περιορισμούς της αρχιτεκτονικής του λογισμικού. Αυτή η κοινή βάση μπορεί να επιβληθεί μέσω προδιαγραφών, πρόσθετων απαιτήσεων, διεπαφών προγραμματισμού εφαρμογών (APIs) ή κανόνων συμμόρφωσης.

#### Σχέση αρχιτεκτονικής και σχεδιασμού

Ο σχεδιασμός και η αρχιτεκτονική συχνά συγχέονται. Λέγεται πως η αρχιτεκτονική είναι το σύνολο των αποφάσεων που δεν μπορούμε να εμπιστευτούμε τους σχεδιαστές. Στην πραγματικότητα, η αρχιτεκτονική προέκυψε από τον σχεδιασμό λογισμικού καθώς οι αρχές ωρίμαζαν, κυρίως από τη δεκαετία του 1990. Υπάρχουν διάφορες αντιθέσεις: Ο σχεδιασμός συχνά επικεντρώνεται σε ένα καθορισμένο σύνολο απαιτήσεων, ενώ η αρχιτεκτονική συχνά πρέπει να διαμορφώσει τις απαιτήσεις μέσω της διαπραγμάτευσης με τα ενδιαφερόμενα μέρη και της ανάλυσης απαιτήσεων. Επιπλέον, η αρχιτεκτονική συχνά πρέπει να αναγνωρίζει και να αντιμετωπίζει ένα ευρύτερο φάσμα πτυχών που ενδέχεται να καταλήξουν ως απαιτήσεις στο λογισμικό που εξετάζεται.

### Σχεδιασμός αρχιτεκτονικής

Ο σχεδιασμός της αρχιτεκτονικής είναι η εφαρμογή αρχών σχεδίασης και μεθόδων σε ένα διαδικαστικό πλαίσιο για τη δημιουργία και την τεκμηρίωση της αρχιτεκτονικής. Υπάρχουν πολλές μέθοδοι αρχιτεκτονικής για την εκτέλεση αυτής της δραστηριότητας. Αυτή η ενότητα περιγράφει ένα γενικό μοντέλο σχεδιασμού της αρχιτεκτονικής και δείχνει διάφορες μεθόδους αρχιτεκτονικής, βασισμένη στο [14].

Ο σχεδιασμός της αρχιτεκτονικής αφορά την αναγνώριση των κύριων συστατικών ενός συστήματος, των ευθυνών τους, των ιδιοτήτων και διεπαφών τους, καθώς και των σχέσεων και αλληλεπιδράσεων μεταξύ αυτών και του περιβάλλοντος. Κατά τον σχεδιασμό, καθορίζονται οι βασικές αρχές του συστήματος, αλλά για άλλες πτυχές, όπως οι εσωτερικές λεπτομέρειες των κύριων συστατικών, αναβάλλεται η περιγραφή τους.

Τυπικές πτυχές που αφορούν τον σχεδιασμό είναι:

    * Συνολικά στυλ αρχιτεκτονικής και θπολογιστικά παραδείγματα 
    * Μεγάλης κλίμακας διαχωρισμός του συστήματος σε βασικά μέρη
    * Επικοινωνία και αλληλεπίδραση μεταξύ των μερών
    * Ανάθεση των πτυχών και των ευθυνών του σχεδιασμού στα διαφορετικά μέρη
    * Διεπαφές των διαφορετικών μερών 
    * Κατανόηση και ανάλυση των χαρακτηριστικών επέκτασης και απόδοσης, κατανάλωσης πόρων και εμπιστοσύνης 
    * Μεγάλης κλίμακας/ολόκληρου του συστήματος προσεγγίσεις τψν κυρίαρχων πτυχών (όπως η ασφάλεια, όπου εφαρμόζεται)

Μία γενική εικόνα του σχεδιασμού αρχιτεκτονικής φαίνεται στο διάγραμμα (σχ. 3).

Σχ. 3. Ένα γενικό μοντέλο της αρχιτεκτονικής σχεδίασης

Ο σχεδιασμός της αρχιτεκτονικής συμβαίνει επαναλληπτικά και απαρτίζεται από τρεις κύριες δραστηριότητες: ανάλυση, σύνθεση και αξιολόγηση. Συχνά και οι τρεις αυτές δραστηριότητες συμβαίνουν ταυτόχρονα σε διάφορα επίπεδα λεπτομέρειας.

![Σχήμα 2 Ένα γενικό μοντέλο αρχιτεκτονικού σχεδιασμού.](images/2.2-SoftArch.png)

#### Ανάλυση αρχιτεκτονικής

Η ανάλυση της αρχιτεκτονικής συγκεντρώνει και δημιουργεί τις απαιτήσεις της αρχιτεκτονικής (συχνά αναφέρεται ως "αρχιτεκτονικά σημαντικές απαιτήσεις" - architecturally
significant requirements ή ASRs): κάθε "απαίτηση από το σύστημα λογισμικού που επηρεάζει την αρχιτεκτονική" [22]. Η ανάλυση της αρχιτεκτονικής βασίζεται σε αναγνωρισμένες πτυχές και στην κατανόηση του πλαισίου τους συστήματος, συμπεριλαμβανομένων των απαιτήσεων, των αναγκών που έχουν τα ενδιαφερόμενα μέρη και των περιορισμών του περιβάλλοντος. Οι ASRs δείχνουν τα σχεδιαστικά προβήματα που πρέπει να λυθούν. Ο συνδιασμός των αρχικών απαιτήσεων και των γνωστών περιορισμών δεν μπορούν να ικανοποιηθούν χωρίς να μεταβάλλετε το κόστος, το χρονοδιάγραμμα κλπ. Σε τέτοιες περιπτώσεις γίνεται διαπραγμάτευση για την μεταβολλή των εισερχόμενων αναγκών, των απαιτήσεων και των δυνατών λύσεων. Η ανάλυση της αρχιτεκτονικής παράγει ASRs, αρχικές αποφάσεις για όλο το σύστημα και αρχές του συστήματος που προκύπτουν από το πλαίσιο (δείτε την ενότητα *Το πλαίσιο της αρχιτεκτονικής*).

#### Σύνθεση αρχιτεκτονικής

Η σύνθεση της αρχιτεκτονικής φτιάχνει υποψήφιες λύσεις ως απάντηση στα αποτελέσματα της ανάλυσης. Στη συνέχεια η διαδικασία της σύνθεσης ξεκινάει την δημιουργία σύνθετων λύσεων στα προβλήματα σχεδιασμού που εντοπίστηκαν από τις ASRs και κάνει ανταλλαγές για να υποστηρίξει την αλληλεπίδραση μεταξύ των διαφορετικών λύσεων. Αυτό οδηγεί σε ανατροφοδότηση της ανάλυσης της αρχιτεκτονικής και επιφέρει σύνθετες ASRs, αρχές και αποφάσεις που με τη σειρά τους οδηγούν σε επιπλέον σύνθετες λύσεις.

#### Αξιολόγηση αρχιτεκτονικής

Η αξιολόγηση της αρχιτεκτονικής επιβεβαιώνει πόσο ικανοποιητική είναι η τρέχουσα λύση για τις ASRs και που και πότε χρειάζονται αλλαγές. Οι μέθοδοι αξιολόγησης της αρχιτεκτονικής συζητιούνται περεταίρω στην ενότητα *Αξιολόγηση αρχιτεκτονικής λογισμικού*.

### Πρακτικές αρχιτεκτονικής, μέθοδοι και τακτικές

Υπάρχει ένας μεγάλος αριθμός καταγεγραμένων μεθόδων αρχιτεκτονικής (δείτε το *Συμπληρωματικό υλικό* για την εκτενή λίστα).

### Γενικό πλαίσιο της αρχιτεκτονικής

Ο σχεδιασμός της αρχιτεκτονικής διακρίνεται ως ένα συγκεκριμένο στάδιο του κύκλου ζωής του συστήματος, όμως είναι ένα μόνο μέρος της αρχιτεκτονικής λογισμικού. Η αρχιτεκτονική λογισμικού δεν συμβαίνει μεμονομένα, όπως αναφέρεται και στην ενότητα *Το πλαίσιο της αρχιτεκτονικής*, αλλά σε ένα περιβάλλον που συχνά περιλαμβάνει και άλλες αρχιτεκτονικές. Για παράδειγμα, η αρχιτεκτονική μίας εφαρμογής πρέπει να ακολουθεί της γενική αρχιτεκτονική της εταιρείας, να "ταιριάζει καλά" σε ένα σύστημα που αποτελείται από άλλα συστήματα, όπου η αρχιτεκτονική κάθε ενός συστήματος πρέπει να ακολουθεί την αρχιτεκτονική του συστήματος συστημάτων. Σε τέτοιες περιπτώσεις, αυτές οι συσχετίσεις πρέπει να φαίνονται στις ASRs του συστήματος. Πολλές δραστηριότητες της αρχιτεκτονικής λογισμικού και αρχές δεν περιορίζονται στο λογισμικό και μπορούν να εφαρμοστούν εξίσου σε άλλα συστήματα και στην αρχιτεκτονική	της εταιρείας [21]. Οι Weinreich και Buchgeher έχουν προεκτείνει το μοντέλο των Hofmeister κ.α. που χρησιμοποιήθηκε στην ενότητα *Σχεδιασμός αρχιτεκτονικής* για να περιλαμβάνει και τις παρακάτω δραστηριότητες [29]:
    
    * Υλοποίηση αρχιτεκτονικής: επίβλεψη της υλοποίησης και επιβεβαίωση πως η υλοποίηση ταιριάζει με την αρχιτεκτονική
    * Συντήρηση αρχιτεκτονικής: Διαχείρηση και προέκταση της αρχιτεκτονικής μετά την υλοποίηση
    * Διαχείρηση αρχιτεκτονικής: Διαχείρηση της συλλογής διαφορετικών συμπλεκόμενων αρχιτεκτονικών της εταιρείας
    * Διαχείρηση της γνώσης της αρχιτεκτονικής: Εξαγωγή, συντήρηση, διαμοιρασμός και αξιοποίηση επαναχρησιμοποιούμενων αρχιτεκτονικών αποκτημάτων, συμπεριλαμβανομένων των αποφάσεων, των μαθημάτων από προηγούμενες αποφάσεις, των εξακριβώσεων και της καταγραφής μέσα σε όλο τον οργανισμό

## Αξιολόγηση αρχιτεκτονικής λογισμικού

### Θετικά χαρακτηριστικά αρχιτεκτονικής

Η *ανάλυση της αρχιτεκτονικής* λαμβάνει χώρα καθ' όλη τη διαδικασία δημιουργίας και διατήρησης μιας αρχιτεκτονικής. Η *αξιολόγηση της αρχιτεκτονικής* γίνεται συνήθως από τρίτους με καθορισμένα ορόσημα ως μέσο αξιολόγησης.

Λαμβάνοντας υπόψη τις πολλές πτυχές και τις πολλές αρχές της αρχιτεκτονικής λογισμικού, υπάρχουν πολλά στοιχεία που καθιστούν μια αρχιτεκτονική "καλή". Ο Ρωμαίος αρχιτέκτονας Βιτρούβιος πρότεινε ότι όλα τα κτίρια πρέπει να έχουν τα χαρακτηριστικά της *firmitas* (αντοχή), *utilitas* (χρησιμότητα) και *venustas* (ομορφιά). 

Για ένα λογισμικό σύστημα και την αρχιτεκτονική του, μπορούμε να αναρωτηθούμε:

    * Είναι ανθεκτικό κατά τη διάρκεια του χρόνου και της πιθανής εξέλιξής του;
    * Είναι κατάλληλο για την προοριζόμενη χρήση του;
    * Είναι εφικτή και οικονομικά αποδοτική η κατασκευή λογισμικών συστημάτων χρησιμοποιώντας αυτήν την αρχιτεκτονική;
    * Είναι, αν όχι όμορφη, ξεκάθαρη και κατανοητή από αυτούς που πρέπει να κατασκευάσουν, να χρησιμοποιήσουν και να διατηρήσουν το λογισμικό;

Κάθε πτυχή της αρχιτεκτονικής μπορεί να αποτελέσει βάση για αξιολόγηση. Η αξιολόγηση πραγματοποιείται σύμφωνα με τις απαιτήσεις (όταν είναι διαθέσιμες) ή σύμφωνα με τις ανάγκες, προσδοκίες και πρότυπα (σε άλλες περιπτώσεις). Μια "καλή" αρχιτεκτονική πρέπει να αντιμετωπίζει όχι μόνο τις ξεχωριστές πτυχές των ενδιαφερομένων μερών, αλλά και τις συνέπειες των αλληλεπιδράσεών τους. Για παράδειγμα: μια ασφαλής αρχιτεκτονική μπορεί να είναι υπερβολικά δαπανηρή για την κατασκευή και επαλήθευσή της. Μια εύκολη στην κατασκευή αρχιτεκτονική μπορεί να μην είναι διατηρήσιμη κατά τη διάρκεια ζωής του συστήματος αν δεν μπορεί να ενσωματώσει νέες τεχνολογίες. Η αναφορά SARA παρέχει ένα γενικό πλαίσιο για την αξιολόγηση της αρχιτεκτονικής λογισμικού [22].

### Αιτιολόγηση των αρχιτεκτονικών

Κάθε πτυχή της αρχιτεκτονικής έχει ξεχωριστή βάση για αξιολόγηση. Η αξιολόγηση είναι πιο αποτελεσματική όταν βασίζεται σε αξιόπιστες, υφιστάμενες περιγραφές αρχιτεκτονικής. Οι ADs μπορούν να αναζητηθούν, να εξεταστούν και να αναλυθούν. Για παράδειγμα, η αξιολόγηση της λειτουργικότητας ή τα ωφελεί της συμπεριφοράς από την ύπαρξη μιας αρχιτεκτονικής όψης ή άλλης αναπαράστασης για αυτήν την πτυχή του συστήματος προς μελέτη. Εξειδικευμένες πτυχές, όπως η αξιοπιστίακαι η ασφάλεια, συχνά βασίζονται σε εξειδικευμένες αναπαραστάσεις από την αντίστοιχη αρχή.

Συχνά η τεκμηρίωση της αρχιτεκτονικής είναι ανεπαρκής, ατελής, μη ενημερωμένη ή ανύπαρκτη. Σε τέτοιες περιπτώσεις, η προσπάθεια αξιολόγησης πρέπει να βασίζεται στη γνώση των συμμετεχόντων ως κύρια πηγή πληροφοριών.

Συχνά χρησιμοποιούνται περιπτώσεις χρήσης για να ελέγξουν την ολοκλήρωση και τη συνέπεια μιας αρχιτεκτονικής (δείτε την ενότητα *Τεχνικά Μοντέλα και Μέθοδοι Μηχανικής Λογισμικού*) συγκρίνοντας τα βήματα στην περίπτωση χρήσης με τα στοιχεία της αρχιτεκτονικής λογισμικού που θα εμπλέκονταν στην εκτέλεση αυτών των βημάτων [17].

Για ένα γενικό πλαίσιο για τον σκεπτικισμό σχετικά με τις διάφορες πτυχές, ανατρέξτε στο Bass κ.α. [3].

### Αναφορές αρχιτεκτονικών

Οι αναφορές της αρχιτεκτονικής είναι μια αποτελεσματική προσέγγιση για την αξιολόγηση της κατάστασης και της ποιότητας μιας αρχιτεκτονικής και την αναγνώριση των κινδύνων μέσω της αναγνώρισης ενός ή περισσοτέρων πτυχών [1]. Πολλές αναφορές είναι ανεπίσημες ή βασισμένες στην εμπειρία, και κάποιες είναι πιο δομημένες, οργανωμένες γύρω από μία λίστα ελέγχου θεμάτων που πρέπει να καλυφθούν. Οι Parnas και Weiss πρότειναν μια αποτελεσματική προσέγγιση για τη διεξαγωγή αναφορών, που ονομάζεται *ενεργές αναφορές* [24], όπου αντί για λίστες ελέγχου, κάθε στοιχείο αξιολόγησης περιλαμβάνει μια συγκεκριμένη δραστηριότητα από έναν ελεγκτή για να αποκτηθούν οι απαιτούμενες πληροφορίες.

Πολλοί οργανισμοί έχουν θεσμοθετήσει πρακτικές αναφοράς αρχιτεκτονικών. Για παράδειγμα, μια ομάδα της βιομηχανίας ανέπτυξε ένα πλαίσιο για τον καθορισμό, τη διεξαγωγή και την τεκμηρίωση των αναφορών αρχιτεκτονικής και των αποτελεσμάτων τους [22].

### Μετρικές αρχιτεκτονικής

Μία *μετρική αρχιτεκτονικής* είναι μια ποσοτική μέτρηση ενός χαρακτηριστικού μιας αρχιτεκτονικής. Έχουν καθοριστεί διάφορες μετρικές αρχιτεκτονικής. Πολλές από αυτές προήλθαν ως μετρικές σχεδίασης ή κώδικα που έχουν "μεταφερθεί" για να εφαρμοστούν στην αρχιτεκτονική. Οι μετρικές περιλαμβάνουν την εξάρτηση των μερών (component dependency), την κυκλικότητα και την κυκλωματική πολυπλοκότητα (cyclicity and cyclomatic
complexity), την εσωτερική πολυπλοκότητα μίας μονάδας ( internal module complexity), τον συγκλείσμο και την συνοχή των μονάδων (module coupling and
cohesion), τα επίπεδα εμφώλευσης (levels of nesting) και τη συμμόρφωση (compliance) με τη χρήση προτύπων, στυλ και (απαιτούμενων) APIs.

Σε παραδείγματα συνεχούς ανάπτυξης (όπως το DevOps), έχουν εξελιχθεί άλλες μετρικές που επικεντρώνονται όχι απευθείας στην αρχιτεκτονική, αλλά στην αποκρισιμότητα της διαδικασίας, όπως οι μετρικές για τον χρόνο προετοιμασίας για αλλαγές (lead time for changes), τη συχνότητα της αναπτύξεως (deployment frequency), τον μέσο χρόνο αποκατάστασης της υπηρεσίας (mean time to restore service) και συντελεστής αποτυχίας αλλαγής (change failure rate) - ως ένδειξη της κατάστασης της αρχιτεκτονικής.

## Πίνακας: Αντικείμενα vs Αναφερόμενο υλικό

|   | **Bass κ.α. [2*]**  | **Budgen [6*]**  |  **Rozanski Woods [26*]** |  **Sommerville [28*]** |  **Δείτε επίσης** |
|---|---|---|---|---|---|
| **Βασικές αρχές της αρχιτεκτονικής λογισμικού**  |   |   | c2  |   |   |
| Η αίσθηση της αρχιτεκτονικής  | c1  |   |   |   | [21]  |
| Ενδιαφερόμενοι φορείς και πτυχές  | c3-14  |   | c8, c9  |   | [17]  |
| Ρόλοι αρχιτεκτονικής  |  c24 |   | c30  |   |   |
| **Περιγραφή αρχιτεκτονικής λογισμικού**  | c22  |   | όλα  | c6  |  [17] |
| Όψεις αρχιτεκτονικής και οπτικές  |   |  c7 | c3, c12, c13  | c6.2  |   |
| Αρχιτεκτονικά στυλ και μοτίβα  |   | c6  | c11  | c6.3  | [7]  |
| Γλώσσες περιγραφής αρχιτεκτονικής και αρχιτεκτονικά δομές  |   |   |   |   | [17]  |
| Η Αρχιτεκτονική ως παράγοντας σημαντικότητας στις αποφάσεις  |   |   | c8  | c6.1  | [17]  |
| **Η διαδικασία της αρχιτεκτονικής λογισμικού**  |   |   | c7  |   |   |
| Το πλαίσιο της αρχιτεκτονικής  |   |   |   |   | [21]  |
| Σχεδιασμός αρχιτεκτονικής  | c19-20  |   |   |   | [14]  |
| Πρακτικές αρχιτεκτονικής, μέθοδοι και τακτικές  |   |   |   |   | δείτε το Συμπληρωματικό υλικό  |
| Γενικό πλαίσιο της αρχιτεκτονικής  |   |   |   |   | [21]  |
| **Αξιολόγηση αρχιτεκτονικής λογισμικού**  | c21  |   | c14  |   | [22, 24]  |
| Θετικά χαρακτηριστικά αρχιτεκτονικής  | c2  |   |   |   | [3]  |
| Αιτιολόγηση των αρχιτεκτονικών  |   |   | c10  |   | [3]  |
| Αναφορές αρχιτεκτονικών  | c21  |   |   |   |   |
| Μετρικές αρχιτεκτονικής  | c23  |   |   |   |   |

## Συμπληρωματικό υλικό

### Bass κ.α., Software Architecture in Practice [2*]

Αυτό το βιβλίο παρουσιάζει έννοιες και συνιστώμενες πρακτικές
της αρχιτεκτονικής λογισμικού, δηλαδή πώς είναι δομημένο το
λογισμικό και πώς αλληλεπιδρούν οι συστατικές του. Το βιβλίο
αναλύει λεπτομερώς αρκετά θέματα ποιότητας, συμπεριλαμβανομένων:
διαθεσιμότητα, δυνατότητα ανάπτυξης, αποδοτικότητα σε ενέργεια, ευκολία τροποποίησης, απόδοση, δυνατότητα δοκιμής και χρηστοποίηση. Οι συγγραφείς προτείνουν συνιστώμενες πρακτικές που επικεντρώνονται στον αρχιτεκτονικό σχεδιασμό, την περιγραφή της αρχιτεκτονικής, την αξιολόγηση της αρχιτεκτονικής και τη διαχείριση του τεχνικού χρέους της αρχιτεκτονικής. Επίσης, τονίζουν τη σημασία του επιχειρηματικού πλαισίου στο οποίο σχεδιάζεται το μεγάλης
κλίμακας λογισμικό. Με αυτόν τον τρόπο, παρουσιάζουν την
αρχιτεκτονική λογισμικού σε ένα πραγματικό περιβάλλον, δείχνοντας τις ευκαιρίες και τους περιορισμούς που συναντούν οι οργανισμοί.

### Kruchten, The 4+1 View Model of Architecture [17].

Αυτό το κλασικό άρθρο οργανώνει μια προσέγγιση για την περιγραφή της αρχιτεκτονικής χρησιμοποιώντας πέντε οπτικές γωνίες της αρχιτεκτονικής. Οι πρώτες τέσσερις χρησιμοποιούνται για να παράξουν τη λογική όψη, την όψη ανάπτυξης, τη διαδικασία όψης και τη φυσική όψη. Αυτές ενσωματώνονται μέσω επιλεγμένων περιπτώσεων χρήσης ή σεναρίων για να επιδείξουν την αρχιτεκτονική. Έτσι, το μοντέλο οδηγεί σε 4+1 όψεις. Οι όψεις χρησιμοποιούνται για να περιγράψουν το λογισμικό όπως το φαντάζονται διάφοροι ενδιαφερόμενοι φορείς - όπως οι τελικοί χρήστες, οι προγραμματιστές και οι διαχειριστές έργων.

### Rozanski και Woods, Software Systems Architecture [24*]

Αυτό είναι ένα εγχειρίδιο για τον αρχιτέκτονα συστημάτων λογισμικού. Αναπτύσσει βασικές έννοιες του ενδιαφερόμενου φορέα, του προβληματισμού, της περιγραφής της αρχιτεκτονικής, της όψης της αρχιτεκτονικής και της αρχιτεκτονικής προβολής, των προτύπων και των στυλ αρχιτεκτονικής, με παραδείγματα. Παρέχει μία ολοκληρωμένη διαδικασία αρχιτεκτονικής. Οι συγγραφείς παρέχουν έναν κατάλογο έτοιμων για χρήση, πρακτικών οπτικών γωνιών που ο αρχιτέκτονας μπορεί να χρησιμοποιήσει και που είναι εφαρμόσιμες σε μια ευρεία γκάμα συστημάτων. Το βιβλίο περιέχει καθοδήγηση για την εφαρμογή αυτών των έννοιων και μεθόδων.

### Clements

Αυτό το βιβλίο παρέχει λεπτομερή καθοδήγηση για την καταγραφή αρχιτεκτονικών λογισμικού, χρησιμοποιώντας καθοδήγηση και παραδείγματα για να εκφράσει μια αρχιτεκτονική έτσι ώστε οι ενδιαφερόμενοι φορείς να μπορούν να κατασκευάσουν, να χρησιμοποιήσουν και να συντηρήσουν το σύστημα αυτό. Το βιβλίο παρουσιάζει μια τριχιλιομετρική κατηγοριοποίηση των προβολών και, επομένως, των όψεων: σε ενότητες, συστατικά και διασυνδέσεις που ονομάζονται τύποι προβολής, παρέχοντας πολλά παραδείγματα για κάθε έναν από αυτούς.

### Brown, Software Architecture for Developers [5]

Ο Brown παρέχει μια επισκόπηση των θεμάτων της αρχιτεκτονικής λογισμικού από την προοπτική ενός προγραμματιστή. Συζητά τους κοινούς κινητήρες της αρχιτεκτονικής (λειτουργικές απαιτήσεις, ποιοτικές πτυχές, περιορισμούς και αρχές αρχιτεκτονικής). Έχει μια εμβαθυμένη συζήτηση για τον ρόλο του αρχιτέκτονα σε ένα περιβάλλον ανάπτυξης και τις απαραίτητες γνώσεις και δεξιότητες για τους αρχιτέκτονες. Επικεντρώνεται στα πρακτικά ζητήματα της αρχιτεκτονικής στη διαδικασία παράδοσης και στη διαχείριση του κινδύνου. Ένα παράρτημα παρέχει μια μελέτη περίπτωσης.

### Fairbanks, Just Enough Software Architecture: A riskdriven approach [12]

Ο Fairbanks προσφέρει μια προσέγγιση που βασίζεται στον κίνδυνο για την αρχιτεκτονική στο πλαίσιο της ανάπτυξης: να κάνετε ακριβώς την αρχιτεκτονική λογισμικού που απαιτείται για να αντιμετωπιστούν οι εντοπισμένοι κίνδυνοι όπου αυτοί οι κίνδυνοι μπορεί να προκύψουν από ένα μικρό χώρο λύσης, από απαιτητικές ποιοτικές απαιτήσεις ή από πιθανές υψηλού κινδύνου αποτυχίες. Η προσέγγιση που βασίζεται στον κίνδυνο είναι συμβατή με πρακτικές χαμηλής τελετουργίας και ευέλικτες προσεγγίσεις. Η αρχιτεκτονική, όπως υποστηρίζει ο Fairbanks, δεν αφορά μόνο τους αρχιτέκτονες - αλλά είναι σημαντική για όλους τους προγραμματιστές.

### Erder, Pureur και Woods, Continuous Architecture in
Practice: Software Architecture in the Age of Agility and
DevOps. [11]

Αυτό το βιβλίο δείχνει πώς η "κλασική" σκέψη για την αρχιτεκτονική λογισμικού έχει εξελιχθεί στον σύγχρονο κόσμο στο πλαίσιο των προσεγγίσεων λογισμικού ανάπτυξης που βασίζονται στην ευελιξία, στον υπολογισμό στο νέφος και στην προσέγγιση της ανάπτυξης λογισμικού DevOps, παρέχοντας πρακτικές κατευθυντήριες γραμμές για μια σειρά από ζητήματα ποιότητας και διασταυρούμενων πτυχών, συμπεριλαμβανομένης της ασφάλειας, της ανθεκτικότητας, της κλιμακωσιμότητας και της ενσωμάτωσης νέων τεχνολογιών.

## Αναφορές

