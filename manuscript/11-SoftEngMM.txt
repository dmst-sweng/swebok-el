# Κεφάλαιο 11 Μοντέλα και μέθοδοι τεχνολογίας λογισμικού {#modmethdssofteng}


## Ακρωνύμια

|3GL	|3rd Generation Language	   |
|BNF	|Backus-Naur Form		   |
|FDD	|Feature-Driven Development	   |
|IDE	|Integrated Development Environment|
|PBI	|Product Backlog Item  		   |
|RAD	|Rapid Application Development	   |
|UML	|Unified Modeling Language	   |
|XP	|eXtreme Programming		   |


## Εισαγωγή

Τα μοντέλα και οι μέθοδοι μηχανικής λογισμικού επιβάλλουν δομή στην τεχνολογία λογισμικού για να κάνουν την δραστηριότητα
συστηματική, επαναλαμβανομένη και τελικά πιο προσανατολισμένη στην επιτυχία. Τα μοντέλα παρέχουν μια προσέγγιση 
στην επίλυση προβλημάτων, μια σημειογραφεία και διαδικασίες για την κατασκευή και την ανάλυση μοντέλων. 
Οι μέθοδοι παρέχουν μια προσέγγιση στη συστηματική προδιαγραφή, σχεδιασμό, κατασκευή, έλεγχο και επαλήθευση 
του τελικού λογισμικού και των συσχετιζόμενων με αυτό προϊόντων εργασίας.

Οι μέθοδοι και τα μοντέλα τεχνολογίας λογισμικού διαφέρουν σημαντικά στο εύρος τους - από 
την διαχείριση μιας μοναδικής φάσης του κύκλου ζωής του λογισμικού μέχρι και την κάλυψη 
ολοκλήρου του κύκλου ζωής του λογισμικού. Αυτό το γνωστικό πεδίο(ΓΠ) επικεντρώνεται
σε μοντέλα και μεθόδους τα οποία περιλαμβάνουν πολλαπλές φάσεις του κύκλου ζωής του 
λογισμικού, καθώς άλλα γνωστικά πεδία καλύπτουν μεθόδους ειδικές για μια μόνο φάση του κύκλου ζωής.

## Κατανομή των θεμάτων για τα μοντέλα και τις μεθόδους τεχνολογίας λογισμικού

Αυτό το κεφάλαιο των μοντέλων και μεθόδων τεχνολογίας λογισμικού χωρίζεται
σε τέσσερα βασικά μέρη.

  * Η *μοντελοποίηση* αναφέρεται στην γενική πρακτική της μοντελοποίησης
  και παρουσιάζει θέματα στις αρχές της μοντελοποίησης, στις ιδιοτήτων και στην έκφραση
  των μοντέλων, στην σύνταξη της μοντελοποίησης, της σημασιολογία και της πραγματολογίας
  και στις προϋποθέσεις, μετασυνθήκες και σταθερές.
  * Οι *τύποι μοντέλων* αναφέρονται εν μέρει στα μοντέλα και στην συγκέντρωση
  υπομοντέλων και παρέχουν γενικά χαρακτηριστικά των τύπων μοντέλων που συναντώνται συνήθως 
  στην πρακτική της τεχνολογίας λογισμικού.
  * Η *ανάλυση μοντέλων* παρουσιάζει κοινές τεχνικές ανάλυσης που χρησιμοποιούνται στην μοντελοποίηση 
  για την επαλήθευση της πληρότητας, της συνέπειας , της ορθότητας της ανιχνευσιμότητας και της αλληλεπίδρασης.
  * Οι *μέθοδοι τεχνολογίας λογισμικού* παρουσιάζουν ένα σύνολο από κοινά χρησιμοποιούμενες 
  μεθόδους τεχνολογίας λογισμικού. Η συζήτηση καθοδηγεί τον αναγνώστη μέσα από μια περίληψη ευρετικών
  μεθόδων, επίσημων μεθόδων, πρωτότυπων και ευέλικτων μεθόδων.

Η κατανομή των θεμάτων για το Γνωστικό Πεδίο των Μοντέλων και Μεθόδων Τεχνολογίας Λογισμικού απεικονίζεται στο Σχήμα 1.

{id="fig-softengmm-tree"}
![Σχήμα 1 Κατανομή των Θεμάτων στο Γνωστικό Πεδίο των Μοντέλων και των Μεθόδων Τεχνολογίας Λογισμικού.](images/11-SoftEngMM.png)

## Μοντελοποίηση 

Η μοντελοποίηση του λογισμικού γίνεται μια επικρατούσα τεχνική για να βοηθήσει τους μηχανικούς λογισμικού
να κατανοήσουν, να σχεδιάσουν και να επικοινωνήσουν τις πτυχές του λογισμικού στα κατάλληλα
ενδιαφερόμενα μέλη. *Ενδιαφερόμενα μέλη* είναι οι άνθρωποι ή οι ομάδες που έχουν δηλώσει ή υπονοούν το ενδιαφέρον τους
για το λογισμικό (π.χ. οι χρήστες, οι αγοραστές, οι προμηθευτές, οι σχεδιαστές της αρχιτεκτονικής του λογισμικού, 
οι αρχές πιστοποίησης, οι αξιολογητές, οι προγραμματιστές, οι μηχανικοί λογισμικού). Ενώ υπάρχoυν πολλές γλώσσες, 
σημειογραφίες, τεχνικές και εργαλεία μοντελοποίησης στην βιβλιογραφία και στην πράξη, υπάρχουν κάποιες γενικές, ενοποιητικές 
έννοιες που ισχύουν για όλες αυτές. Οι ακόλουθες ενότητες παρέχουν πληροφορίες για αυτές τις γενικές έννοιες.

### *Αρχές Mοντελοποίησης*

Η μοντελοποίηση παρέχει στον μηχανικό του λογισμικού μια
οργανωμένη και συστηματική προσέγγιση για την αναπαράσταση σημαντικών πτυχών του λογισμικού που εξετάζεται, 
διευκολύνοντας τη λήψη αποφάσεων σχετικά με το λογισμικό ή τα στοιχέια του, και την επικοινωνία αυτών των σημαντικών αποφάσεων σε 
άλλους στις κοινότητες των ενδιαφερόμενων. Τρεις γενικές αρχές που διέπουν τις εν λόγω δραστηριότητες μοντελοποίησης:

  * *Μοντελοποίηση των απαραίτητων*: Τα καλά μοντέλα συνήθως δεν αναπαριστούν
  κάθε πτυχή ή χαρακτηριστικό του λογισμικού σε κάθε πιθανή συνθήκη.
  Η μοντελοποίηση συνήθως περιλαμβάνει μόνο εκείνες τις πτυχές ή χαρακτηριστικά που προκαλούν συγκεκριμένες ερωτήσεις, 
  αφαιρώντας οποιαδήποτε μη ουσιώδη πληροφορία. Αυτή η προσέγγιση διατηρεί τα μοντέλα διαχειρίσιμα και χρήσιμα.
  * *Παροχή προοπτικής*: Η μοντελοποίηση παρέχει προβολές του λογισμικού που μελετάται χρησιμοποιώντας καθορισμένους κανόνες για 
  την έκφραση του μοντέλου εντός κάθε προβολής. Αυτή η προσέγγιση που βασίζεται στην προοπτική παρέχει διάσταση στο μοντέλο (π.χ. 
  παρέχοντας μια δομική προβολή, μια συμπεριφορική προβολή, μια χρονική προβολή, μια οργανωτική προβολή και/ή άλλες προβολές εάν είναι σχετικές). 
  Η οργάνωση των πληροφοριών σε προβολές επικεντρώνει τις προσπάθειες μοντελοποίησης λογισμικού σε συγκεκριμένες ανησυχίες σχετικές 
  με αυτήν την προβολή χρησιμοποιώντας την κατάλληλη σημειογραφία, το λεξιλόγιο, τις μεθόδους και τα εργαλεία.
  * *Ενεργοποίηση αποτελεσματικών επικοινωνιών*: Η μοντελοποίηση χρησιμοποιεί το λεξιλόγιο του τομέα εφαρμογής του λογισμικού, 
  μια γλώσσα μοντελοποίησης και σημασιολογική έκφραση (δηλαδή, τη σημασία εντός του γενικού πλαισίου). Όταν χρησιμοποιείται 
  με αυστηρότητα και συστηματικότητα, η μοντελοποίηση οδηγεί σε μια προσέγγιση αναφοράς που διευκολύνει την αποτελεσματική επικοινωνία των 
  πληροφοριών του λογισμικού στους ενδιαφερόμενους φορείς του έργου.

Ένα μοντέλο είναι μια *αφαίρεση* ή μια *απλοποίηση* ενός συστατικού στοιχείου του λογισμικού. Μια συνέπεια της 
χρήσης αφαίρεσης είναι ότι, επειδή καμία μεμονωμένη αφαίρεση δεν περιγράφει ολοκληρωτικά ένα συστατικό λογισμικού, το μοντέλο 
λογισμικού περιλαμβάνει μια συνάθροιση αφαιρέσεων, οι οποίες, όταν συνδυάζονται, 
περιγράφουν επιλεγμένες πτυχές, οπτικές ή όψεις - μόνο εκείνες οι οποίες χρειάζονται για να παρθούν αποφάσεις πληροφόρησης και να 
ανταποκρίνονται στους σκοπούς δημιουργίας του μοντέλου αρχικά. Αυτή η απλοποίηση υποδεικνύει υποθέσεις σχετικά με το πλαίσιο εντός 
του οποίου το μοντέλο τοποθετείται, οι οποίες θα πρέπει επίσης να καταγράφονται στο μοντέλο. Τότε, όταν το μοντέλο επαναχρησιμοποιείται, αυτές 
οι υποθέσεις μπορούν να επικυρωθούν πρώτα για να καθοριστεί η σημασία του επαναχρησιμοποιημένου μοντέλου εντός της νέας χρήσης και του 
πλαισίου του.

### *Ιδιότητες και Εκφραση των Μοντέλων*

*Ιδιότητες των μοντέλων* είναι εκείνα τα ιδιαίτερα χαρακτηριστικά ενός
συγκεκριμένου μοντέλου που περιγράφουν την πληρότητά του, την συνέπεια και την ορθότητά του εντός των επιλεγμένων συμβολισμών
εργαλείων μοντελοποίησης. Οι ιδιότητες των μοντέλων περιλαμβάνουν τα ακόλουθα:

  * *Πληρότητα*: Ο βαθμός που όλες οι απαιτήσεις έχουν εφαρμοστεί
  και επαληθευτεί εντός του μοντέλου.
  * *Συνέπεια*: Ο βαθμός που το μοντέλο περιέχει μη αντικρουόμενες
  απαιτήσεις, παραδοχές, περιορισμούς, λειτουργίες ή περιγραφές στοιχείων.
  * *Ορθότητα*: Ο βαθμός που το μοντέλο ικανοποιεί τις απαιτήσεις του,
  τις προδιαγραφές σχεδιασμού του και δεν παρουσιάζει σφάλματα.

Τα μοντέλα κατασκευάζονται για να αναπαραστήσουν αντικείμενα του πραγματικού κόσμου και τη συμπεριφορά τους
ώστε να απαντηθούν συγκεκριμένες ερωτήσεις σχετικά με το πως το λογισμικό αναμένεται να λειτουργεί. Η εκτενής
ανάλυση των μοντέλων - μέσω εξερεύνησης, προσομοίωσης, ή αναθεώρηση - μπορεί να εκθέσει περιοχές αβεβαιότητας 
εντός του μοντέλου και του λογισμικού στο οποίο το μοντέλο αναφέρεται. Αυτές οι αβεβαιότητες ή τα αναπάντητα ερωτήματα που σχετίζονται με τις
απαιτήσεις, τον σχεδιασμό ή/και την εφαρμογή μπορούν εν συνεχεία να διαχειρίζονται καταλλήλως.

Το κύριο στοιχείο έκφρασης ενός μοντέλου είναι η *οντότητα*. Μια οντότητα μπορεί να αναπαριστά συγκεκριμένα  αντικείμενα (για παράδειγμα επεξεργαστές,
αισθητήρες ή ρομπότ), ή αφηρημένα αντικείμενα (για παράδειγμα λειτουργικές ενότητες λογισμικού ή πρωτόκολλα επικοινωνίας). Οι οντότητες του μοντέλου
συνδέονται με άλλες οντότητες χρησιμοποιώντας σχέσεις (γραμμές ή φορείς κειμένου στις στοχευόμενες οντότητες). Η έκφραση οντοτήτων μοντέλου μπορεί να 
επιτυγχάνεται με την χρήση κειμενικών ή γραφικών γλωσσών μοντελοποίησης· και οι δυο αυτοί τύποι γλωσσών μοντελοποίησης συνδέουν τις οντότητες του μοντέλου 
μέσω συγκεκριμένων κατασκευών γλώσσας. Η σημασία μιας οντότητας μπορεί να αναπαριστάται μέσω του σχήματος της,
των κειμενικών χαρακτηριστικών της ή και των δύο. Γενικά, οι κειμενικές πληροφορίες τηρούν την συντακτική δομή της εκάστοτε γλώσσας.
Οι ακριβείς σημασίες που σχετίζονται με την μοντελοποίηση του γενικού πλαισίου, της δομής ή της συμπεριφοράςχρησιμοποιώντας αυτές τις οντότητες και τις
σχέσεις, εξαρτώνται από την γλώσσα μοντελοποίησης που χρησιμοποιείται, τον αυστηρό σχεδιασμό που εφαρμόζεται στην προσπάθεια μοντελοποίησης,
τη συγκεκριμένη προβολή που κατασκευάζεται και την οντότητα στην οποία το συγκεκριμένο στοιχείο σημείωσης μπορεί να συνδέεται. Μπορεί να απαιτούνται
πολλαπλές προβολές του μοντέλου για να αποτυπωθούν οι αναγκαίες σημασίες του λογισμικού.

Όταν χρησιμοποιούνται μοντέλα υποστήριξης αυτοματοποίησης, τα μοντέλα μπορούν να ελεγχθούν για πληρότητα και συνέπεια. Η χρησιμότητα αυτών 
των ελέγχων εξαρτάται σημαντικά από το επίπεδο σημασιολογικής και συντακτικής ακρίβειας που εφαρμόζεται στην προσπάθεια μοντελοποίησης 
και στην ύπαρξη συγκεκριμένης εργαλειακής υποστήριξης. Η ορθότητα ελέγχεται συνήθως μέσω προσομοίωσης και/ή αναθεώρησης.

### *Σύνταξη, Σημασιολογία και Πραγματολογία*

Τα μοντέλα μπορεί να είναι εκπληκτικά παραπλανητικά. Το γεγονός ότι ένα
μοντέλο είναι μια αφαίρεση με λείπουσες πληροφορίες μπορεί να δώσει 
στους ανθρώπους την εντύπωση ότι κατανοούν πλήρως το λογισμικό μετά από 
τη μελέτη ενός μόνο μοντέλου. Ένα *πλήρες μοντέλο* ("πλήρες" ως προς την 
προσπάθεια μοντελοποίησης) μπορεί να αποτελείται από τη συνένωση πολλαπλών 
υπομοντέλων και ειδικών μοντέλων λειτουργίας. Η εξέταση και η λήψη αποφάσεων 
σχετικά με ένα μόνο μοντέλο μέσα σε αυτή τη συλλογή υπομοντέλων μπορεί να 
είναι προβληματική.

Η κατανόηση των ακριβών εννοιών της μοντελοποίησης κατασκευών μπορεί επίσης να
είναι δύσκολη. Οι συντακτικοί και σημασιολογικοί κανόνες καθορίζουν
τις γλώσσες μοντελοποίησης. Για τις γλώσσες κειμένου, η *σύνταξη* καθορίζεται
χρησιμοποιώντας μια γραμματική σημειογραφία που καθορίζει τις έγκυρες 
κατασκευές της γλώσσας (π.χ. η Backus-Naur φόρμα (BNF)). Για γραφικές γλώσσες, 
η σύνταξη καθορίζεται χρησιμοποιώντας γραφικά μοντέλα που ονομάζονται <i>μεταμοντέλα</i>.
Όπως και με την BNF, τα μεταμοντέλα καθορίζουν τις έγκυρες συντακτικές κατασκευές
μιας γραφικής γλώσσας μοντελοποίησης. Επιπλέον, το μεταμοντέλο καθορίζει πώς μπορούν
αυτές οι κατασκευές να συνθέτονται για να παράγουν έγκυρα μοντέλα.

Η *σημασιολογία* για τις γλώσσες μοντελοποίησης καθορίζει τη σημασία που συνδέεται
με τις οντότητες και τις σχέσεις που περιλαμβάνονται στο μοντέλο. Για παράδειγμα, 
ένα απλό διάγραμμα δύο κουτιών που συνδέονται με μια γραμμή είναι ανοιχτό σε 
διάφορες ερμηνείες. Η γνώση ότι το διάγραμμα στο οποίο τα κουτιά τοποθετούνται 
και συνδέονται είναι ένα διάγραμμα αντικειμένων ή ένα διάγραμμα δραστηριότητας 
μπορεί να βοηθήσει στην ερμηνεία αυτού του μοντέλου.

Στην πράξη, η σημασιολογία ενός συγκεκριμένου λογισμικού μοντέλου είναι συνήθως 
αρκετά σαφής λόγω της χρήσης της γλώσσας μοντελοποίησης με συνεπείς κανόνες, του
τρόπου με τον οποίο αυτή η γλώσσα μοντελοποίησης εκφράζει οντότητες και σχέσεις 
μέσα σε αυτό το μοντέλο, της εμπειρίας των μοντελοποιητών και του πλαισίου εντός 
του οποίου έχει γίνει η μοντελοποίηση και η αναπαράστασή της. Η σημασία επικοινωνείται 
μέσω του μοντέλου, ακόμη και στην περίπτωση ανεπαρκούς πληροφορίας μέσω της αφαίρεσης. 
Η *πραγματολογία* εξηγεί πως η σημασία ενσωματώνεται στο μοντέλο και στο περιεχόμενό του
και πως επικοινωνείται αποτελεσματικά στους άλλους μηχανικούς λογισμικού. 

Ωστόσο, υπάρχουν ακόμα περιπτώσεις όπου απαιτείται προσοχή όσον αφορά τη μοντελοποίηση και τη 
σημασιολογία. Για παράδειγμα, οποιαδήποτε μέρη του μοντέλου που εισάγονται από ένα άλλο 
μοντέλο ή βιβλιοθήκη πρέπει να εξεταστούν για σημασιολογικές υποθέσεις που διαφέρουν από 
το νέο περιβάλλον μοντελοποίησης· αυτές οι διαφορές ενδέχεται να μην είναι προφανείς. Το 
μοντέλο πρέπει να ελεγχθεί για καταγεγραμμένες υποθέσεις. Παρόλο που η χρησιμοποιούμενη συντακτική 
μοντελοποίηση μπορεί να είναι η ίδια, μπορεί να σημαίνει κάτι πολύ διαφορετικό στο νέο περιβάλλον, 
το οποίο είναι ένα διαφορετικό πλαίσιο αναφοράς. Επίσης, λάβετε υπόψη ότι καθώς το λογισμικό ωριμάζει 
και γίνονται αλλαγές, ενδέχεται να εισαχθεί σημασιολογική ασυμφωνία, η οποία μπορεί να οδηγήσει 
σε σφάλματα. Με πολλούς μηχανικούς λογισμικού που εργάζονται σε μέρος ενός μοντέλου με τον χρόνο 
και με ενημερώσεις εργαλείων και ίσως νέες απαιτήσεις, υπάρχουν ευκαιρίες για τμήματα του μοντέλου
να αντιπροσωπεύουν κάτι διαφορετικό από την αρχική πρόθεση του συντάκτη και του αρχικού 
περιβάλλοντος του μοντέλου.

### ***Προϋποθέσεις, Μετασυνθήκες και Αναλλοίωτες Συνθήκες***

Κατά τη μοντελοποίηση συναρτήσεων ή μεθόδων, ο μηχανικός λογισμικού συνήθως ξεκινά με 
υποθέσεις σχετικά με την κατάσταση του λογισμικού πριν, κατά τη διάρκεια και μετά την 
εκτέλεση της συνάρτησης ή μεθόδου. Αυτές οι υποθέσεις είναι ουσιαστικές για τη σωστή 
λειτουργία της συνάρτησης ή μεθόδου και ονομάζονται προϋποθέσεις, μετασυνθήκες και 
αναλλοίωτες συνθήκες.

  * Οι *προϋποθέσεις* είναι οι συνθήκες που πρέπει να ικανοποιούνται πριν από την εκτέλεση 
  μιας συνάρτησης ή μεθόδου. Εάν αυτές οι προϋποθέσεις δεν ικανοποιούνται πριν από την 
  εκτέλεση της συνάρτησης ή μεθόδου, αυτή μπορεί να παράξει εσφαλμένα αποτελέσματα.
  * Οι *μετασυνθήκες* είναι συνθήκες που είναι εγγυημένο ότι θα είναι αληθείς μετά από την 
  επιτυχή εκτέλεση μιας συνάρτησης ή μεθόδου. Συνήθως, οι μετασυνθήκες αντιπροσωπεύουν πώς
  έχει αλλάξει η κατάσταση του λογισμικού, πώς έχουν αλλάξει οι παράμετροι που περνούνται 
  στη συνάρτηση ή μέθοδο, πώς έχουν αλλάξει οι τιμές δεδομένων, ή πώς έχει επηρεαστεί η τιμή
  επιστροφής.
  * Οι *αναλλοίωτες* είναι συνθήκες που παραμένουν σταθερές στο περιβάλλον λειτουργίας (με άλλα 
  λόγια, δεν αλλάζουν) πριν και μετά την εκτέλεση μιας συνάρτησης ή μεθόδου. Αυτές οι αναλλοίωτες
  συνθήκες είναι σχετικές και απαραίτητες για το λογισμικό και για τη σωστή λειτουργία της 
  συνάρτησης ή της μεθόδου.

## Τύποι Μοντέλων

Ένα τυπικό μοντέλο αποτελείται από μια συλλογή από υπομοντέλα. Κάθε υπομοντέλο είναι μια μερική 
περιγραφή και δημιουργείται για ένα συγκεκριμένο σκοπό. Ένα υπομοντέλο μπορεί να αποτελείται 
από ένα ή περισσότερα διαγράμματα. Η συλλογή των υπομοντέλων μπορεί να χρησιμοποιεί πολλές γλώσσες 
μοντελοποίησης ή μια μόνο γλώσσα μοντελοποίησης. Η Unified Modeling Language (UML) αναγνωρίζει μια 
πλούσια συλλογή από διαγράμματα μοντελοποίησης. Αυτά τα διαγράμματα, μαζί με τα κατασκευαστικά στοιχεία 
της γλώσσας μοντελοποίησης, χρησιμοποιούνται σε τρία κοινά είδη μοντέλων: μοντέλα πληροφοριών, 
συμπεριφοράς και δομής. (Δείτε την ενότητα 1.1.)

### *Μοντελοποίηση Πληροφορίας*

Τα μοντέλα πληροφορίας επικεντρώνονται στα δεδομένα και άλλες πληροφορίες. Ένα *μοντέλο πληροφορίας* 
είναι μια αφηρημένη αναπαράσταση που αναγνωρίζει και καθορίζει ένα σύνολο από έννοιες, ιδιότητες, 
σχέσεις και περιορισμούς στις οντότητες δεδομένων. Το σημασιολογικό ή έννοιολογικό μοντέλο πληροφορίας 
χρησιμοποιείται συχνά για να παρέχει μια μορφή τυπικότητας και πλαισίωσης στο λογισμικό, όπως 
εμφανίζεται από την προβληματική σκοπιά, χωρίς ανησυχία για το πώς αυτό το μοντέλο χαρτογραφείται
στην υλοποίηση του λογισμικού. Το σημασιολογικό ή έννοιολογικό μοντέλο πληροφορίας είναι μια αφαίρεση και,
ως τέτοια, περιλαμβάνει μόνο τα έννοια, τις ιδιότητες, τις σχέσεις και τους περιορισμούς που χρειάζονται
για να εννοιολογικοποιηθεί μια πραγματική όψη της πληροφορίας. Οι επόμενες μετατροπές του 
σημασιολογικού ή έννοιολογικού μοντέλου πληροφορίας γίνονται σε λογικά και στη συνέχεια σε φυσικά 
μοντέλα δεδομένων όπως υλοποιούνται στο λογισμικό.

### *Μοντελεποίηση Συμπεριφοράς*

Τα *μοντέλα συμπεριφοράς* αναγνωρίζουν και καθορίζουν τις λειτουργίες του λογισμικού. 
Τα μοντέλα συμπεριφοράς συνήθως παίρνουν τρεις βασικές μορφές: μηχανήματα κατάστασης, μοντέλα 
ροής ελέγχου και μοντέλα ροής δεδομένων. Τα μηχανήματα κατάστασης παρέχουν ένα μοντέλο που 
αναπαριστά το λογισμικό ως μια συλλογή καθορισμένων καταστάσεων, γεγονότων και μεταβάσεων. 
Το λογισμικό μεταβαίνει από μια κατάσταση στην επόμενη μέσω ενός γεγονότος ενεργοποίησης ή 
απενεργοποίησης που συμβαίνει στο μοντελοποιημένο περιβάλλον. Τα μοντέλα ροής ελέγχου 
απεικονίζουν το πώς μια ακολουθία γεγονότων προκαλεί την ενεργοποίηση ή απενεργοποίηση 
διεργασιών. Η συμπεριφορά ροής δεδομένων χαρακτηρίζεται ως μια ακολουθία βημάτων όπου 
τα δεδομένα κινούνται μέσω διεργασιών προς αποθήκευση ή πηγές δεδομένων.

### *Μοντελοποίηση Δομής*

Τα *μοντέλα δομής* απεικονίζουν τη φυσική ή λογική σύνθεση του λογισμικού από τα διάφορα
μέρη του. Η μοντελοποίηση δομής καθορίζει το καθορισμένο όριο μεταξύ του λογισμικού που
υλοποιείται ή μοντελοποιείται και του περιβάλλοντος στο οποίο θα λειτουργήσει. Ορισμένες
κοινές δομικές δομές που χρησιμοποιούνται στη μοντελοποίηση δομής είναι η σύνθεση, ανάλυση, 
γενίκευση και εξειδίκευση των οντοτήτων· η αναγνώριση των σχετικών σχέσεων και της 
καρδιναλότητας μεταξύ των οντοτήτων· και ο καθορισμός των διεπαφών διεργασίας ή λειτουργικών 
διεπαφών. Τα διαγράμματα δομής που παρέχονται από το UML για τη μοντελοποίηση δομής περιλαμβάνουν 
διαγράμματα κλάσης, συστατικών, αντικειμένου, ανάπτυξης και συσκευασίας.

## Ανάλυση Μοντέλων

Η ανάπτυξη μοντέλων επιτρέπει στον μηχανικό λογισμικού να μελετήσει, να σκεφτεί και να 
κατανοήσει τη δομή, τη λειτουργία, τη λειτουργική χρήση και τις σκέψεις συναρμολόγησης του 
λογισμικού. Η ανάλυση των κατασκευασμένων μοντέλων είναι απαραίτητη για να διασφαλιστεί ότι τα 
μοντέλα είναι ολοκληρωμένα, συνεκτικά και αρκετά σωστά για να εξυπηρετήσουν τον επιθυμητό σκοπό 
τους για τους ενδιαφερόμενους φορείς.

Οι παρακάτω ενότητες περιγράφουν σύντομα τις τεχνικές ανάλυσης που γενικά χρησιμοποιούνται
για να διασφαλιστεί ότι ο μηχανικός λογισμικού και οι άλλοι σχετικοί ενδιαφερόμενοι φορείς αποκομίζουν την 
κατάλληλη αξία από την ανάπτυξη και χρήση των μοντέλων.

### *Αναλύοντας για Πληρότητα*

Για να διασφαλιστεί ότι το λογισμικό καλύπτει πλήρως τις ανάγκες των ενδιαφερομένων, είναι 
κρίσιμο να γίνεται δοκιμή για την πληρότητα - από τη διαδικασία συλλογής απαιτήσεων έως την 
υλοποίηση του κώδικα. Η *πληρότητα* είναι ο βαθμός στον οποίο έχουν υλοποιηθεί και επαληθευθεί 
όλες οι καθορισμένες απαιτήσεις. Οι μηχανικοί μπορούν να ελέγξουν τα μοντέλα για πληρότητα 
με ένα εργαλείο μοντελοποίησης που χρησιμοποιεί δομική ανάλυση και ανάλυση επιτευξιμότητας χώρου 
καταστάσεων (που διασφαλίζει ότι ένα σύνολο σωστών εισόδων φτάνει σε όλες τις διαδρομές στα 
καταστατικά μοντέλα). Τα μοντέλα μπορούν επίσης να ελεγχθούν χειρωνακτικά για πληρότητα μέσω 
επιθεωρήσεων ή άλλων τεχνικών αναθεώρησης. (Βλέπε το Γνωστικό Πεδίο της Ποιότητας Λογισμικού). 
Σφάλματα και προειδοποιήσεις που παράγονται από αυτά τα εργαλεία ανάλυσης και που 
ανακαλύπτονται από επιθεωρήσεις ή αναθεωρήσεις οι οποίες υποδεικνύουν τις διορθωτικές ενέργειες
που χρειάζεται να γίνουν για να εξασφαλιστεί η πληρότητα του μοντέλου.

### *Αναλύοντας για Συνέπεια*

Η *συνέπεια* αφορά το βαθμό στον οποίο τα μοντέλα δεν περιλαμβάνουν αντικρουόμενες απαιτήσεις, 
διαβεβαιώσεις, περιορισμούς, λειτουργίες ή περιγραφές συνιστωσών. Συνήθως, ο έλεγχος συνέπειας 
πραγματοποιείται με το εργαλείο μοντελοποίησης χρησιμοποιώντας μια αυτοματοποιημένη λειτουργία ανάλυσης. 
Τα μοντέλα μπορούν επίσης να ελεγχθούν χειροκίνητα για συνέπεια χρησιμοποιώντας επιθεωρήσεις ή άλλες 
τεχνικές αναθεώρησης. (Βλέπε το Γνωστικό Πεδίο της Ποιότητας Λογισμικού.) Όπως και με την πληρότητα, τα σφάλματα 
και οι προειδοποιήσεις, που δημιουργούνται από αυτά τα εργαλεία ανάλυσης και που εντοπίζονται από επιθεωρήσεις 
ή αναθεωρήσεις, υποδεικνύουν την ανάγκη διόρθωσης.

### *Αναλύοντας για Ορθότητα*

Η *ορθότητα* αφορά το βαθμό στον οποίο ένα μοντέλο ικανοποιεί τις απαιτήσεις και τις προδιαγραφές
σχεδιασμού λογισμικού, είναι απαλλαγμένο από ελαττώματα και τελικά πληροί τις ανάγκες των ενδιαφερόμενων 
φορέων. Η ανάλυση για την ορθότητα περιλαμβάνει τον έλεγχο της συντακτικής ορθότητας του μοντέλου 
(δηλαδή τη σωστή χρήση της γραμματικής και των κατασκευών της γλώσσας μοντελοποίησης) και τη σημασιολογική 
ορθότητα (αυτό είναι, η χρήση των κατασκευών της γλώσσας μοντελοποίησης για τη σωστή αναπαράσταση της έννοιας 
που μοντελοποιείται). Για την ανάλυση ενός μοντέλου για συντακτική και σημασιολογική ορθότητα, αυτό 
αναλύεται - είτε αυτοματοποιημένα (π.χ. χρησιμοποιώντας το εργαλείο μοντελοποίησης για να ελέγξει τη 
συντακτική ορθότητα του μοντέλου), είτε χειροκίνητα (χρησιμοποιώντας επιθεωρήσεις ή άλλες τεχνικές 
επανεξέτασης) - αναζητώντας δυνητικά σφάλματα και στη συνέχεια διορθώνοντας ή απομακρύνοντας τα επιβεβαιωμένα
 σφάλματα πριν από την κυκλοφορία του λογισμικού για χρήση.

### *Ιχνηλασιμότητα*

Η ανάπτυξη λογισμικού συνήθως περιλαμβάνει τη χρήση, τη δημιουργία και την τροποποίηση 
πολλών εργασιακών προϊόντων όπως έγγραφα σχεδιασμού, προδιαγραφές διαδικασίας, απαιτήσεις 
λογισμικού, διαγράμματα, σχέδια και ψευδο-κώδικας, χειρόγραφος και κώδικας που παράγεται 
από εργαλεία, εγχειρίδια και αυτοματοποιημένα πειραματικά αποτελέσματα και αναφορές, αρχεία 
και δεδομένα. Αυτά τα προϊόντα εργασίας μπορεί να μοιράζονται διάφορες εξαρτήσεις (π.χ. 
χρήσεις, υλοποιήσεις και ελέγχους). Καθώς το λογισμικό αναπτύσσεται, διαχειρίζεται, συντηρείται 
ή επεκτείνεται, αυτές οι σχέσεις ανιχνευσιμότητας πρέπει να αναγράφονται και να ελέγχονται 
για να δείξουν τη συνέπεια των απαιτήσεων λογισμικού με το μοντέλο λογισμικού (βλέπε την 
Ανιχνευσιμότητα Απαιτήσεων στην Γνωστικό Πεδίο Απαιτήσεων Λογισμικού) και των πολλών προϊόντων εργασίας.
Η χρήση της ανιχνευσιμότητας συνήθως βελτιώνει τη διαχείριση των προϊόντων εργασίας του λογισμικού 
και την ποιότητα της διαδικασίας του λογισμικού και διασφαλίζει στους ενδιαφερόμενους φορείς ότι 
όλες οι απαιτήσεις εκπληρώνονται. Η ανιχνευσιμότητα επιτρέπει ανάλυση των αλλαγών όταν το λογισμικό 
αναπτυχθεί και κυκλοφορήσει, διότι οι σχέσεις με τα προϊόντα εργασίας του λογισμικού μπορούν εύκολα 
να διασχιστούν για να αξιολογηθεί η επίδραση των αλλαγών. Τα εργαλεία μοντελοποίησης συνήθως βοηθούν 
στο να καθοριστούν και να διαχειριστούν αυτόματα ή χειροκίνητα τους συνδέσμους ανιχνευσιμότητας 
μεταξύ απαιτήσεων, σχεδιασμού, κώδικα και/ή οντοτήτων ελέγχου που μπορεί να αναπαριστούνται στα
μοντέλα και άλλα προϊόντα εργασίας λογισμικού. (Για περισσότερες πληροφορίες σχετικά με την 
ανιχνευσιμότητα, ανατρέξτε στο Γνωστικό Πεδίο της Διαχείρισης Συνδυασμού Λογισμικού.)

### *Ανάλυση Αλληλεπίδρασης*

Η *ανάλυση της αλληλεπίδρασης* επικεντρώνεται στις σχέσεις επικοινωνίας ή ελέγχου μεταξύ οντοτήτων που χρησιμοποιούνται
για την εκτέλεση μιας συγκεκριμένης εργασίας ή λειτουργίας εντός του μοντέλου λογισμικού. Αυτή η ανάλυση 
εξετάζει τη δυναμική συμπεριφορά των αλληλεπιδράσεων μεταξύ των διαφορετικών τμημάτων του μοντέλου λογισμικού, 
συμπεριλαμβανομένων άλλων στρωμάτων λογισμικού (όπως το λειτουργικό σύστημα, το ενδιάμεσο λογισμικό και οι εφαρμογές). 
Η εξέταση των αλληλεπιδράσεων μεταξύ της εφαρμογής λογισμικού και του λογισμικού διεπαφής χρήστη μπορεί επίσης να είναι 
σημαντική για μερικές εφαρμογές λογισμικού. Ορισμένα περιβάλλοντα μοντελοποίησης λογισμικού παρέχουν εγκαταστάσεις 
προσομοίωσης για τη μελέτη των πτυχών της δυναμικής συμπεριφοράς του μοντελοποιημένου λογισμικού. Με τη βοήθεια 
της προσομοίωσης, ο μηχανικός λογισμικού μπορεί να παρακολουθήσει τον σχεδιασμό της αλληλεπίδρασης και να επαληθεύσει 
ότι οι διαφορετικές μερίδες του λογισμικού λειτουργούν από κοινού για να παρέχουν τις επιθυμητές λειτουργίες.

## Μέθοδοι Τεχνολογίας Λογισμικού

Οι μέθοδοι μηχανικής λογισμικού παρέχουν μια οργανωμένη και συστηματική προσέγγιση για την ανάπτυξη λογισμικού 
για ένα συγκεκριμένο υπολογιστή. Υπάρχουν πολλές μέθοδοι από τις οποίες μπορεί να επιλέξει ο μηχανικός 
λογισμικού, και πρέπει να επιλέξει μια κατάλληλη μέθοδο ή μεθόδους για την ανάπτυξη λογισμικού ανάλογα 
με την εργασία που έχει αναλάβει. Αυτή η επιλογή μπορεί να επηρεάσει δραματικά την επιτυχία του έργου. 
Όταν οι μηχανικοί λογισμικού, συνεργαζόμενοι με ανθρώπους που διαθέτουν την κατάλληλη σειρά δεξιοτήτων 
και τα κατάλληλα εργαλεία, χρησιμοποιούν αυτές τις μεθόδους μηχανικής λογισμικού, μπορούν να οπτικοποιήσουν 
τις λεπτομέρειες του λογισμικού και τελικά να μετατρέψουν την αναπαράσταση σε μια σειρά εργασίας κώδικα και 
δεδομένων. 
Επιλεγμένες μέθοδοι μηχανικής λογισμικού συζητούνται παρακάτω. Οι θεματικές οργανώνονται σε 
συζητήσεις για τις Ευριστικές Μεθόδους, τις Τυπικές Μεθόδους, τις Μεθόδους Πρωτοτύπου και τις Ευέλικτες Μεθόδους. 

### Ευρετικές μέθοδοι

Οι ευρετικές μέθοδοι, είναι εκείνες οι μέθοδοι της τεχνολογίας λογισμικού,
οι οποίες βασίζονται στην εμπειρία και χρησιμοποιούνται ευρέως στην
βιομηχανία του λογισμικού.
Αυτή η θεματική περιοχή περιέχει τρεις βασικές κατηγορίες προς συζήτηση:
τις μεθόδους δομημένης ανάλυσης και σχεδιασμού, τις μεθόδους μοντελοποίησης
δεδομένων και τις μεθόδους αντικειμενοστραφούς ανάλυσης και σχεδιασμού.

  * Μέθοδοι δομημένης ανάλυσης και σχεδιασμού: το μοντέλο του λογισμικού
  αναπτύσσεται κυρίως από την οπτική της λειτουργικότητας ή της συμπεριφοράς,
  ξεκινώντας από μία οπτική υψηλού επιπέδου του λογισμικού συμπεριλαμβανομένων
  των στοιχείων ελέγχου και δεδομένων και έπειτα αποσυνθέτει ή βελτιώνει
  σταδιακά τα συστατικά στοιχεία του μοντέλου μέσω όλο και πιο λεπτομερών
  σχεδιασμών.
  Οι λεπτομερείς σχεδιασμοί τελικά συγκλίνουν σε πολύ συγκεκριμένες
  λεπτομέρειες ή προδιαγραφές του λογισμικού που πρέπει να γραφτούν
  σε κώδικα με το χέρι, αυτόματα ή συνδυαστικά, να δομηθούν, να ελεγχθούν
  και να επαληθευτούν.
  * Μέθοδοι μοντελοποίησης δεδομένων: το μοντέλο δεδομένων είναι κατασκευασμένο
  από την οπτική των δεδομένων ή των πληροφοριών που χρησιμοποιούνται.
  Οι πίνακες δεδομένων και οι σχέσεις καθορίζουν τα μοντέλα δεδομένων.
  Αυτή η μέθοδος μοντελοποίησης χρησιμοποιείται κυρίως για τον προσδιορισμό
  και την ανάλυση των απαιτήσεων για δεδομένα, υποστηρίζοντας τα σχέδια
  των βάσεων δεδομένων ή τα αποθετήρια δεδομένων, τα οποία βρίσκονται
  τυπικά στο επιχειρησιακό λογισμικό, όπου τα δεδομένα διαχειρίζονται
  ενεργά ως πηγές ή πόροι των επιχειρησιακών συστημάτων.
  * Μέθοδοι αντικειμενοστραφούς ανάλυσης και σχεδιασμού: το αντικειμενοστραφές
  μοντέλο αναπαριστάται ως μία συλλογή από αντικείμενα, τα οποία ενσωματώνουν
  δεδομένα και σχέσεις και διαδρούν με άλλα αντικείμενα μέσω μεθόδων.
  Τα αντικείμενα μπορεί να είναι πραγματικά ή εικονικά στοιχεία. Το
  μοντέλο λογισμικού δομείται χρησιμοποιώντας διαγράμματα, ώστε να αποδώσει
  την επιλεγμένες οπτικές του λογισμικού. Η σταδιακή βελτίωση του μοντέλου
  λογισμικού οδηγεί σε ένα λεπτομερές σχέδιο.
  Το λεπτομερές σχέδιο, τότε είτε εξελίσσεται μέσω της επιτυχούς επανάληψης
  είτε μετασχηματίζεται (χρησιμοποιώντας κάποιους μηχανισμούς) στην
  οπτική της εφαρμογής του μοντέλου, όπου εκφράζεται η προσέγγιση για
  τον κώδικα και την πακετοποίηση για την ανάπτυξη και έκδοση του τελικού
  προϊόντος λογισμικού.

### Τυπικές Μέθοδοι

Οι τυπικές μέθοδοι είναι μέθοδοι τεχνολογίας λογισμικού, που χρησιμοποιούνται
για να προσδιορίσουν, να αναπτύξουν και να επαληθεύσουν το λογισμικό
μέσω της εφαρμογής ενός αυστηρού μαθηματικού συμβολισμού και γλώσσας.
Μέσω της χρήσης, μιας γλώσσας προδιαγραφών, το μοντέλο λογισμικού
μπορεί να ελεγχθεί για συνέπεια, δηλαδή, την έλλειψη αμφισημίας, πληρότητα
και ορθότητα, με ένα συστηματικό και αυτόματο ή ημιαυτόματο τρόπο.
Αυτή η ενότητα σχετίζεται με την παράγραφο Τυπική ανάλυση, στο
γνωστικό πεδίο Απαιτήσεις λογισμικού.
Αυτός ο τομέας ασχολείται με τις γλώσσες προδιαγραφών, την βελτίωση
και παραγωγή προγραμμάτων, την τυπική επαλήθευση και το λογικό συμπέρασμα.

  * Γλώσσες προδιαγραφών: οι γλώσσες προδιαγραφών παρέχουν την μαθηματική
  βάση για μία τυπική μέθοδο. Οι γλώσσες προδιαγραφών είναι επίσημες
  υψηλού επιπέδου γλώσσες υπολογιστών, με άλλα λόγια, δεν είναι κλασικές
  γλώσσες προγραμματισμού 3ης γενιάς (3rd Generation Language)(3GL),
  οι οποίες χρησιμοποιούνται κατά την διάρκεια της προδιαγραφής του
  λογισμικού, της ανάλυσης απαιτήσεων, ή/και των σταδίων σχεδιασμού
  για να περιγράψουν την συγκεκριμένη συμπεριφορά εισόδου/εξόδου. Οι
  γλώσσες προδιαγραφών δεν είναι απευθείας εκτελέσιμες γλώσσες.
  Αποτελούνται τυπικά από ένα συμβολισμό και σύνταξη, την σημασιολογία
  για την χρήση του συμβολισμού και ένα σετ από επιτρεπόμενες σχέσεις
  που αφορούν τα αντικείμενα.
  * Βελτίωση και παραγωγή προγράμματος: η βελτίωση του προγράμματος
  είναι μια διαδικασία δημιουργίας μιας προδιαγραφής χαμηλότερου επιπέδου
  (ή μιας πιο λεπτομερούς προδιαγραφής) χρησιμοποιώντας μια σειρά από
  μετασχηματισμούς. Οι εκτελέσιμες αναπαραστάσεις ενός προγράμματος
  παράγονται από τους μηχανικούς λογισμικού μέσω αυτών των επιτυχημένων
  μετασχηματισμών. Οι προδιαγραφές μπορεί να βελτιώνονται με το να προσθέτονται
  λεπτομέρειες έως ότου το μοντέλο μπορεί να διατυπωθεί σε μια 3GL
  γλώσσα προγραμματισμού ή σε ένα εκτελέσιμο τμήμα της γλώσσας προδιαγραφών.
  Αυτή η βελτίωση προδιαγραφών δημιουργείται πιθανόν από τον καθορισμό
  των προδιαγραφών χρησιμοποιώντας ακριβείς σημασιολογικές ιδιότητες.
  Οι προδιαγραφές δεν θα πρέπει να καθορίζουν μόνο τις σχέσεις μεταξύ
  των οντοτήτων, αλλά επίσης και τις ακριβείς έννοιες αυτών των σχέσεων
  και λειτουργιών στον χρόνου λειτουργίας του λογισμικού.
  * Τυπική επαλήθευση: ο έλεγχος του μοντέλου είναι μια τυπική μέθοδος
  επαλήθευσης. Γενικά περιλαμβάνει μια εξερεύνηση της κατάστασης-χώρου
  ή μια ανάλυση προσβασιμότητας, ώστε να αποδείξει ότι το λογισμικό,
  το οποίο αναπαριστάται, διαθέτει ή διατηρεί συγκεκριμένες σημαντικές
  ιδιότητες μοντέλου. Ένα παράδειγμα ελέγχου του μοντέλου είναι μια
  ανάλυση, η οποία επικυρώνει την ορθή συμπεριφορά του προγράμματος,
  υπό όλες τις πιθανές διαπλοκές των συμβάντων ή των λήψεων μηνυμάτων.
  Η χρήση της τυπικής επαλήθευσης απαιτεί ένα αυστηρά καθορισμένο μοντέλο
  του λογισμικού και του λειτουργικού περιβάλλοντος του.
  Αυτό το μοντέλο συχνά παίρνει την μορφή μιας πεπερασμένης μηχανής
  μετάπτωσης καταστάσεων ή άλλων τυπικά καθορισμένων αυτοματισμών.
  * Λογικό συμπέρασμα: το λογικό συμπέρασμα είναι μια μέθοδος σχεδίασης
  λογισμικού, που περιλαμβάνει τον προσδιορισμό των προϋποθέσεων και
  των μετασυνθηκών αναφορικά με κάθε σημαντική κατηγορία του σχεδίου,
  και την ανάπτυξη της απόδειξης, χρησιμοποιώντας μαθηματική λογική,
  πως αυτές οι προϋποθέσεις και οι μετασυνθήκες θα πρέπει να ισχύουν
  για όλες τις εισόδους. Αυτό το γεγονός παρέχει στον μηχανικό λογισμικού
  ένα τρόπο να προβλέπει την συμπεριφορά του λογισμικού χωρίς να πρέπει
  να το εκτελέσει.
  Κάποια ολοκληρωμένα περιβάλλοντα ανάπτυξης (Integrated Development
  Environment — IDE) περιλαμβάνουν τρόπους αναπαράστασης αυτών των
  αποδείξεων μαζί με το σχέδιο ή τον κώδικα.

### Μέθοδοι πρωτοτυποποίησης

Η πρωτοτυποποίηση του λογισμικού είναι μια δραστηριότητα που γενικά
δημιουργεί ελλιπείς ή ανεπαρκείς λειτουργικές εκδόσεις μιας εφαρμογής
λογισμικού, συχνά για να δοκιμάσει συγκεκριμένα νέα χαρακτηριστικά,
να πάρει ανατροφοδότηση όσον αφορά τις απαιτήσεις λογισμικού ή τις
διεπαφές με τον χρήστη, να διερευνήσει περεταίρω τις απαιτήσεις του
λογισμικού, το σχεδιασμό του λογισμικού, τις επιλογές εφαρμογής του
λογισμικού ή/και να κερδίσει κάποια χρήσιμη βαθύτερη γνώση για το
λογισμικό. Ο  μηχανικός λογισμικού διαλέγει μια μέθοδο πρωτοτυποποίησης,
ώστε να κατανοήσει πρώτα τις λιγότερο κατανοητές πτυχές ή συστατικά
στοιχεία του λογισμικού. Αυτή η προσέγγιση, έρχεται σε αντίθεση με
άλλες μεθόδους τεχνολογίας λογισμικού που συνήθως ξεκινούν την ανάπτυξη
πρώτα με τα πιο κατανοητά μέρη του λογισμικού.
Γενικά, το πρωτότυπο, δεν αποτελεί το τελικό προϊόν λογισμικού, χωρίς
να υποστεί εκτενή επεξεργασία και εκ νέου ανάπτυξη.

Αυτή η ενότητα αναλύει εν συντομία τα στυλ, τους στόχους και τις τεχνικές
αξιολόγησης της πρωτοτυποποίησης:

  * Στυλ πρωτοτυποποίησης: αναφέρεται στις ποικίλες προσεγγίσεις της
  ανάπτυξης πρωτοτύπων. Το πρωτότυπο μπορεί να αναπτυχθεί ως προϊόν
  κώδικά ή έγγραφο, ως η εξέλιξη μιας εργασίας σχεδιασμού ή ως μια εκτελέσιμη
  προδιαγραφή. Γενικά, χρησιμοποιούνται διαφορετικές διεργασίες πρωτοτυποποίησης
  του κύκλου ζωής για κάθε στυλ.
  Το επιλεγμένο στυλ πρωτοτυποποίησης εξαρτάται από τον τύπο και την
  ποιότητα των αποτελεσμάτων που χρειάζεται το έργο και τον επείγον
  του χαρακτήρα των αποτελεσμάτων.
  * Στόχοι πρωτοτυποποίησης: ο στόχος της δραστηριότητας πρωτοτυποποίησης
  είναι το να εξυπηρετείται το συγκεκριμένο προϊόν από το εγχείρημα
  πρωτοτυποποίησης.
  Παραδείγματα των στόχων πρωτοτυποποίησης περιλαμβάνουν την προδιαγραφή
  των απαιτήσεων, ένα στοιχείο ή εξάρτημα αρχιτεκτονικού σχεδιασμού,
  έναν αλγόριθμο ή μια διεπαφή ανθρώπου-μηχανής.
  * Τεχνικές αξιολόγησης της πρωτοτυποποίησης: Ένα πρωτότυπο μπορεί
  να χρησιμοποιείται ή να αξιολογείται με πολυάριθμους τρόπους από τον
  μηχανικό λογισμικού ή άλλα ενδιαφερόμενα μέλη του έργου, με γνώμονα
  τους κύριους λόγους που οδήγησαν εξ αρχής στην δημιουργία αυτού του
  πρωτοτύπου. Τα πρωτότυπα μπορεί να αξιολογούνται ή να ελέγχονται είτε
  σε σχέση με το υλοποιημένο λογισμικό αυτό καθεαυτό είτε σε σχέση με
  ένα στοχευμένο σύνολο των απαιτήσεων, για παράδειγμα ένα πρωτότυπο
  απαιτήσεων.
  Το πρωτότυπο μπορεί επίσης να χρησιμεύει ως μοντέλο για μια μεταγενέστερη
  προσπάθεια ανάπτυξης, όπως στη προδιαγραφή μίας διεπαφής χρήστη.

### Ευέλικτες μέθοδοι {#agileMth}

Οι ευέλικτες μέθοδοι γεννήθηκαν την δεκαετία του 1990 από την ανάγκη
να μειωθεί το προφανές μεγάλο βάρος, το οποίο σχετίζεται με τις βαριές,
μεθόδους που έχουν ως βάση ένα σχέδιο και χρησιμοποιούνται σε έργα
ανάπτυξης λογισμικού μεγάλου σκέλους.
Οι ευέλικτες μέθοδοι, θεωρούνται ελαφριές μέθοδοι, διότι χαρακτηρίζονται
από μικρούς, επαναληπτικούς κύκλους ανάπτυξης, αυτοοργανωμένες ομάδες,
απλούστερα σχέδια, επαναληπτικά ανεπτυγμένους κώδικες, ανάπτυξη βασισμένη
στον έλεγχο, συχνή συμμετοχή πελατών και μια έμφαση στην δημιουργία
ενός ευπαρουσίαστου λειτουργικού προϊόντος σε κάθε κύκλο ανάπτυξης.

Πολλές ευέλικτες μέθοδοι είναι διαθέσιμες στην βιβλιογραφία.
Σε κάποιες από τις πιο δημοφιλείς προσεγγίσεις οι οποίες αναλύονται
εδώ εν συντομία, συμπεριλαμβάνονται η ταχεία ανάπτυξη εφαρμογών (Rapid
Application Development — RAD), ο ακραίος προγραμματισμός (eXtreme
Programming — XP), Scrum (επαναληπτικό και αυξανόμενο πλαίσιο για
ανάπτυξη ευέλικτου λογισμικού), η ανάπτυξη βασισμένη στα γνωρίσματα
(Feature-Driven Development — FDD):

  * RAD: οι μέθοδοι ταχείας ανάπτυξης λογισμικού, χρησιμοποιούνται
  κατά κύριο λόγο στην ανάπτυξη εφαρμογών, συστημάτων εργασίας, που
  διαχειρίζονται πολλά δεδομένα.
  Η μέθοδος RAD είναι εξοπλισμένη με ειδικού σκοπού εργαλεία  ανάπτυξης
  βάσης δεδομένων, που χρησιμοποιούνται από τους μηχανικούς λογισμικού,
  ώστε να αναπτύξουν, να ελέγξουν και να επεκτείνουν γρήγορα νέες ή
  τροποποιημένες εφαρμογές της εργασίας.
  * XP: αυτή η προσέγγιση χρησιμοποιεί ιστορίες ή σενάρια για τις
  απαιτήσεις, αναπτύσσει πρώτους ελέγχους, έχει άμεση συμμετοχή των
  πελατών στην ομάδα, τυπικά ορίζοντας δοκιμές αποδοχής, χρησιμοποιεί
  προγραμματισμό ζεύγους και παρέχει συνεχόμενο επαναληπτικά αναπτυσσόμενο
  και ολοκληρωμένο κώδικα. Οι ιστορίες αποσυνθέτονται σε εργασίες οι
  οποίες ιεραρχούνται βάσει προτεραιότητας, αξιολογούνται, αναπτύσσονται
  και ελέγχονται. Κάθε επέκταση του λογισμικού ελέγχεται με αυτόματες
  και χειροκίνητες δοκιμές.
  Μία επέκταση μπορεί να εκδίδεται συχνά, δηλαδή περίπου κάθε δύο
βδομάδες.
  * Scrum: αυτή η ευέλικτη προσέγγιση είναι φιλικότερη όσον αφορά
  τη διοίκηση του έργου από τις υπόλοιπες. Η κύρια Scrum διαχειρίζεται
  τις δραστηριότητες στα πλαίσια της εξέλιξης του έργου. Κάθε εξέλιξη
  ονομάζεται sprint και δεν διαρκεί πάνω 30 μέρες. Μια λίστα των στοιχείων
  ανεκτέλεστου προϊόντος (Product Backlog Item — PBI), αναπτύσσεται
  από εργασίες που είναι προσδιορισμένες, καθορισμένες, αξιολογημένες
  και ιεραρχημένες κατά προτεραιότητα. Μια λειτουργική έκδοση
  του λογισμικού ελέγχεται και εκδίδεται ανά κάθε εξέλιξη.
  Οι καθημερινές συναντήσεις του scrum διασφαλίζουν ότι η εργασία βαίνει
  βάση προγράμματος.
  * FDD: αυτή είναι μία μικρή και επαναληπτική προσέγγιση ανάπτυξης
  λογισμικού βάσει μοντέλου, η οποία χρησιμοποιεί μια διαδικασία πέντε
  φάσεων: (1) αναπτύσσει ένα μοντέλο προϊόντος, ώστε να οριοθετήσει
  το εύρος του τομέα, (2) δημιουργεί την λίστα των αναγκών ή των γνωρισμάτων,
  (3) δημιουργεί το σχέδιο ανάπτυξης των γνωρισμάτων (4) αναπτύσσει
  σχέδια για συγκεκριμένα επαναλαμβανόμενα γνωρίσματα και (5) κωδικοποιεί,
  ελέγχει και μετά ολοκληρώνει τα γνωρίσματα. Η FDD είναι παρόμοια
  με μια προσέγγιση ανάπτυξης ενός εξελικτικού λογισμικού. Είναι επίσης
  παρόμοια με τον XP, εκτός από το γεγονός ότι κυριότητα του κώδικα
  αποδίδεται σε μεμονωμένα άτομα αντί για την ομάδα ανάπτυξης.
  Η FDD επικεντρώνεται σε μια γενική αρχιτεκτονική προσέγγιση του
  λογισμικού, η οποία προάγει την σωστή δόμηση ενός γνωρίσματος την πρώτη
  φορά, αντί να επικεντρώνεται στην συνεχόμενη ανάπτυξη.

Υπάρχουν πολλές ακόμα παραλλαγές των ευέλικτων μεθόδων στην πρακτική
και στην βιβλιογραφία. Σημειώστε ότι θα υπάρχει πάντα ένα μέρος για
τις βαριές, βάσει σχεδίου μεθόδους τεχνολογίας λογισμικού, όπως ακόμα
και μέρη όπου οι ευέλικτες μέθοδοι διαπρέπουν. Υπάρχουν νέες μέθοδοι,
οι οποίες αναπτύσσονται από τον συνδυασμό των ευέλικτων και των βάσει
σχεδίου μεθόδων, στις οποίες οι επαγγελματίες καθορίζουν νέες μεθόδους,
οι οποίες εξισορροπούν τα απαιτούμενα γνωρίσματα των βαριών και των
ελαφριών μεθόδων, στοχεύοντας κυρίως στο να επικρατήσουν οι οργανωτικές
εργασιακές ανάγκες.
Αυτές οι εργασιακές ανάγκες, εκπροσωπούνται συνήθως από κάποια από
τα ενδιαφερόμενα μέλη του έργου και καθοδηγούν, καθώς είναι απαραίτητο, την
επιλογή να χρησιμοποιείται μία μέθοδος τεχνολογίας λογισμικού έναντι
μιας άλλης ή να δημιουργείται μία νέα μέθοδος από τον συνδυασμό των
καλύτερων γνωρισμάτων κάποιων άλλων μεθόδων τεχνολογίας λογισμικού.
