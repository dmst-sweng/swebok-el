# Μοντέλα και μέθοδοι τεχνολογίας λογισμικού {#modmethdssofteng}


## Ακρωνύμια

|3GL	|3rd Generation Language	   |
|BNF	|Backus-Naur Form		   |
|FDD	|Feature-Driven Development	   |
|IDE	|Integrated Development Environment|
|PBI	|Product Backlog Item  		   |
|RAD	|Rapid Application Development	   |
|UML	|Unified Modeling Language	   |
|XP	|eXtreme Programming		   |


## Εισαγωγή

Τα μοντέλα και μέθοδοι τεχνολογίας λογισμικού επιβάλλουν
δομή στην τεχνολογία λογισμικού με στόχο να κάνουν την δραστηριότητα
συστηματική, επαναλαμβανομένη και τελικά πιο προσανατολισμένη στην
επιτυχία. Η χρήση μοντέλων παρέχει μια προσέγγιση στην επίλυση των
προβλημάτων, στην χρήση γραφικών συμβόλων και στις διαδικασίες για
την κατασκευή μοντέλων και την ανάλυση.
Οι μέθοδοι παρέχουν μια προσέγγιση στη συστηματική προδιαγραφή, σχεδιασμό,
κατασκευή, έλεγχο και επαλήθευση του λογισμικού του τελικού προϊόντος
και των συσχετιζόμενων με αυτό προϊόντων εργασίας.

Οι μέθοδοι και τα μοντέλα τεχνολογίας λογισμικού έχουν ευρύ πεδίο
δράσης από την διαχείριση μιας μοναδικής φάσης του κύκλου ζωής του
λογισμικού μέχρι και την κάλυψη ολοκλήρου του κύκλου ζωής του λογισμικού.
Αυτό το γνωστικό πεδίο δίνει έμφαση σε μοντέλα και μεθόδους τα οποία 
περιλαμβάνουν πολλαπλές φάσεις του κύκλου ζωής του λογισμικού, αφού άλλα
γνωστικά πεδία καλύπτουν μεθόδους ειδικές για τον ενιαίο κύκλο ζωής φάσεων.


## Κατανομή των θεμάτων για τα Μοντέλα και μέθοδοι τεχνολογίας λογισμικού

{id="fig-softengmm-tree"}
![Σχήμα 9.1 Κατανομή των θεμάτων στο γνωστικό πεδίο Μοντέλα και μέθοδοι τεχνολογίας λογισμικού.](images/9-SoftEngMM.png)

Η κατανομή των θεμάτων για τα γνωστικά πεδία των μοντέλων και μεθόδων τεχνολογίας 
λογισμικού απεικονίζεται στο [Σχήμα 9.1](#fig-softengmm-tree).

Αυτό το κεφάλαιο των μοντέλων και μεθόδων τεχνολογίας λογισμικού χωρίζεται
σε τέσσερα βασικά μέρη.

  * Μοντελοποίηση: Αναφέρεται στην γενική πρακτική της μοντελοποίησης
  και παρουσιάζει θέματα αρχών μοντελοποίησης, ιδιότητες και εκφράσεις
  των μοντέλων, σύνταξη της μοντελοποίησης, χρήση γραφικών συμβόλων
  και πραγματολογία και προϋποθέσεις, μετασυνθήκες και σταθερές.
  * Τύποι μοντέλων: Αναφέρεται εν μέρει στα μοντέλα και στην συγκέντρωση
  υπομοντέλων και παρέχει κάποια γενικά χαρακτηριστικά των τύπων μοντέλων
  που συναντάμε συχνά στην πρακτική της τεχνολογίας  του λογισμικού.
  * Ανάλυση μοντέλων: Παρουσιάζει κάποιες από τις πιο διαδεδομένες
  τεχνικές ανάλυσης που χρησιμοποιούνται στην μοντελοποίηση για να επαληθευτεί
  η πληρότητα, η συνέπεια, η ορθότητα, η ιχνηλασιμότητα και η διαδραστικοτητα.
  * Μέθοδοι τεχνολογίας λογισμικού: Παρουσιάζουν μια σύντομη περίληψη
  των πιο διαδεδομένων μεθόδων τεχνολογίας.
  Το κείμενο καθοδηγεί τον αναγνώστη μέσα από μια περίληψη ευρετικών
  μεθόδων, επίσημων μεθόδων, πρωτότυπων και ευέλικτων μεθόδων.

## Μοντελοποίηση {#modeling}

Η μοντελοποίηση του λογισμικού αποτελεί μια διαδεδομένη τεχνική
για να βοηθήσει τους μηχανικούς του λογισμικού να κατανοήσουν, να
σχεδιάσουν και να μεταβιβάσουν τις πτυχές του λογισμικού στα κατάλληλα
ενδιαφερόμενα μέλη.
Ενδιαφερόμενα μέλη είναι οι άνθρωποι ή οι ομάδες με ρητό ή σιωπηρό ενδιαφέρον
για το λογισμικό (για παράδειγμα οι χρήστες, οι αγοραστές, οι προμηθευτές,
οι σχεδιαστές της αρχιτεκτονικής του λογισμικού, οι αρχές πιστοποίησης,
οι αξιολογητές, οι προγραμματιστές, οι μηχανικοί λογισμικού και ίσως
κι άλλοι).					
Ενώ υπάρχoυν πολλές γλώσσες, σύμβολα, τεχνικές και εργαλεία μοντελοποίησης,
στην βιβλιογραφία και στην πράξη, υπάρχουν κάποιες
γενικές ενοποιητικές έννοιες, που εφαρμόζονται σε κάποια μορφή σε
όλα αυτά.
Τα ακόλουθα θέματα παρέχουν βασικές πληροφορίες για αυτές τις γενικές
έννοιες.

### Αρχές μοντελοποίησης {#modeling-princ}

Η μοντελοποίηση παρέχει στον μηχανικό του λογισμικού μια
οργανωμένη και συστηματική προσέγγιση για να παρουσιάζει τις σημαντικότερες
πτυχές του εκάστοτε υπό μελέτη λογισμικού, για να διευκολυνθεί η λήψη
αποφάσεων σχετικά με το ολόκληρο το λογισμικό ή στοιχεία του και για
να γνωστοποιηθούν αυτές οι σημαντικές αποφάσεις στα ενδιαφερόμενα
μέλη.
Υπάρχουν τρεις γενικές αρχές που διέπουν τις εν λόγω δραστηριότητες
μοντελοποίησης:

  * Μοντελοποίηση των απαραίτητων: Τα καλά μοντέλα συνήθως δεν αναπαριστούν
  κάθε πτυχή ή χαρακτηριστικό κάθε πιθανής κατάστασης του λογισμικού.
  Η μοντελοποίηση τυπικά περιλαμβάνει την ανάπτυξη μόνο αυτών των πτυχών
  ή χαρακτηριστικών  του λογισμικού που χρειάζονται συγκεκριμένες απαντήσεις,
  αφαιρώντας οποιαδήποτε μη ουσιώδη πληροφορία.
  Αυτή η προσέγγιση διατηρεί τα μοντέλα διαχειρίσιμα και χρήσιμα.
  * Παροχή προοπτικής: Η μοντελοποίηση προσφέρει διάφορες διαστάσεις
  του υπό μελέτη λογισμικού, χρησιμοποιώντας ένα καθορισμένο σύνολο
  κανόνων για την έκφραση του μοντέλου στα πλαίσια κάθε διάστασης. Η
  προσέγγιση που βασίζεται στις διαστάσεις προσφέρει πλήθος διαστάσεων
  στο μοντέλο (για παράδειγμα την δομική διάσταση, την συμπεριφορική
  διάσταση, χρονική διάσταση, οργανωτική διάσταση και άλλες σχετικές
  διαστάσεις).
  Η οργάνωση των πληροφοριών σε διαστάσεις επικεντρώνει τις προσπάθειες
  για την  μοντελοποίηση  του λογισμικού σε συγκεκριμένα ζητήματα σχετικά
  με αυτή την διάσταση χρησιμοποιώντας τα κατάλληλα σύμβολα, λεξιλόγιο,
  μεθόδους και εργαλεία.
  * Ενεργοποίηση αποτελεσματικών επικοινωνιών: Η  μοντελοποίηση χρησιμοποιεί
  την εφαρμογή του λεξιλογίου του πεδίου του λογισμικού, μια γλώσσα
  μοντελοποίησης και τη έκφραση μέσω συμβόλων (με άλλα λόγια, την ουσία
  μέσα σε πλαίσιο).
  Όταν αυτά χρησιμοποιούνται αυστηρά και συστηματικά, η μοντελοποίηση
  έχει ως αποτέλεσμα μια αναφορική προσέγγιση, η οποία διευκολύνει την
  αποτελεσματική επικοινωνία ανάμεσα στις πληροφορίες του λογισμικού
  και στα ενδιαφερόμενα μέλη του έργου.

Ένα μοντέλο είναι μια αφαίρεση ή μια απλοποίηση ενός συστατικού
στοιχείου του λογισμικού. Μια συνέπεια της χρήσης αφαίρεσης είναι ότι, επειδή καμία  
μεμονωμένη αφαίρεση δεν περιγράφει ολοκληρωτικά ένα συστατικό στοιχείο, το μοντέλο 
λογισμικού περιλαμβάνει μια συνάθροιση αφαιρέσεων, οι οποίες, όταν συνδυάζονται, 
περιγράφουν επιλεγμένες πτυχές, οπτικές ή όψεις -μόνο εκείνες οι οποίες 
χρειάζονται για να παρθούν αποφάσεις πλήρους πληροφόρησης και να 
ανταποκρίνονται στους σκοπούς δημιουργίας του μοντέλου αρχικά. 
Αυτή η απλοποίηση οδηγεί σε μια σειρά παραδοχών
σχετικές με το αν το πλαίσιο, εντός του οποίου τοποθετείται το μοντέλο,
θα πρέπει επίσης να συμπεριληφθεί στο μοντέλο.
Έπειτα, όταν το μοντέλο επαναχρησιμοποιείται, μπορούν πρώτα να επικυρωθούν
αυτές οι παραδοχές, ώστε να καθιερώσουν την  συσχέτιση μεταξύ του
επαναχρησιμοποιημένου μοντέλου και της νέας του χρήσης και πλαισίου.

### Ιδιότητες και έκφραση των μοντέλων

Οι ιδιότητες του μοντέλου είναι αυτά τα ιδιαίτερα χαρακτηριστικά ενός
συγκεκριμένου μοντέλου, τα οποία περιγράφουν την
πληρότητα, την συνέπεια και την ορθότητα εντός των επιλεγμένων συμβολισμών
και χρησιμοποιούμενων εργαλείων μοντελοποίησης.
Οι ιδιότητες των μοντέλων περιλαμβάνουν τα ακόλουθα:

  * Πληρότητα: Ο βαθμός που όλες οι απαιτήσεις έχουν εφαρμοστεί
  και επαληθευτεί εντός μοντέλου.
  * Συνέπεια: Ο βαθμός που το μοντέλο περιέχει μη αντικρουόμενες
  απαιτήσεις, παραδοχές, περιορισμούς, λειτουργίες ή περιγραφές συστατικών
  στοιχείων.
  * Ορθότητα: Ο βαθμός που το μοντέλο ικανοποιεί τις απαιτήσεις του,
  τις προδιαγραφές σχεδιασμού του και δεν παρουσιάζει σφάλματα.

Τα μοντέλα κατασκευάζονται, ώστε να αναπαριστούν τα πραγματικά αντικείμενα
και τις συμπεριφορές τους, ώστε να απαντούν σε συγκεκριμένες ερωτήσεις
σχετικές με το πως το λογισμικό αναμένεται να λειτουργεί. Η εκτενής
ανάλυση των μοντέλων -μέσω εξερεύνησης, προσομοίωσης, ή αναθεώρηση- 
μπορεί να εκθέσει περιοχές αβεβαιότητας εντός του μοντέλου και του
λογισμικού στο οποίο αναφέρεται το μοντέλο. 
Αυτές οι αμφιβολίες ή τα αναπάντητα ερωτήματα που σχετίζονται με τις
απαιτήσεις, τον σχεδιασμό ή/και την εφαρμογή μπορούν εν συνεχεία να
διαχειρίζονται καταλλήλως.

Το κύριο στοιχείο έκφρασης ενός μοντέλου είναι η οντότητα. Μια οντότητα
μπορεί να αναπαριστά συγκεκριμένα  αντικείμενα (για παράδειγμα επεξεργαστές,
αισθητήρες ή ρομπότ), ή αφηρημένα αντικείμενα (για παράδειγμα λειτουργικές
ενότητες λογισμικού ή πρωτόκολλα επικοινωνίας). Οι οντότητες των μοντέλων
συνδέονται με άλλες οντότητες χρησιμοποιώντας σχέσεις (γραμμές ή φορείς 
κειμένου στις στοχευόμενες οντότητες). Η έκφραση μιας 
οντότητας μοντέλου μπορεί να επιτυγχάνεται με την χρήση κειμενικών
ή γραφικών γλωσσών μοντελοποίησης και οι δυο αυτοί τύποι ενώνουν τις
οντότητες του μοντέλου μέσω συγκεκριμένων γλωσσικών κατασκευών. Το
νόημα της οντότητας μπορεί να αναπαριστάται μέσω του σχήματος της,
των κειμενικών χαρακτηριστικών της ή και των δύο. Γενικά, οι κειμενικές
πληροφορίες τηρούν την συντακτική δομή της εκάστοτε γλώσσας.
Οι ακριβείς έννοιες  που σχετίζονται με την μοντελοποίηση του πλαισίου,
της δομής ή της συμπεριφοράς, που αφορά αυτές τις οντότητες και τις
σχέσεις, εξαρτάται από την γλώσσα μοντελοποίησης που χρησιμοποιείται,
τον αυστηρό σχεδιασμό που εφαρμόζεται κατά την προσπάθεια της μοντελοποίησης,
τη συγκεκριμένη διάσταση που κατασκευάζεται και την οντότητα με την
οποία το συγκεκριμένο σύμβολο μπορεί να συνδέεται. Μπορεί να χρειάζονται
πολλαπλές διαστάσεις του μοντέλου, ώστε να καλυφθούν οι αναγκαίες
συμβολισμού του λογισμικού.

Όταν τα μοντέλα που χρησιμοποιούνται υποστηρίζονται από αυτοματοποίηση,
τότε μπορούν να ελέγχονται για ολοκλήρωση και για συνέπεια. Η χρησιμότητα
αυτών των ελέγχων εξαρτάται σε μεγάλο βαθμό από το επίπεδο της χρήσης
γραφικών συμβόλων και της συντακτικής αυστηρότητας που εφαρμόζεται
κατά την προσπάθεια μοντελοποίησης, καθώς επίσης και από την συγκεκριμένη
υποστήριξη από τα εργαλεία μοντελοποίησης.
Η ορθότητα ελέγχεται τυπικά μέσω της προσομοίωσης ή/και  της επιθεώρησης.

### Σύνταξη, χρήση γραφικών συμβόλων και πραγματολογία

Τα μοντέλα μπορεί να γίνουν εκπληκτικά παραπλανητικά. Το γεγονός πως
ένα μοντέλο είναι μια αφαίρεση στην οποία λείπει πληροφόρηση μπορεί
να οδηγήσει σε ψευδή αίσθηση της εξ ολοκλήρου κατανόησης του λογισμικού
από ένα και μόνο μοντέλο. Ένα πλήρες μοντέλο (πλήρες σε σχέση με την
προσπάθεια μοντελοποίησης) μπορεί να είναι μια ένωση μεταξύ πολλαπλών
υπομοντέλων και οποιονδήποτε μοντέλων ειδικής λειτουργίας.
Η εξέταση και η λήψη αποφάσεων που σχετίζονται με ένα μοντέλο στα
πλαίσια αυτού του συνόλου υπομοντέλων μπορεί να είναι προβληματική.

Η κατανόηση των ακριβών εννοιών των δομών μοντελοποίησης μπορεί να
είναι επίσης δύσκολη. Οι γλώσσες μοντελοποίησης χαρακτηρίζονται από
συντακτικούς και συμβολικούς κανόνες. Στις κειμενικές γλώσσες μοντελοποίησης 
, η σύνταξη ορίζεται με την χρήση μίας συμβολικής γραμματικής, η οποία 
ορίζει τις έγκυρες γλωσσικές δομές (για παράδειγμα η φόρμα Backus-Naurform (BNF)).
Στις γραφικές γλώσσες μοντελοποίησης, η σύνταξη ορίζεται με την χρήση γραφικών
μοντέλων, τα οποία ονομάζονται μεταμοντέλα. 
Όπως και με την BNF, τα μεταμοντελα ορίζουν την έγκυρη συντακτική
δομή μιας γραφικής γλώσσας μοντελοποίησης και καθορίζει πως αυτές
οι δομές μπορούν να συντεθούν ώστε να παράγουν επικυρωμένα μοντέλα.

Η χρήση γραφικών συμβόλων για τις γλώσσες μοντελοποίησης προσδιορίζει
τις έννοιες που αφορούν τις οντότητες και τις σχέσεις του μοντέλου.
Για παράδειγμα, ένα απλό διάγραμμα  το οποίο αποτελείται από δύο κουτιά
συνδεδεμένα με μία γραμμή μπορεί να έχει μια σωρεία ερμηνειών.
Γνωρίζοντας όμως πως το διάγραμμα στο οποίο τοποθετούνται και συνδέονται
τα κουτιά είναι ένα διάγραμμα αντικειμένων ή ένα διάγραμμα δραστηριοτήτων
μπορεί να βοηθήσει στην ερμηνεία του συγκεκριμένου μοντέλου.

Πρακτικά υπάρχει συνήθως καλή κατανόηση της χρήσης γραφικών συμβόλων
ενός συγκεκριμένου μοντέλου λογισμικού λόγω της γλώσσας μοντελοποίησης
που έχει  επιλεχθεί, του πως αυτή η γλώσσα μοντελοποίησης χρησιμοποιείται
για να εκφράσει τις οντότητες και τις σχέσεις μέσα στο μοντέλο, την
εμπειρία αυτού/αυτών που δημιουργούν το μοντέλο και το πλαίσιο στο
οποίο η μοντελοποίηση έχει επιχειρηθεί και αναπαρασταθεί. Οι έννοιες 
του μοντέλου γνωστοποιούνται μέσω του ίδιου του μοντέλου ακόμα και
αν υπάρχει ελλιπής πληροφορία λόγω αφαίρεσης.
Η πραγματολογία εξηγεί το πώς οι έννοιες είναι ενσωματωμένες στο μοντέλο
και στα πλαίσια του και έτσι γίνεται εύκολη η διάδοση τους σε άλλους
μηχανικούς λογισμικού.

Παρόλα αυτά, υπάρχουν ακόμα περιπτώσεις που χρειάζεται προσοχή, όσον
αφορά την μοντελοποίηση και την χρήση γραφικών συμβόλων. Για παράδειγμα,
οποιοδήποτε μέρος του μοντέλου, το οποίο έχει εισαχθεί από κάποιο
άλλο μοντέλο ή βιβλιοθήκη, πρέπει να εξετάζεται ως προς τις συμβολικές
του παραδοχές, οι οποίες αντικρούονται με το νέο περιβάλλον μοντελοποίησης.
Αυτές μπορεί να μην είναι προφανείς. Το μοντέλο θα πρέπει να ελέγχεται
ως προς τεκμηριωμένες παραδοχές. Ενώ η σύνταξη μοντελοποίησης μπορεί
να είναι πανομοιότυπη, το μοντέλο μπορεί να σημαίνει κάτι διαφορετικό στο
νέο περιβάλλον, που είναι ένα διαφορετικό πλαίσιο. Επιπλέον, αν αναλογιστούμε
πως όσο το λογισμικό ωριμάζει και γίνονται αλλαγές πάνω σε αυτό μπορεί
να δημιουργηθεί συμβολική ασυμφωνία, η οποία θα οδηγήσει σε σφάλματα.
Έχοντας πολλούς μηχανικούς λογισμικού να δουλεύουν πάνω σε ένα μέρος
του μοντέλου στο άνυσμα του χρόνου, σε συνδυασμό και με τις ενημερώσεις
των εργαλείων που χρησιμοποιούνται και ίσως και νέες απαιτήσεις που
μπορεί να δημιουργούνται, υπάρχουν πιθανότητες μέρος του μοντέλου
να αναπαριστά κάτι πολύ διαφορετικό από αυτό που είχε αρχικά ως πρόθεση
ο συντάκτης του μοντέλου να δημιουργήσει αλλά και από το αρχικό πλαίσιο
του μοντέλου.

### Προϋποθέσεις, μετασυνθήκες και  αναλλοίωτα χαρακτηριστικά

Όταν μοντελοποιούνται οι  λειτουργίες ή μέθοδοι, ο μηχανικός λογισμικού
ξεκινά τυπικά με ένα σετ παραδοχών σχετικές με την κατάσταση του λογισμικού
πριν, κατά την διάρκεια και μετά την εκτέλεση των συναρτήσεων ή μεθόδων.
Αυτές οι παραδοχές είναι απαραίτητες για την ορθή λειτουργία των μεθόδων
ή των συναρτήσεων και ομαδοποιούνται για περεταίρω ανάλυση ως ένα
σετ από προϋποθέσεις, μετασυνθήκες και αναλλοίωτα χαρακτηριστικά.

  * Προϋποθέσεις: είναι ένα σετ από συνθήκες που πρέπει να ικανοποιούνται
  πριν την εκτέλεση της μεθόδου ή της λειτουργίας.
  Αν αυτές οι προϋποθέσεις δεν πληρούνται πριν την εκτέλεση της μεθόδου
  ή της λειτουργίας, τότε η μέθοδος ή η λειτουργία μπορεί να παράγει
  λανθασμένα αποτελέσματα.
  * Μετασυνθήκες: είναι ένα σετ από συνθήκες που είναι σίγουρο
  ότι θα ισχύουν αν η λειτουργία ή η μέθοδος έχει εκτελεστεί επιτυχώς.
  Τυπικά απεικονίζουν το πώς άλλαξε η κατάσταση του λογισμικού, το
  πώς οι παράμετροι που έχουν περασθεί άλλαξαν στην μέθοδο ή στην λειτουργία,
  το πώς άλλαξαν οι τιμές των δεδομένων ή το πώς έχει επηρεασθεί η τιμή
  που επιστρέφεται.
  * Αναλλοίωτα χαρακτηριστικά: Είναι ένα σετ από συνθήκες εντός του
  λειτουργικού περιβάλλοντος οι οποίες είναι συνεπείς, με άλλα λόγια
  δεν αλλάζουν, πριν και μετά την εκτέλεση της λειτουργίας ή της μεθόδου.
  Τα αναλλοίωτα χαρακτηριστικά είναι απαραίτητα και σχετικά με το λογισμικό
  και την ορθή διεκπεραίωση των λειτουργιών  ή των μεθόδων.



## Τύποι μοντέλων

Ένα τυπικό μοντέλο αποτελείται από ένα σύνολο υπομοντέλων. Κάθε υπομοντέλο
είναι μια μερική περιγραφή και δημιουργείται για να εξυπηρετήσει
έναν συγκεκριμένο σκοπό. Μπορεί να αποτελείται από ένα ή περισσότερα
διαγράμματα. Το σύνολο των υπομοντέλων μπορεί να χρησιμοποιεί πολλαπλές
ή μονό μία γλώσσα μοντελοποίησης. Η UML (Unified Modeling Language
) αναγνωρίζει ένα μεγάλο εύρος διαγραμμάτων μοντελοποίησης. Η χρήση
αυτών των διαγραμμάτων, σε συνδυασμό με τις δομές της γλώσσας μοντελοποίησης,
έχουν ως αποτέλεσμα τρεις γενικούς τύπους μοντελοποίησης που χρησιμοποιούνται
συνήθως: τα μοντέλα πληροφοριών, τα μοντέλα συμπεριφοράς και τα μοντέλα
δομής (βλ.
παράγραφο [Αρχές μοντελοποίησης](#modeling-princ)).

### Μοντέλα πληροφοριών

Τα μοντέλα πληροφοριών επικεντρώνονται στα δεδομένα και τις πληροφορίες.
Ένα μοντέλο πληροφοριών είναι μια αφαιρετική αναπαράσταση, η οποία
προσδιορίζει και καθορίζει ένα σετ από έννοιες, ιδιότητες, σχέσεις
και περιορισμούς πάνω στις οντότητες δεδομένων. Το συμβολικό ή εννοιολογικό
μοντέλο πληροφοριών χρησιμοποιείται συχνά για να προσφέρει κάποια
τυποποίηση και κάποιο πλαίσιο στο λογισμικό, το οποίο μοντελοποιείται
από την οπτική του προβλήματος, χωρίς να το ενδιαφέρει πως αυτό το
μοντέλο αντιστοιχίζεται με την εφαρμογή του λογισμικού στην πραγματικότητα.
Το συμβολικό ή εννοιολογικό μοντέλο πληροφοριών είναι αφαιρετικό,
συνεπώς περιλαμβάνει μόνο τις έννοιες, τις ιδιότητες, τις σχέσεις
και τους περιορισμούς που χρειάζονται ώστε να γίνει αντιληπτή η πραγματική
οπτική της πληροφορίας.
Οι μετέπειτα αλλαγές στο συμβολικό ή εννοιολογικό πληροφοριακό μοντέλο
οδηγούν στην επεξεργασία των λογικών και έπειτα των φυσικών μοντέλων
δεδομένων όπως αυτά εφαρμόζονται στο λογισμικό.

### Μοντέλα συμπεριφοράς


Το μοντέλο συμπεριφοράς προσδιορίζει και καθορίζει τις λειτουργίες
του λογισμικού, που μοντελοποιείται. Τα μοντέλα συμπεριφοράς παίρνουν
τρεις βασικές μορφές: μηχανές κατάστασης, μοντέλα ροής ελέγχου και
μοντέλα ροής δεδομένων. Οι μηχανές κατάστασης παρέχουν ένα μοντέλο
λογισμικού σαν ένα σύνολο από καθορισμένες καταστάσεις, γεγονότα και
μεταβάσεις. Το λογισμικό μεταβιβάζεται από την μία κατάσταση στην
επόμενη μέσω ενός  επιβλεπόμενου ή  μη γενεσιουργού γεγονότος, το
οποίο λαμβάνει χώρα στα πλαίσια του περιβάλλοντος στο οποίο γίνεται
η μοντελοποίηση. Τα μοντέλα ροής ελέγχου απεικονίζουν πώς μια ακολουθία
γεγονότων προκαλεί την ενεργοποίηση ή την απενεργοποίηση διαδικασιών.
Η συμπεριφορά ενός μοντέλου ροής δεδομένων αποτυπώνονται ως μια ακολουθία
βημάτων, στην οποία τα δεδομένα, περνούν μέσω των διεργασιών στις
αποθήκες δεδομένων ή στους αποδέκτες δεδομένων.

### Μοντέλα δομής

Τα μοντέλα δομής απεικονίζουν τη φυσική ή τη λογική σύνθεση του
λογισμικού από τα διάφορα στοιχεία του. Η μοντελοποίηση της δομής
καθορίζει τα ορισμένα όρια μεταξύ του λογισμικού, το οποίο μοντελοποιείται
ή υλοποιείται, και του περιβάλλοντος στο οποίο αυτό πρόκειται να λειτουργήσει.
Μερικές κοινές δομικές μορφές που χρησιμοποιούνται στην μοντελοποίηση
της δομής είναι η σύνθεση, η αποσύνθεση, η γενίκευση και εξειδίκευση
των οντοτήτων, ο προσδιορισμός των σχετικών συσχετίσεων και του απόλυτου
αριθμού αυτών ανάμεσα στις οντότητες και των διαδικασιών ή των λειτουργικών
διεπαφών.
Τα μοντέλα δομής παρέχονται από την UML για την μοντελοποίηση της
δομής η οποία περιλαμβάνει διαγράμματα κλάσεων, εξαρτημάτων, αντικειμένων,
ανάπτυξης και πακετοποίησης.

## Μοντέλα ανάλυσης


Η ανάπτυξη των μοντέλων δίνει στον μηχανικό λογισμικού μια ευκαιρία
να μελετήσει, να αιτιολογήσει και να κατανοήσει την δομή, την λειτουργία,
την λειτουργική χρήση και συγκροτεί ζητήματα σχετικά με το λογισμικό.
Η ανάλυση των δομημένων μοντέλων χρειάζεται ώστε να διασφαλιστεί ότι
αυτά τα μοντέλα είναι ολοκληρωμένα, συνεπή και αρκετά ορθά ώστε
να εξυπηρετήσουν τον επιδιωκόμενο σκοπό των ενδιαφερόμενων μελών.

Οι ενότητες που ακολουθούν περιγράφουν εν συντομία τις τεχνικές ανάλυσης
που χρησιμοποιούνται ευρέως παράλληλα με τα μοντέλα λογισμικού προκειμένου
να διασφαλίσουν ότι οι μηχανικοί λογισμικού και άλλα σχετικά ενδιαφερόμενα
μέλη κερδίζουν την κατάλληλη αξία από την ανάπτυξη και τη χρήση των
μοντέλων.

### Αναλύοντας για πληρότητα

Για να έχουμε λογισμικό που ανταποκρίνεται εξ ολοκλήρου στις ανάγκες
των ενδιαφερόμενων μελών, η πληρότητα είναι κρίσιμης σημασίας, από
το στάδιο εκμαίευσης απαιτήσεων έως το στάδιο της υλοποίησης του κώδικα.
Η πληρότητα είναι ο βαθμός στον οποίο όλες οι προσδιορισμένες απαιτήσεις
έχουν εφαρμοστεί και επαληθευτεί. Τα μοντέλα μπορεί να ελέγχονται
ως προς την πληρότητα από ένα εργαλείο μοντελοποίησης, το οποίο χρησιμοποιεί
τεχνικές όπως η δομική ανάλυση και η ανάλυση προσβασιμότητας κατάστασης-χώρου,
οι οποίες διασφαλίζουν πως όλα τα μονοπάτια στα μοντέλα κατάστασης
έχουν δημιουργηθεί από ένα σετ σωστών εισροών. Τα μοντέλα μπορεί να
ελέγχονται ακόμα ως προς την πληρότητα χειροκίνητα χρησιμοποιώντας
επιθεωρήσεις ή άλλες τεχνικές ανασκόπησης (βλ. στο γνωστικό πεδίο
[Ποιότητα λογισμικού](#softquality)).
Τα σφάλματα και οι προειδοποιήσεις που δημιουργούνται από αυτά τα
εργαλεία ανάλυσης και διαπιστώνονται από τις επιθεωρήσεις ή από τις
ανασκοπήσεις, υποδεικνύουν πιθανές αναγκαίες διορθωτικές κινήσεις,
ώστε να διασφαλιστεί η πληρότητα των μοντέλων.

### Αναλύοντας για συνέπεια

Συνέπεια είναι ο βαθμός  στον οποίο τα μοντέλα δεν περιλαμβάνουν αντικρουόμενες
περιγραφές ως προς απαιτήσεις, παραδοχές, περιορισμούς, λειτουργίες
ή στοιχεία. Τυπικά, ο έλεγχος της συνέπειας επιτυγχάνεται με το εργαλείο
μοντελοποίησης χρησιμοποιώντας μια αυτοματοποιημένη λειτουργία ανάλυσης.
Τα μοντέλα επίσης μπορεί να ελέγχονται ως προς τη συνέπεια χειροκίνητα
χρησιμοποιώντας επιθεωρήσεις ή άλλες τεχνικές ανασκόπησης (βλ. στο
γνωστικό πεδίο [Ποιότητα λογισμικού](#softquality)).
Όπως και με την πληρότητα, τα λάθη και οι προειδοποιήσεις που δημιουργούνται
από αυτά τα εργαλεία ανάλυσης και διαπιστώνονται από τους ελέγχους
ή τις ανασκοπήσεις, υποδεικνύουν την ανάγκη για διορθωτικές κινήσεις.

### Αναλύοντας για ορθότητα


Ορθότητα είναι ο βαθμός στον οποίο ένα μοντέλο ικανοποιεί τις απαιτήσεις
λογισμικού και τις προδιαγραφές σχεδιασμού του λογισμικού, είναι
απαλλαγμένο από σφάλματα και τελικά πληροί τις ανάγκες των ενδιαφερόμενων
μελών.
Η ανάλυση για ορθότητα περιλαμβάνει την επαλήθευση της συντακτικής
ορθότητας του μοντέλου, εν ολίγοις τη σωστή χρήση της γραμματικής
και δομής της γλώσσας μοντελοποίησης, και την επαλήθευση της ορθής
χρήσης γραφικών συμβόλων του μοντέλου, εν ολίγοις τη χρήση της δομής
της γλώσσας μοντελοποίησης, ώστε να αναπαραστήσει σωστά το νόημα του
υπό μοντελοποίηση λογισμικού. Η ανάλυση ενός μοντέλου ως προς
την συντακτική και συμβολική του ορθότητα γίνεται είτε
αυτόματα, για παράδειγμα χρησιμοποιώντας το εργαλείο μοντελοποίησης,
ώστε να ελεγχθεί η συντακτική ορθότητα του μοντέλο, είτε χειροκίνητα,
χρησιμοποιώντας επιθεωρήσεις ή άλλες τεχνικές ανασκόπησης, ψάχνοντας
για πιθανά σφάλματα και έπειτα απομακρύνοντας ή επιδιορθώνοντας τα
αποδεδειγμένα σφάλματα πριν το λογισμικό εκδοθεί προς χρήση.

### Ιχνηλασιμότητα


Η ανάπτυξη του λογισμικού τυπικά περιλαμβάνει τη χρήση, τη δημιουργία
και την τροποποίηση πολλών προϊόντων εργασίας, όπως είναι τα έγγραφα
σχεδιασμού, η προδιαγραφές διεργασίας, οι απαιτήσεις λογισμικού, τα
διαγράμματα, οι σχεδιασμοί και ο ψευδοκώδικας, ένας χειρόγραφος και
παραγόμενος από εργαλεία κώδικας, τα εγχειρίδια, οι αυτοματοποιημένες
αναφορές και περιπτώσεις ελέγχων, τα αρχεία και τα δεδομένα. Αυτά
τα προϊόντα εργασίας ίσως σχετίζονται με διάφορες σχέσεις εξάρτησης,
για παράδειγμα χρήσεις, εφαρμογές και ελέγχους. Καθώς το λογισμικό
αναπτύσσεται, διαχειρίζεται, συντηρείται ή επεκτείνεται, υπάρχει
η ανάγκη για χαρτογράφηση και έλεγχο αυτών των σχέσεων ιχνηλασιμότητας,
ώστε να αποδείξουμε την συνέπεια των απαιτήσεων του λογισμικού με
το μοντέλο λογισμικού (βλ. παράγραφο [Ιχνηλασιμότητα απαιτήσεων](#tr-req),
στο γνωστικό πεδίο Απαιτήσεις λογισμικού) και τα πολλά προϊόντα εργασίας.
Η χρήση της ιχνηλασιμότητας γενικά βελτιώνει τη διαχείριση των προϊόντων
εργασίας  του λογισμικού και την ποιότητα της διεργασίας λογισμικού.
Επίσης διαβεβαιώνει στα ενδιαφερόμενα μέλη, πως όλες οι απαιτήσεις
έχουν ικανοποιηθεί.

Η ιχνηλασιμότητα ενεργοποιεί την ανάλυση των αλλαγών από την στιγμή
που το λογισμικό αναπτύσσεται και εκδίδεται και οι απαιτήσεις του
προϊόντος λογισμικού μπορούν να διασταυρωθούν εύκολα για να προσδιοριστεί
το αντίκτυπο της αλλαγής. Τα εργαλεία μοντελοποίησης παρέχουν κάποια
αυτοματοποιημένα ή χειροκίνητα μέσα για τον καθορισμό και την διαχείριση
των συνδέσμων ιχνηλασιμότητας μεταξύ των οντοτήτων απαιτήσεων, σχεδιασμού,
κώδικα ή/και ελέγχου, όπως απεικονίζονται στο μοντέλο ή σε άλλα προϊόντα
του λογισμικού (βλ.
στο γνωστικό πεδίο [Διαχείριση σχηματισμών λογισμικού](#softconfigmng), για περισσότερες
πληροφορίες σχετικά με την ιχνηλασιμότητα).

### Ανάλυση αλληλεπίδρασης


Η ανάλυση της αλληλεπίδρασης επικεντρώνεται στις επικοινωνίες ή ελέγχει
τις σχέσεις ροής μεταξύ των οντοτήτων που χρησιμοποιούνται, ώστε να
επιτευχθεί η συγκεκριμένη εργασία ή λειτουργία μέσα στα πλαίσια του
μοντέλου του λογισμικού. Αυτή η ανάλυση εξετάζει τη δυναμική συμπεριφορά
των αλληλεπιδράσεων μεταξύ των διαφορετικών τμημάτων του μοντέλου
του λογισμικού, περιλαμβάνοντας και άλλα στρώματα λογισμικού, όπως
το λειτουργικό σύστημα, το ενδιάμεσο λογισμικό και εφαρμογές. Μπορεί
επίσης να είναι σημαντικό για κάποιες εφαρμογές να εξετάζουν αλληλεπιδράσεις
μεταξύ της εφαρμογής λογισμικού του υπολογιστή και του λογισμικού
της διεπαφής χρήστη. Κάποια περιβάλλοντα μοντελοποίησης λογισμικού
παρέχουν εγκαταστάσεις προσομοίωσης για τη μελέτη των πτυχών της δυναμικής
συμπεριφοράς του υπό μοντελοποίηση λογισμικού.
Κατά τη διαδικασία της προσομοίωσης προσφέρεται στον μηχανικό λογισμικού
μία επιλογή για την ανάλυση, ώστε να επιθεωρήσει το σχεδιασμό αλληλεπίδρασης
και να επαληθεύσει ότι τα διάφορα μέρη του λογισμικού συνεργάζονται
έτσι ώστε να παρέχουν εν τέλει τις λειτουργίες για τις οποίες προορίζεται.

## Μέθοδοι τεχνολογίας λογισμικού


Οι μέθοδοι τεχνολογίας του λογισμικού παρέχουν μια οργανωμένη και
συστηματική προσέγγιση στην ανάπτυξη λογισμικού για έναν υπολογιστή.
Υπάρχουν πολυάριθμες μέθοδοι που μπορούμε να επιλέξουμε, και είναι
σημαντικό για τον μηχανικό του λογισμικού να επιλέξει την κατάλληλη/ες
μέθοδο/ους για το λογισμικό που αναπτύσσει. Αυτή η επιλογή μπορεί να
επιδρά σημαντικά στην επιτυχία του έργου.
Η χρήση αυτών των μεθόδων τεχνολογίας λογισμικού σε συνδυασμό με ανθρώπους
που έχουν το κατάλληλο σύνολο ικανοτήτων και εργαλείων, επιτρέπει
στους μηχανικούς λογισμικού να οπτικοποιήσουν τις λεπτομέρειες του
λογισμικού και τελικώς να μετασχηματίσουν αυτήν την αναπαράσταση σε
ένα λειτουργικό σύνολο κώδικα και δεδομένων.

Παρακάτω αναλύονται κάποιες επιλεγμένες μέθοδοι τεχνολογίας λογισμικού.
Οι θεματικές περιοχές οργανώνονται σε αναλύσεις των Ευρετικών Μεθόδων,
των Τυπικών Μεθόδων, των Μεθόδων Πρωτοτυποποίησης, και των Ευέλικτων
Μεθόδων.

### Ευρετικές μέθοδοι


Οι ευρετικές μέθοδοι, είναι εκείνες οι μέθοδοι της τεχνολογίας λογισμικού,
οι οποίες βασίζονται στην εμπειρία και χρησιμοποιούνται ευρέως στην
βιομηχανία του λογισμικού.
Αυτή η θεματική περιοχή περιέχει τρεις βασικές κατηγορίες προς συζήτηση:
τις μεθόδους δομημένης ανάλυσης και σχεδιασμού, τις μεθόδους μοντελοποίησης
δεδομένων και τις μεθόδους αντικειμενοστραφούς ανάλυσης και σχεδιασμού.

  * Μέθοδοι δομημένης ανάλυσης και σχεδιασμού: το μοντέλο του λογισμικού
  αναπτύσσεται κυρίως από την οπτική της λειτουργικότητας ή της συμπεριφοράς,
  ξεκινώντας από μία οπτική υψηλού επιπέδου του λογισμικού συμπεριλαμβανομένων
  των στοιχείων ελέγχου και δεδομένων και έπειτα αποσυνθέτει ή βελτιώνει
  σταδιακά τα συστατικά στοιχεία του μοντέλου μέσω όλο και πιο λεπτομερών
  σχεδιασμών.
  Οι λεπτομερείς σχεδιασμοί τελικά συγκλίνουν σε πολύ συγκεκριμένες
  λεπτομέρειες ή προδιαγραφές του λογισμικού που πρέπει να γραφτούν
  σε κώδικα με το χέρι, αυτόματα ή συνδυαστικά, να δομηθούν, να ελεγχθούν
  και να επαληθευτούν.
  * Μέθοδοι μοντελοποίησης δεδομένων: το μοντέλο δεδομένων είναι κατασκευασμένο
  από την οπτική των δεδομένων ή των πληροφοριών που χρησιμοποιούνται.
  Οι πίνακες δεδομένων και οι σχέσεις καθορίζουν τα μοντέλα δεδομένων.
  Αυτή η μέθοδος μοντελοποίησης χρησιμοποιείται κυρίως για τον προσδιορισμό
  και την ανάλυση των απαιτήσεων για δεδομένα, υποστηρίζοντας τα σχέδια
  των βάσεων δεδομένων ή τα αποθετήρια δεδομένων, τα οποία βρίσκονται
  τυπικά στο επιχειρησιακό λογισμικό, όπου τα δεδομένα διαχειρίζονται
  ενεργά ως πηγές ή πόροι των επιχειρησιακών συστημάτων.
  * Μέθοδοι αντικειμενοστραφούς ανάλυσης και σχεδιασμού: το αντικειμενοστραφές
  μοντέλο αναπαριστάται ως μία συλλογή από αντικείμενα, τα οποία ενσωματώνουν
  δεδομένα και σχέσεις και διαδρούν με άλλα αντικείμενα μέσω μεθόδων.
  Τα αντικείμενα μπορεί να είναι πραγματικά ή εικονικά στοιχεία. Το
  μοντέλο λογισμικού δομείται χρησιμοποιώντας διαγράμματα, ώστε να αποδώσει
  την επιλεγμένες οπτικές του λογισμικού. Η σταδιακή βελτίωση του μοντέλου
  λογισμικού οδηγεί σε ένα λεπτομερές σχέδιο.
  Το λεπτομερές σχέδιο, τότε είτε εξελίσσεται μέσω της επιτυχούς επανάληψης
  είτε μετασχηματίζεται (χρησιμοποιώντας κάποιους μηχανισμούς) στην
  οπτική της εφαρμογής του μοντέλου, όπου εκφράζεται η προσέγγιση για
  τον κώδικα και την πακετοποίηση για την ανάπτυξη και έκδοση του τελικού
  προϊόντος λογισμικού.

### Τυπικές μέθοδοι {#formal-meth}

Οι τυπικές μέθοδοι είναι μέθοδοι τεχνολογίας λογισμικού, που χρησιμοποιούνται
για να προσδιορίσουν, να αναπτύξουν και να επαληθεύσουν το λογισμικό
μέσω της εφαρμογής ενός αυστηρού μαθηματικού συμβολισμού και γλώσσας.
Μέσω της χρήσης, μιας γλώσσας προδιαγραφών, το μοντέλο λογισμικού
μπορεί να ελεγχθεί για συνέπεια, δηλαδή, την έλλειψη αμφισημίας, πληρότητα
και ορθότητα, με ένα συστηματικό και αυτόματο ή ημιαυτόματο τρόπο.
Αυτή η ενότητα σχετίζεται με την παράγραφο Τυπική ανάλυση, στο
γνωστικό πεδίο Απαιτήσεις λογισμικού.
Αυτός ο τομέας ασχολείται με τις γλώσσες προδιαγραφών, την βελτίωση
και παραγωγή προγραμμάτων, την τυπική επαλήθευση και το λογικό συμπέρασμα.

  * Γλώσσες προδιαγραφών: οι γλώσσες προδιαγραφών παρέχουν την μαθηματική
  βάση για μία τυπική μέθοδο. Οι γλώσσες προδιαγραφών είναι επίσημες
  υψηλού επιπέδου γλώσσες υπολογιστών, με άλλα λόγια, δεν είναι κλασικές
  γλώσσες προγραμματισμού 3ης γενιάς (3rd Generation Language)(3GL),
  οι οποίες χρησιμοποιούνται κατά την διάρκεια της προδιαγραφής του
  λογισμικού, της ανάλυσης απαιτήσεων, ή/και των σταδίων σχεδιασμού
  για να περιγράψουν την συγκεκριμένη συμπεριφορά εισόδου/εξόδου. Οι
  γλώσσες προδιαγραφών δεν είναι απευθείας εκτελέσιμες γλώσσες.
  Αποτελούνται τυπικά από ένα συμβολισμό και σύνταξη, την σημασιολογία
  για την χρήση του συμβολισμού και ένα σετ από επιτρεπόμενες σχέσεις
  που αφορούν τα αντικείμενα.
  * Βελτίωση και παραγωγή προγράμματος: η βελτίωση του προγράμματος
  είναι μια διαδικασία δημιουργίας μιας προδιαγραφής χαμηλότερου επιπέδου
  (ή μιας πιο λεπτομερούς προδιαγραφής) χρησιμοποιώντας μια σειρά από
  μετασχηματισμούς. Οι εκτελέσιμες αναπαραστάσεις ενός προγράμματος
  παράγονται από τους μηχανικούς λογισμικού μέσω αυτών των επιτυχημένων
  μετασχηματισμών. Οι προδιαγραφές μπορεί να βελτιώνονται με το να προσθέτονται
  λεπτομέρειες έως ότου το μοντέλο μπορεί να διατυπωθεί σε μια 3GL
  γλώσσα προγραμματισμού ή σε ένα εκτελέσιμο τμήμα της γλώσσας προδιαγραφών.
  Αυτή η βελτίωση προδιαγραφών δημιουργείται πιθανόν από τον καθορισμό
  των προδιαγραφών χρησιμοποιώντας ακριβείς σημασιολογικές ιδιότητες.
  Οι προδιαγραφές δεν θα πρέπει να καθορίζουν μόνο τις σχέσεις μεταξύ
  των οντοτήτων, αλλά επίσης και τις ακριβείς έννοιες αυτών των σχέσεων
  και λειτουργιών στον χρόνου λειτουργίας του λογισμικού.
  * Τυπική επαλήθευση: ο έλεγχος του μοντέλου είναι μια τυπική μέθοδος
  επαλήθευσης. Γενικά περιλαμβάνει μια εξερεύνηση της κατάστασης-χώρου
  ή μια ανάλυση προσβασιμότητας, ώστε να αποδείξει ότι το λογισμικό,
  το οποίο αναπαριστάται, διαθέτει ή διατηρεί συγκεκριμένες σημαντικές
  ιδιότητες μοντέλου. Ένα παράδειγμα ελέγχου του μοντέλου είναι μια
  ανάλυση, η οποία επικυρώνει την ορθή συμπεριφορά του προγράμματος,
  υπό όλες τις πιθανές διαπλοκές των συμβάντων ή των λήψεων μηνυμάτων.
  Η χρήση της τυπικής επαλήθευσης απαιτεί ένα αυστηρά καθορισμένο μοντέλο
  του λογισμικού και του λειτουργικού περιβάλλοντος του.
  Αυτό το μοντέλο συχνά παίρνει την μορφή μιας πεπερασμένης μηχανής
  μετάπτωσης καταστάσεων ή άλλων τυπικά καθορισμένων αυτοματισμών.
  * Λογικό συμπέρασμα: το λογικό συμπέρασμα είναι μια μέθοδος σχεδίασης
  λογισμικού, που περιλαμβάνει τον προσδιορισμό των προϋποθέσεων και
  των μετασυνθηκών αναφορικά με κάθε σημαντική κατηγορία του σχεδίου,
  και την ανάπτυξη της απόδειξης, χρησιμοποιώντας μαθηματική λογική,
  πως αυτές οι προϋποθέσεις και οι μετασυνθήκες θα πρέπει να ισχύουν
  για όλες τις εισόδους. Αυτό το γεγονός παρέχει στον μηχανικό λογισμικού
  ένα τρόπο να προβλέπει την συμπεριφορά του λογισμικού χωρίς να πρέπει
  να το εκτελέσει.
  Κάποια ολοκληρωμένα περιβάλλοντα ανάπτυξης (Integrated Development
  Environment — IDE) περιλαμβάνουν τρόπους αναπαράστασης αυτών των
  αποδείξεων μαζί με το σχέδιο ή τον κώδικα.

### Μέθοδοι πρωτοτυποποίησης

Η πρωτοτυποποίηση του λογισμικού είναι μια δραστηριότητα που γενικά
δημιουργεί ελλιπείς ή ανεπαρκείς λειτουργικές εκδόσεις μιας εφαρμογής
λογισμικού, συχνά για να δοκιμάσει συγκεκριμένα νέα χαρακτηριστικά,
να πάρει ανατροφοδότηση όσον αφορά τις απαιτήσεις λογισμικού ή τις
διεπαφές με τον χρήστη, να διερευνήσει περεταίρω τις απαιτήσεις του
λογισμικού, το σχεδιασμό του λογισμικού, τις επιλογές εφαρμογής του
λογισμικού ή/και να κερδίσει κάποια χρήσιμη βαθύτερη γνώση για το
λογισμικό. Ο  μηχανικός λογισμικού διαλέγει μια μέθοδο πρωτοτυποποίησης,
ώστε να κατανοήσει πρώτα τις λιγότερο κατανοητές πτυχές ή συστατικά
στοιχεία του λογισμικού. Αυτή η προσέγγιση, έρχεται σε αντίθεση με
άλλες μεθόδους τεχνολογίας λογισμικού που συνήθως ξεκινούν την ανάπτυξη
πρώτα με τα πιο κατανοητά μέρη του λογισμικού.
Γενικά, το πρωτότυπο, δεν αποτελεί το τελικό προϊόν λογισμικού, χωρίς
να υποστεί εκτενή επεξεργασία και εκ νέου ανάπτυξη.

Αυτή η ενότητα αναλύει εν συντομία τα στυλ, τους στόχους και τις τεχνικές
αξιολόγησης της πρωτοτυποποίησης:

  * Στυλ πρωτοτυποποίησης: αναφέρεται στις ποικίλες προσεγγίσεις της
  ανάπτυξης πρωτοτύπων. Το πρωτότυπο μπορεί να αναπτυχθεί ως προϊόν
  κώδικά ή έγγραφο, ως η εξέλιξη μιας εργασίας σχεδιασμού ή ως μια εκτελέσιμη
  προδιαγραφή. Γενικά, χρησιμοποιούνται διαφορετικές διεργασίες πρωτοτυποποίησης
  του κύκλου ζωής για κάθε στυλ.
  Το επιλεγμένο στυλ πρωτοτυποποίησης εξαρτάται από τον τύπο και την
  ποιότητα των αποτελεσμάτων που χρειάζεται το έργο και τον επείγον
  του χαρακτήρα των αποτελεσμάτων.
  * Στόχοι πρωτοτυποποίησης: ο στόχος της δραστηριότητας πρωτοτυποποίησης
  είναι το να εξυπηρετείται το συγκεκριμένο προϊόν από το εγχείρημα
  πρωτοτυποποίησης.
  Παραδείγματα των στόχων πρωτοτυποποίησης περιλαμβάνουν την προδιαγραφή
  των απαιτήσεων, ένα στοιχείο ή εξάρτημα αρχιτεκτονικού σχεδιασμού,
  έναν αλγόριθμο ή μια διεπαφή ανθρώπου-μηχανής.
  * Τεχνικές αξιολόγησης της πρωτοτυποποίησης: Ένα πρωτότυπο μπορεί
  να χρησιμοποιείται ή να αξιολογείται με πολυάριθμους τρόπους από τον
  μηχανικό λογισμικού ή άλλα ενδιαφερόμενα μέλη του έργου, με γνώμονα
  τους κύριους λόγους που οδήγησαν εξ αρχής στην δημιουργία αυτού του
  πρωτοτύπου. Τα πρωτότυπα μπορεί να αξιολογούνται ή να ελέγχονται είτε
  σε σχέση με το υλοποιημένο λογισμικό αυτό καθεαυτό είτε σε σχέση με
  ένα στοχευμένο σύνολο των απαιτήσεων, για παράδειγμα ένα πρωτότυπο
  απαιτήσεων.
  Το πρωτότυπο μπορεί επίσης να χρησιμεύει ως μοντέλο για μια μεταγενέστερη
  προσπάθεια ανάπτυξης, όπως στη προδιαγραφή μίας διεπαφής χρήστη.

### Ευέλικτες μέθοδοι {#agileMth}

Οι ευέλικτες μέθοδοι γεννήθηκαν την δεκαετία του 1990 από την ανάγκη
να μειωθεί το προφανές μεγάλο βάρος, το οποίο σχετίζεται με τις βαριές,
μεθόδους που έχουν ως βάση ένα σχέδιο και χρησιμοποιούνται σε έργα
ανάπτυξης λογισμικού μεγάλου σκέλους.
Οι ευέλικτες μέθοδοι, θεωρούνται ελαφριές μέθοδοι, διότι χαρακτηρίζονται
από μικρούς, επαναληπτικούς κύκλους ανάπτυξης, αυτοοργανωμένες ομάδες,
απλούστερα σχέδια, επαναληπτικά ανεπτυγμένους κώδικες, ανάπτυξη βασισμένη
στον έλεγχο, συχνή συμμετοχή πελατών και μια έμφαση στην δημιουργία
ενός ευπαρουσίαστου λειτουργικού προϊόντος σε κάθε κύκλο ανάπτυξης.

Πολλές ευέλικτες μέθοδοι είναι διαθέσιμες στην βιβλιογραφία.
Σε κάποιες από τις πιο δημοφιλείς προσεγγίσεις οι οποίες αναλύονται
εδώ εν συντομία, συμπεριλαμβάνονται η ταχεία ανάπτυξη εφαρμογών (Rapid
Application Development — RAD), ο ακραίος προγραμματισμός (eXtreme
Programming — XP), Scrum (επαναληπτικό και αυξανόμενο πλαίσιο για
ανάπτυξη ευέλικτου λογισμικού), η ανάπτυξη βασισμένη στα γνωρίσματα
(Feature-Driven Development — FDD):

  * RAD: οι μέθοδοι ταχείας ανάπτυξης λογισμικού, χρησιμοποιούνται
  κατά κύριο λόγο στην ανάπτυξη εφαρμογών, συστημάτων εργασίας, που
  διαχειρίζονται πολλά δεδομένα.
  Η μέθοδος RAD είναι εξοπλισμένη με ειδικού σκοπού εργαλεία  ανάπτυξης
  βάσης δεδομένων, που χρησιμοποιούνται από τους μηχανικούς λογισμικού,
  ώστε να αναπτύξουν, να ελέγξουν και να επεκτείνουν γρήγορα νέες ή
  τροποποιημένες εφαρμογές της εργασίας.
  * XP: αυτή η προσέγγιση χρησιμοποιεί ιστορίες ή σενάρια για τις
  απαιτήσεις, αναπτύσσει πρώτους ελέγχους, έχει άμεση συμμετοχή των
  πελατών στην ομάδα, τυπικά ορίζοντας δοκιμές αποδοχής, χρησιμοποιεί
  προγραμματισμό ζεύγους και παρέχει συνεχόμενο επαναληπτικά αναπτυσσόμενο
  και ολοκληρωμένο κώδικα. Οι ιστορίες αποσυνθέτονται σε εργασίες οι
  οποίες ιεραρχούνται βάσει προτεραιότητας, αξιολογούνται, αναπτύσσονται
  και ελέγχονται. Κάθε επέκταση του λογισμικού ελέγχεται με αυτόματες
  και χειροκίνητες δοκιμές.
  Μία επέκταση μπορεί να εκδίδεται συχνά, δηλαδή περίπου κάθε δύο
βδομάδες.
  * Scrum: αυτή η ευέλικτη προσέγγιση είναι φιλικότερη όσον αφορά
  τη διοίκηση του έργου από τις υπόλοιπες. Η κύρια Scrum διαχειρίζεται
  τις δραστηριότητες στα πλαίσια της εξέλιξης του έργου. Κάθε εξέλιξη
  ονομάζεται sprint και δεν διαρκεί πάνω 30 μέρες. Μια λίστα των στοιχείων
  ανεκτέλεστου προϊόντος (Product Backlog Item — PBI), αναπτύσσεται
  από εργασίες που είναι προσδιορισμένες, καθορισμένες, αξιολογημένες
  και ιεραρχημένες κατά προτεραιότητα. Μια λειτουργική έκδοση
  του λογισμικού ελέγχεται και εκδίδεται ανά κάθε εξέλιξη.
  Οι καθημερινές συναντήσεις του scrum διασφαλίζουν ότι η εργασία βαίνει
  βάση προγράμματος.
  * FDD: αυτή είναι μία μικρή και επαναληπτική προσέγγιση ανάπτυξης
  λογισμικού βάσει μοντέλου, η οποία χρησιμοποιεί μια διαδικασία πέντε
  φάσεων: (1) αναπτύσσει ένα μοντέλο προϊόντος, ώστε να οριοθετήσει
  το εύρος του τομέα, (2) δημιουργεί την λίστα των αναγκών ή των γνωρισμάτων,
  (3) δημιουργεί το σχέδιο ανάπτυξης των γνωρισμάτων (4) αναπτύσσει
  σχέδια για συγκεκριμένα επαναλαμβανόμενα γνωρίσματα και (5) κωδικοποιεί,
  ελέγχει και μετά ολοκληρώνει τα γνωρίσματα. Η FDD είναι παρόμοια
  με μια προσέγγιση ανάπτυξης ενός εξελικτικού λογισμικού. Είναι επίσης
  παρόμοια με τον XP, εκτός από το γεγονός ότι κυριότητα του κώδικα
  αποδίδεται σε μεμονωμένα άτομα αντί για την ομάδα ανάπτυξης.
  Η FDD επικεντρώνεται σε μια γενική αρχιτεκτονική προσέγγιση του
  λογισμικού, η οποία προάγει την σωστή δόμηση ενός γνωρίσματος την πρώτη
  φορά, αντί να επικεντρώνεται στην συνεχόμενη ανάπτυξη.

Υπάρχουν πολλές ακόμα παραλλαγές των ευέλικτων μεθόδων στην πρακτική
και στην βιβλιογραφία. Σημειώστε ότι θα υπάρχει πάντα ένα μέρος για
τις βαριές, βάσει σχεδίου μεθόδους τεχνολογίας λογισμικού, όπως ακόμα
και μέρη όπου οι ευέλικτες μέθοδοι διαπρέπουν. Υπάρχουν νέες μέθοδοι,
οι οποίες αναπτύσσονται από τον συνδυασμό των ευέλικτων και των βάσει
σχεδίου μεθόδων, στις οποίες οι επαγγελματίες καθορίζουν νέες μεθόδους,
οι οποίες εξισορροπούν τα απαιτούμενα γνωρίσματα των βαριών και των
ελαφριών μεθόδων, στοχεύοντας κυρίως στο να επικρατήσουν οι οργανωτικές
εργασιακές ανάγκες.
Αυτές οι εργασιακές ανάγκες, εκπροσωπούνται συνήθως από κάποια από
τα ενδιαφερόμενα μέλη του έργου και καθοδηγούν, καθώς είναι απαραίτητο, την
επιλογή να χρησιμοποιείται μία μέθοδος τεχνολογίας λογισμικού έναντι
μιας άλλης ή να δημιουργείται μία νέα μέθοδος από τον συνδυασμό των
καλύτερων γνωρισμάτων κάποιων άλλων μεθόδων τεχνολογίας λογισμικού.
