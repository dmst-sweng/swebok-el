# Σχεδιασμός λογισμικού

## **Ακρωνύμια**

|API 	|Application Programming Interface |
|AOD	|Aspect-Oriented Design  |
|CBD 	|Component-Based Design |
|CRC    |Class Responsibility Collaborator (or Collaboration)|
|DFD    |Data Flow Diagram |
|DSL    |Domain-Specific Language |
|ERD    |Entity Relationship Diagram |
|FOSS   |Free and Open Source Software |
|IDL    |Interface Description Language |
|MBD    |Model-Based Design |
|MDD    |Model-Driven Design |
|OO     |Object-Oriented |
|PDL    |Program Design Language|
|SDD    |Software Design Description |
|UML	|Unified Modeling Language |

## **Εισαγωγή**

Αυτό το κεφάλαιο εξετάζει τον σχεδιασμό λογισμικού από διάφορες
προοπτικές, εστιάζοντας στις βασικές έννοιες, στο πλαίσιο και
τις διαδικασίες, στα χαρακτηριστικά και τις στρατηγικές σχεδίασης
λογισμικού, καθώς και στην καταγραφή και αξιολόγηση των σχεδίων.

Ο σχεδιασμός χρησιμοποιείται με διακριτούς, αλλά στενά συνδεδεμένους
τρόπους για να αναφερθεί (1) στην αρχή ("χρήση επιστημονικών αρχών,
τεχνικών πληροφοριών και φαντασίας στον καθορισμό ενός λογισμικού
συστήματος προκειμένου να εκτελεί [προκαθορισμένες] λειτουργίες με
μέγιστη οικονομία και αποδοτικότητα"), (2) στις διαδικασίες για
τη λειτουργία μέσα στο πλαίσιο αυτής της αρχής· (3) στο αποτέλεσμα της
εφαρμογής αυτής της αρχής· και (4) στο στάδιο στον κύκλο ζωής ενός συστήματος
λογισμικού κατά το οποίο αυτές οι διαδικασίες παράγουν αυτά τα αποτελέσματα.

Η σχεδίαση λογισμικού, όπως γίνεται αντιληπτή ως δραστηριότητα του κύκλου ζωής,
είναι η εφαρμογή της αρχής της τεχνολογίας λογισμικού στην οποία οι
απαιτήσεις λογισμικού αναλύονται για να καθορίσουν τα εξωτερικά χαρακτηριστικά
και την εσωτερική δομή του λογισμικού ως βάση για την κατασκευή του λογισμικού.

Μια *περιγραφή σχεδίασης λογισμικού* (SDD) καταγράφει το αποτέλεσμα της
σχεδίασης λογισμικού. Είναι μια "αναπαράσταση του λογισμικού που
δημιουργήθηκε για να διευκολύνει την ανάλυση, τον προγραμματισμό, την
υλοποίηση και τη λήψη αποφάσεων. Η περιγραφή σχεδίασης λογισμικού
χρησιμοποιείται ως μέσο για την επικοινωνία των πληροφοριών σχεδίασης
λογισμικού και μπορεί να θεωρηθεί ως ένα σχέδιο ή μοντέλο του συστήματος.".

Η περιγραφή σχεδίασης λογισμικού, η οποία μπορεί να λάβει πολλές μορφές,
περιλαμβάνει τον διαχωρισμό του λογισμικού σε συστατικά, την οργάνωση αυτών
των συστατικών και τον καθορισμό διεπαφών μεταξύ αυτών και μεταξύ του
λογισμικού και του εξωτερικού κόσμου - σε ένα επίπεδο λεπτομέρειας
που να επιτρέπει την κατασκευή τους.

Η σχεδίαση λογισμικού λαμβάνει χώρα σε τρία στάδια:

    * αρχιτεκτονική σχεδίαση του συστήματος λογισμικού
    * υψηλού επιπέδου ή εξωτερική σχεδίαση του συστήματος και των συστατικών του
    * λεπτομερής ή εσωτερική σχεδίαση

Η αρχιτεκτονική σχεδίαση αποτελεί μέρος της αρχιτεκτονικής, που συζητείται στο
γνωστικό πεδίο της Αρχιτεκτονικής Λογισμικού.

## **Κατανομή των θεμάτων για τον σχεδιασμό λογισμικού**

{id="fig-softdesign-tree"}
![Σχήμα 3.1 Κατανομή των θεμάτων στο γνωστικό πεδίο Σχεδιασμός λογισμικού.](images/3-SoftDesign.png)

Η κατανομή των θεμάτων για τα γνωστικά πεδία του σχεδιασμού λογισμικού
απεικονίζεται στο [Σχήμα 3.1](#fig-softdesign-tree).

## **Βασικές αρχές στον σχεδιασμό λογισμικού**

Οι έννοιες, οι αντιλήψεις και ορολογία που εισάγεται εδώ αποτελούν
μια βάση για την κατανόηση του ρόλου και του πεδίο εφαρμογής του σχεδιασμού
λογισμικού.

### *Σχεδιαστική σκέψη*

Ο σχεδιασμός είναι παντού γύρω μας, στα πράγματα και τους οργανισμούς που
έχουν δημιουργηθεί για να καλύψουν μια ανάγκη ή να λύσουν ένα πρόβλημα.

Γενικότερα, ο σχεδιασμός μπορεί να γίνει αντιληπτός ως μια μορφή
επίλυσης προβλημάτων. Για παράδειγμα, η έννοια του "κακού προβλήματος" - ενός
προβλήματος χωρίς καθοριστική λύση - είναι ενδιαφέρουσα ως προς την κατανόηση
των ορίων του σχεδιασμού. Πολλές άλλες ιδέες και έννοιες μας βοηθούν να
κατανοήσουμε τον σχεδιασμό στο γενικό του πλαίσιο: στόχους, περιορισμούς,
εναλλακτικές, αναπαραστάσεις και λύσεις.
(βλ. επίσης Τεχνικές Επίλυσης Προβλημάτων στο γνωστικό πεδίο Θεμέλια
Υπολογιστικής Επιστήμης.)

Ο τρόπος σκέψης σχεδιασμού περιλαμβάνει δύο ουσιώδεις πτυχές:
(1) κατανόηση της ανάγκης ή του προβλήματος και (2) σχεδιασμός μιας λύσης.
Οι Ross, Goodenough και Irvine προσφέρουν μια επεξήγηση της σκέψης
σχεδιασμού κατάλληλη για το λογισμικό:

Αυτή η διαδικασία αποτελείται από πέντε βασικά βήματα: (1) αποκρυστάλλωση
ενός σκοπού ή στόχου, (2) διατύπωση μιας ιδέας για το πώς μπορεί να
επιτευχθεί ο σκοπός, (3) σχεδίαση ενός μηχανισμού που υλοποιεί τη δομή της
έννοιας, (4) εισαγωγή μιας σημειογραφίας για την έκφραση των δυνατοτήτων του
μηχανισμού και την κλήση της χρήσης του και (5) περιγραφή της χρήση της
σημειογραφίας σε ένα συγκεκριμένο πρόβλημα για να κληθεί ο μηχανισμός, έτσι
ώστε να επιτευχθεί ο σκοπός.

Αυτό είναι ιδιαίτερα κατάλληλο, διότι μεγάλο μέρος της σχεδίασης λογισμικού
αποτελείται από τη δημιουργία του απαραίτητου λεξιλογίου για τη διατύπωση
ενός προβλήματος, την έκφραση της λύσης του και την υλοποίηση αυτής της λύσης.
Τα βήματα τονίζουν τη γλωσσική φύση της επίλυσης προβλημάτων
σχεδίασης λογισμικού. Αυτό είναι ένα επαναλαμβανόμενο μοτίβο που βλέπουμε
σε υψηλού επιπέδου σχεδιασμό, λεπτομερή σχεδιασμό και αρχιτεκτονική
(βλ. Αρχιτεκτονική σε Μεγάλη Κλίμακα στο γνωστικό πεδίο Αρχιτεκτονική
Λογισμικού). Επομένως, ο Σχεδιασμός Λογισμικού είναι μια πρακτική διαδικασία
μετατροπής μιας δήλωσης προβλήματος σε μια δήλωση λύσης. Ο σχεδιασμός
λογισμικού μοιράζεται κοινά χαρακτηριστικά με άλλα είδη σχεδιασμού.
Ο σχεδιασμός μπορεί να κατανοηθεί περαιτέρω μέσω της θεωρίας σχεδιασμού.

### *Περιεχόμενο σχεδιασμού λογισμικού*

Ο σχεδιασμός λογισμικού είναι ένα σημαντικό κομμάτι της διαδικασίας ανάπτυξης του.
Για να καταλάβουμε το ρόλο του σχεδιασμού λογισμικού, πρέπει να δούμε πως
υφίσταται ο σχεδιασμός μέσα στον κύκλο ζωής της ανάπτυξης λογισμικού.
(βλ. το γνωστικό πεδίο Διαδικασία Λογισμικού).
Ως εκ τούτου, είναι σημαντικό να καταλάβουμε τα βασικά συστατικά και ρόλους
των απαιτήσεων λογισμικού, του σχεδιασμού λογισμικού, της κατασκευής
λογισμικού, του ελέγχου λογισμικού και της συντήρησης λογισμικού.
Το πλαίσιο διαφέρει ανάλογα με πολλούς παράγοντες, συμπεριλαμβανομένου του
βαθμού της τυπικότητας και του σταδίου του κύκλου ζωής.

Ο σχεδιασμός λογισμικού είναι η μετατροπή των απαιτήσεων, αναγκών και ανησυχιών
του πελάτη και άλλων σε εφαρμογή συγκεκριμένων προδιαγραφών σχεδίασης.
Το περιεχόμενό του περιλαμβάνει τα εξής:

    * Διεπαφή σχεδίασης με απαιτήσεις λογισμικού: Οι απαιτήσεις καθορίζουν μια
    σειρά από προβλήματα που πρέπει να επιλυθούν από τη σχεδίαση του λογισμικού.

    * Διεπαφή σχεδίασης με αρχιτεκτονική λογισμικού: Στις περιπτώσεις που έχει
    ήδη οριστεί μια αρχιτεκτονική, αυτή περιορίζει τον σχεδιασμό, αποτυπώνοντας
    κάποιες πτυχές του συστήματος: τα βασικά του συστατικά και την αλληλεπίδρασή
    τους, τις διεπαφές προγραμματισμού εφαρμογών (APIs), τους τύπους και τα
    μοτίβα που θα χρησιμοποιηθούν και τις αρχές που θα τηρηθούν και επιβληθούν
    από την αρχιτεκτονική.

    * Σχεδιασμός διεπαφής με κατασκευή λογισμικού: Ο σχεδιασμός λογισμικού πρέπει
    να παρέχει οδηγό σe αυτούς που το υλοποιούν, για την κατασκευή του συστήματος.

    * Σχεδιασμός διεπαφής με δοκιμή λογισμικού: Ο σχεδιασμός λογισμικού παρέχει
    μια βάση για μια συνολική στρατηγική δοκιμών και περιπτώσεων ελέγχου που
    εξασφαλίζουν ότι ο σχεδιασμός υλοποιείται σωστά και λειτουργεί όπως προβλέπεται.

### *Βασικά θέματα σχεδιασμού λογισμικού*

Κατά τον σχεδιασμό του λογισμικού πρέπει να αντιμετωπιστούν μια σειρά
από βασικά ζητήματα. Μερικά από αυτά τα ζητήματα σχετίζονται με ανησυχίες
για την ποιότητα που όλο το λογισμικό πρέπει να αντιμετωπίσει,
για παράδειγμα, επιδόσεις, ασφάλεια, αξιοπιστία, χρηστικότητα κ.λπ..
Ένα άλλο σημαντικό ζήτημα είναι το πώς θα αποσυντεθούν, θα οργανωθούν
και θα πακεταριστούν τα στοιχεία του λογισμικού. Είναι θεμελιώδους
σημασίας, ότι όλες οι προσεγγίσεις σχεδίασης του λογισμικού θα αντιμετωπίζουν
όλα αυτά τα ζητήματα με τον έναν ή τον άλλον τρόπο. (βλ. Παράγραφο
Αρχές σχεδιασμού λογισμικού, και ενότητα Στρατηγικές και μέθοδοι
σχεδιασμού λογισμικού).

Εν αντιθέτως, άλλα ζητήματα «αντιμετωπίζουν κάποιες πτυχές της συμπεριφοράς
του λογισμικού, που δεν είναι στον τομέα της εφαρμογής, αλλά απευθύνονται
σε υποστηρικτικούς τομείς».
Τέτοια ζητήματα, τα οποία συχνά δημιουργούν πρόβλημα στη λειτουργικότητα
του συστήματος, έχουν παραπεμφθεί ως περιστατικά, τα οποία «τείνουν
να μην είναι μονάδες της λειτουργικής αποσύνθεσης του λογισμικού,
αλλά περισσότερο είναι ιδιότητες που επηρεάζουν την απόδοση ή τη σημασία
των στοιχείων με συστημικό τρόπο».

### *Αρχές σχεδιασμού λογισμικού*

Αρχή είναι "μια θεμελιώδης αλήθεια ή πρόταση που λειτουργεί ως βάση
για ένα σύστημα πίστης ή συμπεριφοράς ή για μια αλυσίδα σκέψης.".
[Λεξικό της Αγγλικής Γλώσσας του Πανεπιστημίου της Οξφόρδης]

Οι αρχές σχεδιασμού παρέχουν κατευθυντήριες γραμμές ή καθοδήγηση για
τη λήψη αποφάσεων κατά τη διάρκεια του σχεδιασμού. Ορισμένες αρχές
προήλθαν κατά τα πρώτα χρόνια της τεχνολογίας λογισμικού, ενώ άλλες προηγούνται
αυτών χρονικά και προέρχονται από βέλτιστες πρακτικές στη μηχανική που δε
σχετίζονται με το λογισμικό. (βλ. γνωστικό πεδίο Θεμέλια της μηχανικής)
Η λήψη αποφάσεων μπορεί επίσης να βοηθηθεί από ποσοτικές μεθόδους, όπως
συζητείται στο πεδίο των Οικονομικών τεχνολογίας λογισμικού.
Οι αρχές σχεδιασμού λογισμικού είναι βασικές έννοιες που παρέχουν τη βάση για
πολλές διαφορετικές έννοιες, προσεγγίσεις και μεθόδους σχεδιασμού λογισμικού.

Οι αρχές που αναφέρονται παρακάτω ισχύουν για οποιοδήποτε από τα τρία στάδια
του σχεδιασμού. Πολλές από αυτές τις αρχές είναι αλληλεξαρτώμενες.
Είτε χρησιμοποιούνται μόνες τους είτε σε συνδυασμό με άλλες αρχές,
αντανακλώνται αλλού στον σχεδιασμό λογισμικού για να παράγουν πολλές έννοιες
και κατασκευές που βρίσκονται στην καταγραφή, στις στρατηγικές και τις
μεθόδους σχεδιασμού. Αυτό είναι καθαυτό μια εφαρμογή της διαδικασίας σκέψης
σχεδιασμού που περιγράφηκε παραπάνω. Οι αρχές σχεδιασμού λογισμικού
περιλαμβάνουν τα εξής:

    * Αφαίρεση είναι «μια οπτική αντικειμένου που εστιάζει στις πληροφορίες
    που σχετίζονται με ένα συγκεκριμένο σκοπό και αγνοεί τις υπόλοιπες πληροφορίες»
    "Η αρχή της αφαίρεσης… βοηθά να αναγνωρίσουμε τις ουσιαστικές ιδιότητες
    που είναι κοινές σε επιφανειακά διαφορετικά στοιχεία". (βλ. επίσης την ενότητα
    Αφαίρεση στο γνωστικό πεδίο Υπολογιστικά Θεμέλια).

    * Διαχωρισμό των αρμοδιοτήτων: Μια αρμοδιότητα είναι μια «περιοχή ενδιαφέροντος
    σε σχέση με τον σχεδιασμό του λογισμικού». Μια αρμοδιότητα στον σχεδιασμό είναι
    μια περιοχή του σχεδιασμού που είναι σχετική με ένα ή περισσότερα από τα
    ενδιαφερόμενα μέρη. Με τον εντοπισμό και τον διαχωρισμό αρμοδιοτήτων, ο
    σχεδιαστής μπορεί να επικεντρωθεί σε κάθε αρμοδιότητα για το σύστημα απομονωμένα
    από τις υπόλοιπες, για την οποία ο Dijkstra λέει "ακόμα κι αν δεν είναι τέλεια
    εφικτό, ο διαχωρισμό των αρμοδιοτήτων είναι ακόμα η μόνη διαθέσιμη τεχνική για
    την αποτελεσματική ταξινόμηση των σκέψεων μας". (βλ. επίσης την ενότητα
    Ενδιαφερόμενοι φορείς και ανησυχίες στο γνωστικό πεδίο Αρχιτεκτονική λογισμικού)

    * Η αποσύνθεση (ή τμηματικότητα ή διάσπαση) δομεί ένα μεγάλο λογισμικό ως
    συνιστώσες ή μονάδες μικρότερου μεγέθους. Κάθε συνιστώσα έχει όνομα και
    καλά καθορισμένη διεπαφή για τις αλληλεπιδράσεις της με άλλες συνιστώσες.
    Οι μικρότερες συνιστώσες είναι πιο εύκολες στην κατανόηση
    και, συνεπώς, στη συντήρηση. Υπάρχουν πολλές στρατηγικές αποσύνθεσης.
    (βλ. ενότητα Στρατηγικές και μέθοδοι του σχεδιασμού λογισμικού)
    Παραδοσιακά, ο στόχος είναι να τοποθετηθούν διακριτές λειτουργίες και
    ευθύνες σε διαφορετικές συνιστώσες. Ο Parnas υποστήριξε ότι κάθε μονάδα
    σε ένα σύστημα πρέπει να έχει μία μόνο ευθύνη. Ένας τρόπος σκέψης για
    την τμηματικότητα είναι ως ένα ειδικό περιστατικό πιο γενικών στρατηγικών,
    όπως η διάκριση των αρμοδιοτήτων ή το "Διαίρει και Βασίλευε". (βλ. Τεχνικές
    επίλυσης προβλημάτων στο κεφάλαιο Υπολογιστικά θεμέλια)

    * Ενθυλάκωση (ή απόκρυψη πληροφοριών) βασίζεται στις αρχές της αφαίρεσης
    και της αποσύνθεσης έτσι ώστε η επουσιώδης πληροφορία να είναι
    λιγότερο προσβάσιμη, επιτρέποντας στους χρήστες της μονάδας να επικεντρωθούν
    στα ουσιώδη στοιχεία της διεπαφής.

    * Διαχωρισμός της διεπαφής από την υλοποίηση: Ο διαχωρισμός της διεπαφής από
    την υλοποίηση περιλαμβάνει τον ορισμό ενός συστατικού καθορίζοντας μια δημόσια
    διεπαφή (γνωστή στους πελάτες), η οποία είναι διαχωρισμένη από τις λεπτομέρειες
    για το πώς πραγματοποιείται το συστατικό στοιχείο. (βλ. Ενθυλάκωση (ή απόκρυψη
    πληροφοριών) παραπάνω)

    * Η σύζευξη ορίζεται ως "μια μέτρηση της αλληλεξάρτησης μεταξύ των μονάδων ενός
    προγράμματος υπολογιστή". Οι περισσότερες μέθοδοι σχεδίασης υποστηρίζουν
    ότι οι μονάδες πρέπει να είναι χαλαρά ή αδύναμα συζευγμένες.

    * Η συνοχή (ή εστίαση) ορίζεται ως "μια μέτρηση της ισχύος συσχέτισης των
    στοιχείων ενός τμήματος". Η συνοχή τονίζει την οργάνωση των συνιστωσών
    μιας μονάδας βάσει της σχετικότητάς τους. Οι περισσότερες μέθοδοι σχεδίασης
    υποστηρίζουν ότι οι μονάδες πρέπει να μεγιστοποιούν τη συνοχή/εστίασή τους.

    * Η ομοιομορφία είναι μια αρχή συνέπειας στα στοιχεία λογισμικού - κοινές
    λύσεις πρέπει να παράγονται για να αντιμετωπίζουν κοινά ή επαναλαμβανόμενα
    προβλήματα. Αυτά περιλαμβάνουν τα σχήματα ονομασίας, τις σημειογραφίες και
    τη σύνταξη, τις διεπαφές που καθορίζουν την πρόσβαση σε υπηρεσίες και
    μηχανισμούς, καθώς και τη διάταξη των στοιχείων και των παραμέτρων.
    Αυτό μπορεί να επιτευχθεί μέσω συμβάσεων, όπως κανόνες, μορφές και στυλ.

    * Η πληρότητα σημαίνει διασφάλιση ότι ένα λογισμικό
    καταγράφει τα σημαντικά χαρακτηριστικά μιας αφαίρεσης και δεν παραλείπει
    τίποτα. Η ολοκλήρωση λαμβάνει διάφορες μορφές, ίσως η σημαντικότερη από
    αυτές είναι η σχεδιαστική ολοκλήρωση έναντι των απαιτήσεων: ένα σχέδιο
    πρέπει να είναι αρκετό για τους σχεδιαστές ώστε να δείξει πώς θα
    ικανοποιηθούν οι απαιτήσεις και πώς η επόμενη εργασία θα ικανοποιήσει
    αυτές τις απαιτήσεις. Ο σχεδιασμός πρέπει να είναι ολοκληρωμένος ως προς
    τους τρόπους και τις καταστάσεις του λογισμικού.

    * Η επιβεβαιωσιμότητα σημαίνει ότι είναι διαθέσιμες οι πληροφορίες που
    απαιτούνται για να επαληθεύσουμε ότι το λογισμικό είναι σωστό, πλήρες
    και κατάλληλο για χρήση. Αυτό είναι σημαντικό για οποιοδήποτε λογισμικό,
    αλλά έχει ιδιαίτερη σημασία για λογισμικό υψηλής αξιοπιστίας, όπως λογισμικό
    όπου υπάρχουν προβληματισμοί ασφαλείας, αξιοπιστίας ή ασφάλειας.
    Ένα SDD θα πρέπει να είναι επαρκές ως βάση για την επαλήθευση ενός σχεδιασμού.

    * Άλλες αρχές σχεδιασμού. Πρόσφατα, με την αυξανόμενη εμφάνιση αυτόνομων
    συστημάτων, τη χρήση μηχανικής μάθησης και της τεχνητής νοημοσύνης, και
    γενικότερα, συστημάτων με όλο και ευρύτερο κοινωνικό αντίκτυπο, αναπτύχθηκαν
    προσεγγίσεις για τον Ηθικά Ευθυγραμμισμένο Σχεδιασμό για να αντιμετωπιστούν
    ανησυχίες που σχετίζονται με τις καθολικές ανθρώπινες αξίες, την πολιτική
    αυτοδιάθεση, την πρακτική εξουσία δεδομένων και την τεχνική εξάρτηση.
    Οι γενικές αρχές του Ηθικά Ευθυγραμμισμένου Σχεδιασμού είναι τα ανθρώπινα
    δικαιώματα, το καλό του ανθρώπου, η εξουσία δεδομένων, η αποτελεσματικότητα,
    η διαφάνεια, η ευθύνη, η ενημέρωση για την κατάχρηση και η αρμοδιότητα.

## **Διαδικασίες σχεδιασμού λογισμικού**

Ο σχεδιασμός λογισμικού θεωρείται γενικά μια διαδικασία ή δραστηριότητα με
πολλά στάδια. Ο σχεδιασμός λογισμικού μπορεί να διακριθεί στα ακόλουθα στάδια
ή φάσεις. Όταν είναι απαραίτητο, διακρίνουμε τη φάση από τη γενική
δραστηριότητα:

    * Στάδιο αρχιτεκτονικού σχεδιασμού
    * Στάδιο σχεδιασμού υψηλού επιπέδου
    * Στάδιο λεπτομερούς σχεδιασμού

Το στάδιο αρχιτεκτονικού σχεδιασμού αντιμετωπίζει τα θεμέλια του συστήματος στο
σύνολό τους, τα οποία εντοπίζονται στο περιβάλλον του.
(δείτε το θέμα Αρχιτεκτονική Λογισμικού).

Το στάδιο σχεδιασμού υψηλού επιπέδου είναι *εξωστρεφές* - αναπτύσσοντας την
ανώτερου επιπέδου δομή και οργάνωση του λογισμικού, αναγνωρίζοντας τα διάφορα
συστατικά του και πώς το σύστημα λογισμικού και τα συστατικά του αλληλεπιδρούν
με το περιβάλλον και τα στοιχεία του.

Η φάση του λεπτομερούς σχεδιασμού *εστιάζει εσωτερικά* - καθορίζοντας κάθε
στοιχείο με αρκετή λεπτομέρεια για να διευκολυνθεί η κατασκευή του και να
πληροί τις εξωτερικές του υποχρεώσεις, συμπεριλαμβανομένου του πώς τα στοιχεία
του λογισμικού αναλύονται περαιτέρω σε ενότητες και μονάδες.
Κάθε φάση αντικατοπτρίζει το βασικό μοτίβο που περιγράφεται στην
ενότητα Σχεδιαστική σκέψη.

Δεν βρίσκονται όλες οι φάσεις σε κάθε διαδικασία λογισμικού. Ωστόσο, όταν
παρουσιάζονται, κάθε φάση δημιουργεί μια υποχρέωση στην επόμενη φάση για το
λογισμικό που βρίσκεται υπό ανάπτυξη.

Παρόλο που οι προγραμματιστές λογισμικού ακολουθούν γενικά παρόμοιες
κατευθυντήριες γραμμές για το τι συμβαίνει σε κάθε φάση, δεν υπάρχουν
αυστηρά όρια μεταξύ των φάσεων όσον αφορά το τι πρέπει να γίνει και πότε.
Για παράδειγμα, για πολλά συστήματα λογισμικού, η επιλογή ενός αλγορίθμου
για ταξινόμηση δεδομένων θα ανατεθεί στους προγραμματιστές, μέσα στους
περιορισμούς και τις κατευθυντήριες γραμμές που προέρχονται από τις απαιτήσεις
του συστήματος, την περιγραφή της αρχιτεκτονικής ή τις προδιαγραφές σχεδιασμού.
Ωστόσο, για ένα άλλο σύστημα λογισμικού, η ύπαρξη ενός κατάλληλου αλγορίθμου
μπορεί να είναι σημαντική αρχιτεκτονικά και πρέπει να καθοριστεί νωρίς στον
κύκλο ζωής. Χωρίς αυτόν τον αλγόριθμο, δεν υπάρχει δυνατότητα κατασκευής του
λογισμικού για την ικανοποίηση των απαιτήσεών του.

Μερικοί κανόνες για κάθε στάδιο περιλαμβάνουν τους εξής:

    * Το στάδιο αρχιτεκτονικού σχεδιασμού καθορίζει ένα υπολογιστικό μοντέλο,
    τα κύρια υπολογιστικά στοιχεία και τα σημαντικά πρωτόκολλα και σχέσεις
    μεταξύ τους. Σε αυτό το στάδιο αναπτύσσονται στρατηγικές για την αντιμετώπιση
    γενικών ανησυχιών, όπως την απόδοση, την αξιοπιστία, την ασφάλεια και την
    διατύπωση γενικών αποφάσεις, συμπεριλαμβανομένων των στυλ
    σε επίπεδο συστήματος (π.χ. ένα στυλ Model-View-Controller έναντι ενός στυλ
    Pipes-and-Filters, μαζί με τον λογική πίσω από τέτοιες αποφάσεις).

    * Η φάση του σχεδιασμού υψηλού επιπέδου περιλαμβάνει την αναγνώριση των κύριων
    υπολογιστικών στοιχείων και των σημαντικών σχέσεων μεταξύ τους, με έμφαση στην
    ύπαρξη, τον ρόλο και τις διεπαφές κάθε κύριου συστατικού. Αυτός ο ορισμός
    πρέπει να είναι αρκετά λεπτομερής ώστε να επιτρέπει στους σχεδιαστές ή
    προγραμματιστές των συστατικών-πελάτες να έχουν σωστή και αποδοτική
    πρόσβαση στις δυνατότητες κάθε διακομιστή - χωρίς να χρειάζεται να
    διαβάσουν τον κώδικα του.

    * Η φάση της λεπτομερούς σχεδίασης καθορίζει την εσωτερική δομή κάθε ενότητας,
    επικεντρώνοντας στη λεπτομερή και τεκμηριωμένη επιλογή: αλγορίθμων, πρόσβασης
    στα δεδομένα και αναπαράστασης τους. Οι λεπτομερείς προδιαγραφές σχεδίασης
    πρέπει να είναι επαρκείς ώστε να επιτρέπουν στους προγραμματιστές να
    γράψουν κώδικα για κάθε ενότητα κατά τη διάρκεια της κατασκευής
    (βλ. γνωστικό πεδίο Κατασκευής Λογισμικού). Ο κώδικας είναι μια αναπαράσταση της λύσης που
    είναι αρκετά λεπτομερής και πλήρης ώστε ένας μεταγλωττιστής (ή διερμηνευτής)
    να μπορεί να τον εκτελέσει.

### *Σχεδιασμός υψηλού επιπέδου*

Ο σχεδιασμός υψηλού επιπέδου καθορίζει τον τρόπο αλληλεπίδρασης των βασικών
συστατικών ενός συστήματος μεταξύ τους και με το περιβάλλον,
συμπεριλαμβανομένων των χρηστών, των συσκευών και άλλων συστημάτων.
Ο υψηλού επιπέδου σχεδιασμός απευθύνεται στα ακόλουθα:

    * Εξωτερικά γεγονότα και μηνύματα στα οποία το σύστημα πρέπει να ανταποκριθεί
    * Γεγονότα και μηνύματα που το σύστημα πρέπει να παράγει
    * Προδιαγραφή των μορφών δεδομένων και πρωτοκόλλων για τα γεγονότα και
    τα μηνύματα
    * Προδιαγραφή των σχέσεων ταξινόμησης και χρονισμού μεταξύ εισερχομένων
     και εξερχόμενων γεγονότων και μηνυμάτων
    * Διατήρηση δεδομένων (πώς αποθηκεύονται και διαχειρίζονται τα δεδομένα)

Ο σχεδιασμός υψηλού επιπέδου πραγματοποιείται εντός του πλαισίου που
καθορίζεται από την αρχιτεκτονική λογισμικού του συστήματος (αν υπάρχει).
Κάθε ένα από τα παραπάνω μπορεί να καθοδηγείται ή να περιορίζεται από τις
κατευθυντήριες γραμμές της αρχιτεκτονικής. Για παράδειγμα, η σηματοδότηση
γεγονότων και η ανταλλαγή μηνυμάτων θα χρησιμοποιούν τα πρωτόκολλα και τους
τρόπους αλληλεπίδρασης που καθιερώνονται από την αρχιτεκτονική. Οι μορφές και
τα πρωτόκολλα δεδομένων θα χρησιμοποιούν τα πρότυπα δεδομένων και επικοινωνίας
που καθορίζονται από την αρχιτεκτονική. Σε περίπτωση απουσίας σαφούς σταδίου
σχεδιασμού αρχιτεκτονικής, μερικές από αυτές τις κατευθυντήριες γραμμές
θα καθοριστούν από τις απαιτήσεις λογισμικού ή θα αποφασιστούν κατά τον
σχεδιασμό υψηλού επιπέδου.

### *Λεπτομερής σχεδίαση*

Το στάδιο λεπτομερούς σχεδιασμού κινείται εντός των περιορισμών που
καθορίζονται από τον σχεδιασμό υψηλού επιπέδου. Καθορίζει τα εσωτερικά χαρακτηριστικά
των μονάδων και τμημάτων των κύριων συστατικών του συστήματος, και τους τρόπους
διασύνδεσής τους με άλλες μονάδες, υπηρεσίες και διαδικασίες που παρέχουν,
υπολογιστικές ιδιότητες, αλγόριθμους, κανόνες πρόσβασης σε δεδομένα και
δομές δεδομένων. Αυτό περιλαμβάνει τα εξής:

    * Εκτενή διαχωρισμό των κύριων συστατικών του συστήματος σε μικρότερα συστατικά
    ή μονάδες προγραμμάτων, συμπεριλαμβανομένων ευκαιριών για χρήση ετοιμοπαράδοτων
    συστατικών και πλαισίων εφαρμογών.
    * Κατανομή των ευθυνών σχεδιασμού σε συστατικά και μονάδες προγραμμάτων
    * Αλληλεπιδράσεις μεταξύ των μονάδων/συστατικών
    * Εμβέλεια και ορατότητα μεταξύ στοιχείων, συστατικών και μονάδων προγραμμάτων
    * Λειτουργικές καταστάσεις των στοιχείων, καταστάσεις μονάδων και μεταβάσεις
    ανάμεσά τους
    * Εξαρτήσεις δεδομένων και ελέγχου
    * Οργάνωση δεδομένων, τοποθέτηση σε πακέτα (packaging) και υλοποίηση
    * Διεπαφές χρήστη
    * Απαραίτητοι αλγόριθμοι και δομές δεδομένων

## **Χαρακτηριστικά σχεδιασμού λογισμικού**

Οι απαιτήσεις λογισμικού και οι κατευθυντήριες οδηγίες αρχιτεκτονικής έχουν
σκοπό να καθοδηγήσουν το λογισμικό προς συγκεκριμένα χαρακτηριστικά ή
*χαρακτηριστικά σχεδιασμού*. Τα χαρακτηριστικά σχεδιασμού αποτελούν σημαντική
υποκατηγορία αρμοδιοτήτων (βλ. το θέμα *ενδιαφερόμενα μέρη και αρμοδιότητες*
στο γνωστικό πεδίο αρχιτεκτονική λογισμικού KA). Ένας ρόλος των αρχών σχεδίασης
(βλ. Aρχές σχεδίασης λογισμικού) είναι να βοηθήσουν το λογισμικό να επιτύχει
αυτά τα χαρακτηριστικά. Ανάμεσα στα χαρακτηριστικά που ενδιαφέρουν τους
σχεδιαστές είναι τα εξής:

### *Ταυτοχρονικότητα (Συνδρομή)*

Ο σχεδιασμός για την ταυτοχρονικότητα ασχολείται με την ανάλυση του λογισμικού
σε διεργασίες, εργασίες και θέματα και τις συνέπειες αυτών των αποφάσεων όσον
αφορά την αποδοτικότητα, την ατομικότητα, τον συγχρονισμό και τον
προγραμματισμό.

### *Έλεγχος και χειρισμός γεγονότων*

Ο χειρισμός γεγονότων αφορά τον τρόπο οργάνωσης της ροής ελέγχου καθώς και
τον τρόπο χειρισμού αντιδράσεων και πρόσκαιρων γεγονότων μέσω διαφόρων
μηχανισμών, συμπεριλαμβανομένων του συγχρονισμού, της σιωπηρής επίκλησης και
των αναδρομών.

### *Αποθήκευση δεδομένων*

Το θέμα αυτό αφορά την αποθήκευση και διαχείριση δεδομένων σε όλο το σύστημα.

### *Κατανομή των αρθρωμάτων*

Η κατανομή αφορά τον τρόπο με τον οποίο τα αρθρώματα λογισμικού διανέμονται στο
υλικό (συμπεριλαμβανομένων υπολογιστών, δικτύων και άλλων συσκευών) και
τον τρόπο με τον οποίο αυτά τα αρθρώματα επικοινωνούν ενώ πληρούν απαιτήσεις
απόδοσης, αξιοπιστίας, επεκτασιμότητας, διαθεσιμότητας, παρακολούθησης,
συνέχειας επιχειρηματικότητας και άλλων προοπτικών.

### *Χειρισμός λαθών και εξαιρέσεων, βλαβοανοχή (ανοχή σε σφάλματα)*

Το συγκεκριμένο θέμα ασχολείται με το πώς να προληφθούν,
να γίνουν ανεκτά και να διαχειριστούν τα λάθη καθώς και με τον
χειρισμό των εξαιρέσεων.

### *Ενσωμάτωση και διαλειτουργικότητα*

Αυτό το ζήτημα προκύπτει σε επίπεδο επιχείρησης ή συστήματος-των-συστημάτων
(system-of-systems) ή για οποιοδήποτε πολύπλοκο λογισμικό όταν ανομοιογενή
συστήματα ή εφαρμογές χρειάζεται να αλληλεπιδρούν μέσω ανταλλαγής δεδομένων ή
προσπελαύνοντας τις υπηρεσίες το ένα του άλλου. Εντός ενός συστήματος
λογισμικού, το ζήτημα προκύπτει όταν τα συστατικά σχεδιάζονται χρησιμοποιώντας
διαφορετικά πλαίσια (frameworks), βιβλιοθήκες ή πρωτόκολλα.

### *Βεβαιότητα, προστασία και ασφάλεια*

Η *υψηλή βεβαιότητα* καλύπτει αρκετά ποιοτικά χαρακτηριστικά του λογισμικού,
συμπεριλαμβανομένων των ανησυχιών της προστασίας και ασφάλειας, που σχετίζονται
με το αν το λογισμικό συμπεριφέρεται όπως αναμένεται σε κρίσιμες καταστάσεις,
όπως όταν έρχεται αντιμέτωπο με κινδύνους. Η σχεδίαση για ασφάλεια αφορά το
πώς να αποτραπεί η μη εξουσιοδοτημένη αποκάλυψη,
δημιουργία, αλλαγή, διαγραφή ή άρνηση πρόσβασης σε πληροφορίες και άλλους
πόρους από επιθέσεις στο σύστημα ή παραβάσεις των πολιτικών του συστήματος
για τον περιορισμό της ζημιάς, την παροχή συνέχειας της υπηρεσίας και τη
βοήθεια στην επισκευή και αποκατάσταση. Η σχεδίαση για ασφάλεια αφορά τη
διαχείριση της συμπεριφοράς του λογισμικού σε περιστάσεις που μπορεί να
οδηγήσουν σε βλάβη ή απώλεια ανθρώπινης ζωής ή ζημιά σε περιουσία ή το
περιβάλλον.

### *Μεταβλητότητα*

Η μεταβλητότητα αφορά τις επιτρεπόμενες παραλλαγές στο λογισμικό, όπως
προκύπτει για παράδειγμα σε γραμμές προϊόντων λογισμικού και οικογένειες
συστημάτων, για να φιλοξενήσουν και να διαχειριστούν πολλαπλές διαφορετικές
αναπτύξεις όπως για διαφορετικούς οργανισμούς ή αγορές.

## **Καταγραφή σχεδιασμών λογισμικού**

Η έκβαση των διαδικασιών σχεδίασης είναι η συσσώρευση γνώσης και προϊόντων
εργασίας που καταγράφουν αυτήν τη γνώση. Τα προϊόντα εργασίας της σχεδίασης
λογισμικού καταγράφουν (1) τις πτυχές των προβλημάτων που πρέπει να επιλυθούν,
χρησιμοποιώντας το λεξιλόγιο του πεδίου· (2) ένα λεξιλόγιο λύσης για την
επίλυση των σχεδιαστικών προβλημάτων (βλ. ενότητα 1.1 *Σχεδιαστική σκέψη*)· (3)
τις σημαντικές αποφάσεις που έχουν ληφθεί και (4) εξηγήσεις του σκεπτικού για
κάθε μη-ασήμαντη απόφαση. Η καταγραφή του σκεπτικού για σημαντικές αποφάσεις
βελτιώνει τη μακροπρόθεσμη συντηρησιμότητα του προϊόντος λογισμικού όταν
λαμβάνονται υπόψη τροποποιήσεις ή βελτιώσεις (βλ. ενότητα 4.6 Σχεδιαστικό
σκεπτικό). Αυτά τα προϊόντα εργασίας, συχνά αποκαλούμενα *περιγραφές σχεδίασης*
ή *προδιαγραφές σχεδίασης*, μπορούν να λάβουν τη μορφή κειμένων, διαγραμμάτων,
μοντέλων και πρωτοτύπων που αποτελούν τα σχέδια για το λογισμικό που θα
υλοποιηθεί.

Ένα θεμελιώδες κομμάτι της σχεδίασης λογισμικού είναι η επικοινωνία για το
σχέδιο με τους πελάτες, με άλλους σχεδιαστές, με τους υλοποιητές και άλλα
ενδιαφερόμενα μέρη. Αυτό ισχύει είτε το λογισμικό αναπτύσσεται
χρησιμοποιώντας ευέλικτες, παραδοσιακές ή τυπικές μεθόδους. Η επικοινωνία
θα διαφέρει ανάλογα με το κοινό στο οποίο απευθύνεται, το επίπεδο λεπτομέρειας
που μεταδίδεται και τη σχέση με τα ενδιαφέροντα των ενδιαφερόμενων μερών.
Ενώ οι υλοποιητές αποτελούν σημαντικό κοινό για τις προδιαγραφές σχεδίασης,
το προσωπικό ελέγχου και διασφάλισης ποιότητας, οι αρχές πιστοποίησης και οι
αναλυτές απαιτήσεων θα χρησιμοποιήσουν επίσης τις προδιαγραφές σχεδίασης στη
δουλειά τους. Επομένως, οι προδιαγραφές σχεδίασης πρέπει να έχουν καθορίσει
ξεκάθαρα την ομάδα στόχων, το θέμα και την αναμενόμενη χρήση.

Οι σχεδιαστές μπορούν να αναλύουν και να αξιολογήσουν αυτά τα προϊόντα εργασίας
για να καθορίσουν εάν ο σχεδιασμός μπορεί να ικανοποιήσει τις απαιτήσεις και
τους περιορισμούς για το λογισμικό. Η σχεδίαση λογισμικού, επίσης, εξετάζει και
αξιολογεί εναλλακτικές λύσεις και επιλογές συμβιβασμού. Εκτός από το να τα
χρησιμοποιούν ως εισόδους και ως σημείο εκκίνησης για κατασκευή και δοκιμή,
οι ενδιαφερόμενοι μπορούν να χρησιμοποιήσουν τα προϊόντα της σχεδίασης για να
σχεδιάσουν επόμενες δραστηριότητες, όπως η επαλήθευση και η επικύρωση του
συστήματος.

Καθώς οι έννοιες σχεδίασης εξελίσσονται, έτσι εξελίσσονται και οι
αναπαραστάσεις τους (βλ. ενότητα Σχεδιαστική σκέψη). μέρος της διαδικασίας
σχεδίασης περιλαμβάνει τη δημιουργία κατάλληλων λεξιλογίων για προβλήματα και
λύσεις. Ένα ανεπίσημο γρήγορο σχέδιο μπορεί να είναι πιο κατάλληλο για τα αρχικά
στάδια. Είναι χρήσιμο να διακρίνουμε τις υπό επεξεργασία προδιαγραφές
από τα τελικά προϊόντα σχεδίασης. Οι πρώτες παράγονται *από* την ομάδα σχεδίασης
*για* την ομάδα σχεδίασης. Τα τελικά προϊόντα σχεδίασης μπορεί να παραχθούν
για γνωστά ενδιαφερόμενα μέρη ή ακόμα και για ένα άγνωστο μελλοντικό κοινό.

Υπάρχουν πολλές σημειογραφίες για την αναπαράσταση αντικειμένων σχεδίασης
λογισμικού. Η σχεδίαση λογισμικού συχνά πραγματοποιείται χρησιμοποιώντας
πολλαπλούς τύπους σημειογραφίας. Δύο ευρείες περιοχές ενδιαφέροντος είναι οι
δομές λογισμικού και οι συμπεριφορές λογισμικού. Κάποιες χρησιμοποιούνται για να
περιγράψουν τη δομική οργάνωση μιας σχεδίασης, ενώ άλλες για να αναπαραστήσουν
την επιθυμητή συμπεριφορά του λογισμικού. Παρακάτω, κατηγοριοποιούνται ως
σημειογραφίες για δομικά και συμπεριφορικά ζητήματα (βλ. ενότητες Περιγραφές
διαρθρωτικού σχεδιασμού και Συμπεριφορικές περιγραφές σχεδιασμού, αντίστοιχα).
Ορισμένες σημειογραφίες χρησιμοποιούνται κυρίως κατά την αρχιτεκτονική σχεδίαση
και άλλες κυρίως κατά τη λεπτομερή σχεδίαση, ενώ κάποιες είναι χρήσιμες σε όλα
τα στάδια του σχεδιασμού λογισμικού. Ορισμένες σημειογραφίες συνδέονται στενά
με τα πλαίσια συγκεκριμένων μεθόδων σχεδίασης (βλ. ενότητα Στρατηγικές και
μέθοδοι του σχεδιασμού λογισμικού).

Η Ενοποιημένη Γλώσσα Μοντελοποίησης (Unified Modeling Language ή UML) είναι
μια ευρέως χρησιμοποιούμενη οικογένεια σημειογραφιών που αντιμετωπίζει τόσο
δομικά όσο και συμπεριφορικά ζητήματα και χρησιμοποιείται σε όλα τα στάδια
σχεδιασμού, από την αρχιτεκτονική έως τη λεπτομερή σχεδίαση [1].

### *Σχεδιασμός βάσει μοντέλου*

Στην ιστορία της τεχνολογίας λογισμικού, συμπεριλαμβανομένης της αρχιτεκτονικής
και του σχεδιασμού, υπήρξε μια εξέλιξη από αντικείμενα βάσει εγγράφου σε
σε αντικείμενα βάσει μοντέλου. Ο *σχεδιασμός βάσει μοντέλου*
(MBD) είναι μια προσέγγιση για την καταγραφή σχεδίων όπου τα μοντέλα
παίζουν σημαντικό ρόλο.

Αυτή η τάση αντανακλά τους περιορισμούς των αντικειμένων που βασίζονται σε
έγγραφο και τις αυξημένες δυνατότητες των αυτοματοποιημένων εργαλείων. Τα
αντικείμενα βάσει εγγράφων χρησιμοποιούν φυσική γλώσσα και ανεπίσημα
διαγράμματα για να μεταδώσουν τις προθέσεις των σχεδιαστών, που μπορεί να
εισάγουν ασάφεια και ατέλειες. Ακόμα και όταν τα έγγραφα χρησιμοποιούν καλά
καθορισμένες μορφές, σχετικές πληροφορίες μπορεί να είναι διασκορπισμένες σε
διάφορα έγγραφα, καθιστώντας την κατανόηση και ανάλυση δύσκολη.
Με το MBD, κατάλληλα εργαλεία μπορούν να συγκεντρώνουν και να οργανώνουν
σχετικές πληροφορίες για χρήση από σχεδιαστές και άλλα ενδιαφερόμενα μέρη
σε μια προσβάσιμη μορφή.

Τα σύγχρονα εργαλεία έχουν επιταχύνει την τάση μετάβασης από τα αντικείμενα
βάσει εγγράφου σε αυτά που βασίζονται σε μοντέλα.
Η χρήση εργαλείων επιτρέπει την
αναπαραγωγή ή προσομοίωση διαφόρων πτυχών του λογισμικού, την ανάλυση πιθανών
σεναρίων (what-if scenarios) και αντιστάθμισης, και την ταχεία κατασκευή πρωτοτύπων.
Η χρήση εργαλείων διευκολύνει επίσης στις προσεγγίσεις συνεχών ελέγχων και ολοκλήρωσης, τη
βελτιωμένη και διαδραστική ανιχνευσιμότητα και τη συλλογή και διαχείριση
γνώσης, που είναι ανεπαρκείς ή ακόμα και αδύνατες με τις προσεγγίσεις
βάσει εγγράφου.

Η *ανάπτυξη καθοδηγούμενη από μοντέλο* (MDD) είναι ένα πρότυπο ανάπτυξης,
κατά το οποίο τα μοντέλα χρησιμοποιούνται ως τα *πρωτεύοντα* αντικείμενα
της διαδικασίας ανάπτυξης.
(βλ. το γνωστικό πεδίο Μοντέλα και μέθοδοι τεχνολογίας λογισμικού).

### *Περιγραφές διαρθρωτικού σχεδιασμού*

Τα ακόλουθα είδη σημειογραφίας, τα περισσότερα από τα οποία είναι γραφικά,
χρησιμοποιούνται για να αναπαραστήσουν τα δομικά στοιχεία της σχεδίασης ενός
λογισμικού. Δηλαδή χρησιμοποιούνται για να περιγράψουν τα βασικά στοιχεία και
το πώς συνδέονται μεταξύ τους (στατική όψη) και την κατανομή των ευθυνών
στα στοιχεία και τις μονάδες:

    * Διαγράμματα κλάσης και αντικειμένου χρησιμοποιούνται για να αναπαραστήσουν
    ένα σύνολο κλάσεων και αντικειμένων και τις αλληλεπιδράσεις τους.
    * Διαγράμματα εξαρτημάτων: χρησιμοποιούνται για να αναπαραστήσουν
    ένα σύνολο *εξαρτημάτων* και τις αλληλεξαρτήσεις τους («φυσικά μέρη και
    μέρη, που μπορούν να  αντικατασταθούν από ένα σύστημα, που προωθεί
    την υλοποίηση ενός συνόλου διεπαφών και συμμορφώνεται σε αυτό» [1]).
    Τα μοντέλα εξαρτημάτων εξελίχθηκαν από τις προηγούμενες γλώσσες
    διασύνδεσης αρθρωμάτων στα συστήματα πακέτων γλωσσών προγραμματισμού
    όπως η Ada και η Java και τα εξελιγμένα συστήματα μονάδων των τρεχουσών
    συναρτησιακών γλωσσών, όπως η Haskell και η Coq.
    * Κάρτες «class, responsibility, collaborator» (CRCs) χρησιμοποιούνται για
    να για να υποδηλώσουν τα ονόματα των συστατικών (κλάσεων), τις αρμοδιότητές
    τους, και τα συνεργαζόμενα συστατικά.
    * Διαγράμματα διάπτυξης: χρησιμοποιούνται για να αναπαραστήσουν ένα
    σετ (φυσικών) κόμβων και των μεταξύ τους σχέσεων και, έτσι, να προπλάσει
    τις φυσικές πτυχές του λογισμικού.
    * Τα διαγράμματα οντοτήτων-συσχετίσεων (ERDs) χρησιμοποιούνται για να
    αναπαραστήσουν τα εννοιολογικά, λογικά και φυσικά μοντέλα των δεδομένων όπως
    αποθηκεύονται σε αποθετήρια πληροφοριών ή ως μέρος των περιγραφών διεπαφής.
    * Οι γλώσσες περιγραφής διεπαφών (IDLs) είναι γλώσσες παρόμοιες με τις γλώσσες
    προγραμματισμού, οι οποίες χρησιμοποιούνται για να ορίζουν τις διεπαφές
    (ονόματα και τύπους εξαγόμενων λειτουργιών) των συστατικών λογισμικού.
    * Διαγράμματα δομής χρησιμοποιούνται για να περιγράψουν τη δομή κλήσεων
    προγραμμάτων (δηλαδή δείχνουν ποια ενότητα καλεί και καλείται από ποιες
    άλλες ενότητες).

### *Συμπεριφορικές περιγραφές σχεδιασμού*

Οι ακόλουθες σημειογραφίες και γλώσσες, ορισμένες γραφικές και άλλες κειμενικές,
χρησιμοποιούνται για να περιγράψουν τη δυναμική συμπεριφορά των συστημάτων
λογισμικού και των συστατικών τους. Πολλές από αυτές τις σημειώσεις είναι
χρήσιμες κυρίως, αλλά όχι αποκλειστικά, κατά τη διάρκεια της λεπτομερούς
σχεδίασης. Επιπλέον, οι συμπεριφορικές περιγραφές μπορούν να περιλαμβάνουν τη
λογική για τις σχεδιαστικές αποφάσεις (βλ. ενότητα 4.6 Συλλογισμός σχεδιασμού).

    * Διαγράμματα δραστηριοτήτων χρησιμοποιούνται για να δείξουν τη ροή ενός
    υπολογισμού από δραστηριότητα σε δραστηριότητα. Μπορούν επίσης να
    αναπαραστήσουν τις ταυτόχρονες δραστηριότητες, τις εισόδους και εξόδους
    τους αλλά και ευκαιρίες για ταυτοχρονικότητα.

    * Τα διαγράμματα επικοινωνίας χρησιμοποιούνται για να δείξουν τις
    αλληλεπιδράσεις μεταξύ μιας ομάδας αντικειμένων. η έμφαση είναι στα
    αντικείμενα, τους συνδέσμους τους και τα μηνύματα που ανταλλάσσουν σε
    αυτούς τους συνδέσμους.

    * Τα διαγράμματα ροής δεδομένων (DFDs) χρησιμοποιούνται για να δείξουν τη ροή
    δεδομένων μεταξύ στοιχείων υπολογιστικής τεχνολογίας. Ένα DFD παρέχει "μια
    περιγραφή βασισμένη στην μοντελοποίηση της ροής των πληροφοριών γύρω από ένα
    δίκτυο επιχειρησιακών στοιχείων, με κάθε στοιχείο να κάνει χρήση ή τροποποίηση
    των πληροφοριών που ρέουν σε αυτό" [4]. Τα DFD έχουν άλλες χρήσεις,
    όπως είναι η ανάλυση της ασφάλειας, δεδομένου ότι προάγουν των καθορισμό
    πιθανών διόδων για επίθεση και αποκάλυψη εμπιστευτικών πληροφοριών.

    * Οι πίνακες και τα διαγράμματα αποφάσεων χρησιμοποιούνται για να απεικονίσουν
    πολύπλοκους συνδυασμούς συνθηκών και δράσεων.

    * Τα διαγράμματα ροής χρησιμοποιούνται για να αναπαραστήσουν τη ροή ελέγχου
    και την ακολουθία σχετικών ενεργειών.

    * Τα διαγράμματα ακολουθίας χρησιμοποιούνται για να δείξουν τις
    αλληλεπιδράσεις ανάμεσα σε μια ομάδα αντικειμένων, απεικονίζοντας την χρονική
    σειρά των μηνυμάτων που ανταλλάσσονται μεταξύ αντικειμένων.

    * Τα μεταβατικά και σχηματικά διαγράμματα χρησιμοποιούνται για να δείξουν τη
    ροή του ελέγχου από κατάσταση σε κατάσταση και πώς η συμπεριφορά ενός
    συστατικού αλλάζει βάσει της τρέχουσας κατάστασης και της ανταπόκρισής του
    σε συμβάντα εισαγωγής.

    * Οι γλώσσες τυπικών προδιαγραφών είναι κυρίως γλώσσες κειμένου που
    βασίζονται στις βασικές έννοιες των μαθηματικών (για παράδειγμα, τύπος,
    σύνολο, ακολουθία, λογική πρόταση) για να καθορίζουν με αυστηρό και αφηρημένο
    τρόπο τις διεπαφές και τη συμπεριφορά των συστατικών του λογισμικού, συχνά σε
    όρους προ- και μετα-συνθηκών, σταθερών, ελέγχου τύπων και υπολογιστικών
    μοντέλων (βλ. παράγραφο Τυπικές μέθοδοι στο
    γνωστικό πεδίο Μοντέλα και μέθοδοι της τεχνολογίας λογισμικού).

    * Ο ψευδοκώδικας και οι γλώσσες σχεδιασμού του προγράμματος (PDLs) είναι
    δομημένες, σημειογραφίες παρόμοιες με γλώσσες προγραμματισμού που
    χρησιμοποιούνται για να περιγράψουν τη συμπεριφορά επεξεργασίας μιας
    διαδικασίας, κυρίως στο στάδιο του λεπτομερούς σχεδιασμού. Η χρήση αυτών των
    γλωσσών είναι λιγότερο συνηθισμένη σήμερα, αλλά βρίσκεται ακόμα στην
    τεκμηρίωση αλγορίθμων.

### *Σχεδιαστικές τεχνικές και πρότυπα*

Απλούστατα περιγραφόμενο, ένα πρότυπο είναι "μια κοινή λύση σε ένα κοινό
πρόβλημα σε ένα γνωστό πλαίσιο" [6]. Οι αρχιτεκτονικές τεχνικές μπορούν να
θεωρηθούν ως πρότυπα "σε μεγάλο βαθμό", περιγράφοντας κοινές λύσεις σε
προβλήματα αρχιτεκτονικού επιπέδου που διαχέονται στο λογισμικό. Τα πρότυπα
σχεδίασης περιλαμβάνουν τα εξής:

    * πρότυπο δημιουργίας (π.χ., Builder, Factory, Prototype, Singleton),
    * Δομικά πρότυπα (π.χ., Adapter, Bridge, Composite, Decorator, Facade,
    Flighweight Proxy),
    * Συμπεριφορικά πρότυπα (π.χ., Command, Intepreter, Iterator, Mediator
    Memento, Observer, Peer-to-peer, Publish-subscribe,
    State, Strategy, Template, Visitor).

Τα πρότυπα και οι τεχνικές σχεδιασμού αντικατοπτρίζουν εκφράσεις που έχουν αποδειχθεί
χρήσιμες στην επίλυση συγκεκριμένων προβλημάτων σχεδίασης στο παρελθόν.
Προκύπτουν σε όλα τα στάδια σχεδίασης, συμπεριλαμβανομένης της αρχιτεκτονικής σχεδίασης
(βλ. επίσης την ενότητα Τεχνικές και πρότυπα αρχιτεκτονικής στο γνωστικό πεδίο
Αρχιτεκτονική Λογισμικού).

### *Ειδικευμένες γλώσσες και γλώσσες εξειδικευμένου πεδίου*

Δεν είναι εύκολο να διαχωριστούν όλες οι αναπαραστάσεις σχεδίασης σε δομικές
και συμπεριφορικές. Για παράδειγμα, ο σχεδιασμός της διεπαφής χρήστη
αναμιγνύει τη δομική διάταξη του τι μπορεί να δει ο χρήστης με τη συμπεριφορική
λογική της αλληλουχίας των οθονών βάσει των ενεργειών του χρήστη.
Εξειδικευμένες αρμοδιότητες, όπως η ασφάλεια και η αξιοπιστία, συνήθως έχουν τις
δικές τους μορφές αναπαράστασης που έχουν εξελιχθεί ανάμεσα σε ειδικούς αυτών
των κοινοτήτων [19].

Μια πρόσφατη τάση είναι η ωρίμανση των *γλωσσών εξειδικευμένου πεδίου* (DSLs)
και η ευρεία διαθεσιμότητα εργαλείων για την ανάπτυξή τους.
Σε αυτή την προσέγγιση, μέρος της διαδικασίας σχεδίασης είναι η κωδικοποίηση
των εννοιών και των κατασκευών ενός συγκεκριμένου πεδίου εφαρμογής για τη
δημιουργία μιας γλώσσας υπολογιστή για αυτό το πεδίο, έτσι ώστε η
αναπαράσταση του σχεδιασμού χρησιμοποιώντας αυτές τις κατασκευές να οδηγεί σε
μια κινούμενη ή εκτελέσιμη υλοποίηση. Οι DSL δυσχεραίνουν τον σαφή διαχωρισμό
των ορίων μεταξύ γλωσσών μοντελοποίησης, γλωσσών σχεδίασης και γλωσσών
προγραμματισμού σε αυτήν την προσέγγιση.

### *Συλλογισμός σχεδιασμού*

Ένα χρήσιμο αποτέλεσμα του σχεδιασμού είναι η κατανόηση και η σαφής τεκμηρίωση
των σημαντικών αποφάσεων που έχουν ληφθεί, μαζί με μια εξήγηση για κάθε
απόφαση. Ο συλλογισμός σχεδιασμού αποτυπώνει το *γιατί* μια σχεδιαστική
απόφαση πάρθηκε. Αυτό περιλαμβάνει προηγούμενες υποθέσεις που έγιναν,
εναλλακτικές που εξετάστηκαν και αντισταθμίσματα και κριτήρια που αναλύθηκαν
για την επιλογή μιας προσέγγισης και την απόρριψη άλλων.

Αν και οι λόγοι για τις αποφάσεις είναι πιθανό να είναι
προφανείς για την τρέχουσα ομάδα σχεδιασμού, μπορεί να μην είναι τόσο προφανείς
για εκείνους που τροποποιούν ή συντηρούν το σύστημα μετά την υλοποίηση.
Η καταγραφή του συλλογισμού ενισχύει τη μακροπρόθεσμη συντηρησιμότητα του
λογισμικού. Η συνέχιση της καταγραφής του σκεπτικού για τις αλλαγές κατά τη
διάρκεια της συντήρησης συμβάλλει επίσης στην βιωσιμότητα του λογισμικού.

Επίσης, μπορεί να είναι χρήσιμο να καταγραφούν οι απορριφθείσες αποφάσεις και
οι λόγοι απόρριψής τους. Η καταγραφή αυτών των σκεπτικών μπορεί να επιτρέψει
σε μια ομάδα να επανεξετάσει μια προηγουμένως απορριφθείσα απόφαση όταν οι
υποθέσεις, οι απαιτήσεις ή οι περιορισμοί αλλάζουν. Η σημασία του συλλογισμού
είναι εμφανής, για παράδειγμα, σε έργα λογισμικού ανοικτού κώδικα (FOSS), τα
οποία συνήθως εμπλέκουν μεγάλες, κατανεμημένες ομάδες προγραμματιστών με
συχνότητα αλλαγών προσωπικού.

Ο συλλογισμός σχεδιασμού μπορεί να καταγραφεί ως μέρος μιας περιγραφής
σχεδιασμού λογισμικού ή ως συνοδευτικό αντικείμενο. Συνήθως ο συλλογισμός
καταγράφεται σε κείμενο, αλλά μπορούν να χρησιμοποιηθούν και άλλες μορφές
αναπαράστασης, όπως γραφήματα που απεικονίζουν έναν σχεδιασμό ως ένα
διασυνδεδεμένο δίκτυο αποφάσεων.

## **Στρατηγικές και μέθοδοι του σχεδιασμού λογισμικού**

Υπάρχουν διάφορες στρατηγικές και μέθοδοι για τη δομή και την καθοδήγηση
της διαδικασίας σχεδίασης. Πολλές από αυτές προήλθαν από τεχνικές ή πρότυπα
προγραμματισμού. Εκτός από το να ενσωματώνουν μία ή περισσότερες γενικές
στρατηγικές, οι περισσότερες μέθοδοι σχεδίασης επικεντρώνονται στο να
καθιστούν ένα ή περισσότερα σχεδιαστικά στοιχεία (είτε αυτά είναι αντικείμενα,
είτε μέθοδοι είτε γεγονότα) κυρίαρχα ως θέματα οργάνωσης για το λογισμικό.
Αυτά τα θέματα καθοδηγούν στη συνέχεια τους σχεδιαστές στο τι να
επικεντρωθούν πρώτα, πώς να προχωρήσουν και πώς να δομήσουν τα συστατικά.

### *Γενικές στρατηγικές*

Μερικά συχνά παραδείγματα των γενικών στρατηγικών χρήσιμα στη διαδικασία σχεδιασμού
περιλαμβάνουν το «Διαίρει και Βασίλευε» και στρατηγικές Σταδιακής Εκλέπτυνσης: από
πάνω προς τα κάτω (top-down) ή από την βάση στην κορυφή(bottom-up), και στρατηγικές
κάνοντας χρήση των ευρετικών στοιχείων, χρήση προτύπων και γλωσσών των προτύπων
και χρήση μιας επαναληπτικής και αυξητικής προσέγγισης.

### *Λειτουργικά προσανατολισμένος σχεδιασμός*

Αυτή είναι μία από τις κλασικές μεθόδους σχεδίασης λογισμικού. Επικεντρώνεται
στην εκλέπτυνση (ή αποσύνθεση) για τον εντοπισμό των βασικών λειτουργιών του
λογισμικού, αναπτύσσοντάς τις με μια προσέγγιση από πάνω προς τα κάτω
(top-down). Η δομημένη σχεδίαση συνήθως ακολουθεί τη δομημένη ανάλυση,
παράγοντας διαγράμματα ροής δεδομένων (DFDs) και τις σχετιζόμενες περιγραφές
διεργασιών. Διάφορα εργαλεία καθιστούν δυνατή την αυτοματοποιημένη μετάφραση
των DFDs σε σχεδιασμούς υψηλού επιπέδου.

### *Σχεδιασμός δομής δεδομένων*

Ο σχεδιασμός της δομής δεδομένων ξεκινά από τις δομές δεδομένων που ένα
πρόγραμμα χειρίζεται αντί να ξεκινά από τις λειτουργίες που εκτελεί. Ο
σχεδιαστής λογισμικού καθορίζει τις δομές δεδομένων εισόδου και εξόδου
και στη συνέχεια αναπτύσσει μονάδες προγράμματος που μετατρέπουν τις
εισόδους σε εξόδους. Έχουν προταθεί διάφορες ευρετικές για την αντιμετώπιση
ειδικών περιπτώσεων, όπως περιπτώσεις όπου υπάρχει αναντιστοιχία ανάμεσα στις
δομές εισόδου και εξόδου.

### *Αντικειμενοστρεφής σχεδιασμός*

Έχουν προταθεί πολλές μέθοδοι σχεδίασης λογισμικού που βασίζονται σε
αντικείμενα. Το πεδίο έχει εξελιχθεί από τον αρχικό αντικειμενοστρεφή
σχεδιασμό στα μέσα της δεκαετίας του 1980 (όπου τα ουσιαστικά αναπαριστούν
αντικείμενα, τα ρήματα αναπαριστούν μεθόδους και τα επίθετα αναπαριστούν
χαρακτηριστικά), όπου η κληρονομικότητα και η πολυμορφισμός διαδραματίζουν
καθοριστικό ρόλο, στον τομέα του σχεδιασμού βάσει εξαρτημάτων (Component-Based
Design - CBD), όπου οι μετα-πληροφορίες μπορούν να οριστούν και
να γίνουν προσβάσιμες (μέσω αντανάκλασης, για παράδειγμα).
Αν και ο αντικειμενοστρεφής σχεδιασμός έχει ρίζες, που προέρχονται από την
έννοια της αφαιρετικότητας δεδομένων, ο σχεδιασμός με γνώμονα την υπευθυνότητα
έχει προταθεί ως εναλλακτική προσέγγιση στο αντικειμενοστρεφή σχεδιασμό.

### *Χρηστοκεντρικός σχεδιασμός*

Ο χρηστοκεντρικός σχεδιασμός είναι κάτι περισσότερο από μια μέθοδος σχεδίασης·
είναι μια διεπιστημονική προσέγγιση που δίνει έμφαση στη βαθιά κατανόηση των
χρηστών και των αναγκών τους ως βάση για τον σχεδιασμό των εμπειριών χρήστη
εντός του πλαισίου του οργανισμού τους και των καθηκόντων που πρέπει να
εκτελέσουν. Περιλαμβάνει τη συλλογή απαιτήσεων των χρηστών, τη δημιουργία
ροής εργασιών και αποφάσεων των χρηστών, τη δημιουργία πρωτοτύπων ή αφαιρετικών
σχεδίων που αντιπροσωπεύουν διεπαφές χρήστη και την αξιολόγηση της
σχεδιαστικής λύσης σε σχέση με τις αρχικές απαιτήσεις [14].

### *Σχεδιασμός με βάση τα εξαρτήματα*

Ο σχεδιασμός με βάση τα εξαρτήματα (Component-Based Design - CBD) αναλύει ένα
λογισμικό σε ένα ή περισσότερα αυτόνομα εξαρτήματα/συστατικά που επικοινωνούν
μόνο μέσω καλά καθορισμένων διεπαφών και συμμορφώνονται με ένα κοινό πρότυπο
μοντέλο συνιστωσών σε επίπεδο συστήματος. Ένα εξάρτημα/συστατικό του λογισμικού
είναι μια ανεξάρτητη μονάδα, που έχει σαφώς ορισμένες διασυνδέσεις και
εξαρτήσεις, που μπορούν να συμμορφώνονται και να αναπτύσσονται ανεξάρτητα.
Ο σχεδιασμός βάσει συστατικών στοιχείων (Component-based design, CBD)
διαχειρίζεται θέματα που σχετίζονται με την παροχή, ανάπτυξη, και ενσωμάτωση
συστατικών, προκειμένου να βελτιωθεί επαναχρησιμοποίηση. Συχνά, η CBD δίνει
έμφαση σε κοινές διεπαφές προγραμματισμού εφαρμογών (APIs) για όλα τα συστατικά
και εξειδικευμένες διεπαφές προγραμματισμού εφαρμογών για συγκεκριμένες
υπηρεσίες ή αρμοδιότητες.

### *Σχεδιασμός καθοδηγούμενος από γεγονότα*

Ο σχεδιασμός καθοδηγούμενος από γεγονότα είναι μια προσέγγιση όπου ένα σύστημα
ή ένα συστατικό εκτελεί τις λειτουργίες του ανταποκρινόμενο σε γεγονότα
(έμμεση εκτέλεση) [13]. Η επικοινωνία με δημοσίευση/συνδρομή (broadcasting)
χρησιμοποιείται συχνά ως μέσο μεταφοράς των γεγονότων μέσω του δικτύου προς
όλους τους ενδιαφερόμενους συνδρομητές. Η δημοσίευση/συνδρομή κρατά τους
παραγωγούς και τους καταναλωτές ανεξάρτητους χρησιμοποιώντας έναν μεσίτη
μηνυμάτων με κανάλια που ονομάζονται θέματα (topics). Αυτό διαφέρει από την
αποστολή μηνυμάτων από σημείο σε σημείο (Point-to-point) όπου οι αποστολείς
και οι παραλήπτες πρέπει να γνωρίζουν ο ένας τον άλλο για να παραδώσουν και να
λάβουν ένα μήνυμα. Διάφορα είδη επεξεργασίας γεγονότων υπάρχουν, δηλαδή απλή
επεξεργασία γεγονότων, επεξεργασία ροής γεγονότων και πολύπλοκη επεξεργασία
γεγονότων. Τα συστήματα που βασίζονται σε μηνύματα συχνά συμπεριλαμβάνουν
αναγνωρίσιμους αποστολείς και παραλήπτες στον σχεδιασμό. Τα συστήματα
καθοδηγούμενα από γεγονότα μπορεί να μην αναγνωρίζουν αποστολείς και παραλήπτες
με σαφήνεια - αντ' αυτού, κάθε μονάδα παράγει γεγονότα ενώ ακούει για
οποιαδήποτε γεγονότα τα οποία την ενδιαφέρουν ή πρέπει να ανταποκριθεί [12].
Ο "ανώνυμος" ασύγχρονος χειρισμός μηνυμάτων και γεγονότων είναι καλή
στρατηγική για επεκτάσιμα συστήματα.

### *Σχεδιασμός προσανατολισμένος στις πτυχές*

Ο σχεδιασμός προσανατολισμένος στις πτυχές (Aspect-Oriented Design - AOD) είναι
μια μέθοδος με την οποία κατασκευάζεται λογισμικό χρησιμοποιώντας πτυχές για
την υλοποίηση των διασταυρούμενων ανησυχιών και επεκτάσεων που αναγνωρίζονται
στις απαιτήσεις του λογισμικού [11]. Ο AOD εξελίχθηκε από τις πρακτικές
αντικειμενοστρεφούς σχεδιασμού και προγραμματισμού. Παρόλο που δεν έχει ακόμα
γίνει ευρέως διαδεδομένη μέθοδος σχεδιασμού ή προγραμματισμού, η οπτική του
προσανατολισμού στις πτυχές χρησιμοποιείται συχνά σε πλαίσια εφαρμογών και
βιβλιοθηκών λογισμικού, όπου οι παράμετροι του πλαισίου ή της βιβλιοθήκης
μπορούν να διαμορφωθούν με δηλώσεις πτυχών.

### *Σχεδιασμός βασισμένος στους περιορισμούς*

Ο ρόλος των περιορισμών (constraints) στη διαδικασία σχεδιασμού είναι να
περιορίσουν το μέγεθος του χώρου σχεδίασης προκειμένου να αποκλείσουν μη
εφικτές ή μη αποδεκτές εναλλακτικές λύσεις. Οι περιορισμοί επιταχύνουν τον
σχεδιασμό διότι αναγκάζουν μερικές αρχικές αποφάσεις. Οι περιορισμοί μπορούν
να αντικατοπτρίζουν περιορισμούς που επιβάλλονται στο υλικό, το λογισμικό,
τα δεδομένα, τις λειτουργικές διαδικασίες, τις διεπαφές ή οποιοδήποτε στοιχείο
επηρεάζει το λογισμικό. Ο περιορισμένος χώρος σχεδίασης μπορεί στη συνέχεια
να εξερευνηθεί με μεθόδους αναζήτησης ή αναστροφής. Οι προσεγγίσεις σχεδιασμού
βασισμένες σε περιορισμούς χρησιμοποιούνται στον σχεδιασμό διεπαφής χρήστη,
σε παιχνίδια και άλλες εφαρμογές. Γενικά, τα προβλήματα ικανοποίησης
περιορισμών μπορεί να είναι NP-δύσκολα, ωστόσο, μπορούν να χρησιμοποιηθούν
διάφορα είδη προγραμματισμού βασισμένου σε περιορισμούς για να προσεγγιστούν
ή να επιλυθούν προβλήματα περιορισμών.

### *Άλλες μέθοδοι*

Υπάρχουν και άλλες προσεγγίσεις στον σχεδιασμό (βλ. το γνωστικό πεδίο Μοντέλα
και μέθοδοι τεχνολογίας λογισμικού). Για παράδειγμα, οι επαναληπτικές και
προσαρμοστικές μέθοδοι εφαρμόζουν αυξήσεις λογισμικού και μειώνουν την έμφαση
στις αυστηρές απαιτήσεις και τον σχεδιασμό του λογισμικού.

Οι μέθοδοι που βασίζονται σε υπηρεσίες κατασκευάζουν κατανεμημένο λογισμικό
χρησιμοποιώντας υπηρεσίες ιστού που εκτελούνται σε κατανεμημένους υπολογιστές.
Τα λογισμικά συστήματα συνήθως κατασκευάζονται χρησιμοποιώντας υπηρεσίες από
διάφορους παρόχους που διασυνδέονται με τυποποιημένα πρωτόκολλα (π.χ. HTTP,
HTTPS, SOAP) που σχεδιάστηκαν για να υποστηρίζουν την επικοινωνία και την
ανταλλαγή πληροφοριών μεταξύ των υπηρεσιών.

## **Ανάλυση και αξιολόγηση της ποιότητας σχεδιασμού λογισμικού**

### *Αξιολόγηση και έλεγχος σχεδιασμού*

Οι επιθεωρήσεις σχεδιασμού έχουν ως στόχο τον περιεκτικό έλεγχο ενός σχεδίου
προκειμένου να αξιολογηθούν ζητήματα όπως η κατάσταση ή το επίπεδο ολοκλήρωσης,
η κάλυψη των απαιτήσεων, τα ανοιχτά ή ανεπίλυτα ζητήματα και τα πιθανά
προβλήματα. Μια επιθεώρηση σχεδιασμού μπορεί να πραγματοποιηθεί σε οποιοδήποτε
στάδιο του σχεδιασμού. Οι επιθεωρήσεις σχεδιασμού μπορούν να πραγματοποιηθούν
από την ομάδα σχεδιασμού, από έναν ανεξάρτητο τρίτο φορέα ή άλλο ενδιαφερόμενο
μέρος. Ένας έλεγχος σχεδιασμού είναι πιο εστιασμένος σε μια
συγκεκριμένη λίστα χαρακτηριστικών (π.χ. ένας λειτουργικός έλεγχο).
(βλ. παράγραφο 2.3 Επιθεωρήσεις και έλεγχοι στο γνωστικό πεδίο
Ποιότητα λογισμικού).

### *Χαρακτηριστικά ποιότητας*

Διάφορα χαρακτηριστικά συντελούν στην ποιότητα ενός σχεδιασμού λογισμικού,
όπως είναι η δυνατότητα συντήρησης, η φορητότητα, η δυνατότητα δοκιμής, η
ευχρηστία, η ορθότητα και η ανθεκτικότητα. Τα χαρακτηριστικά ποιότητας
αποτελούν ένα σημαντικό υποσύνολο των ανησυχιών (βλ. παράγραφο Ενδιαφερόμενοι
φορείς και ανησυχίες στο γνωστικό πεδίο Αρχιτεκτονική λογισμικού). Ορισμένα
χαρακτηριστικά μπορούν να παρατηρηθούν κατά την εκτέλεση (π.χ. απόδοση, ασφάλεια,
διαθεσιμότητα, λειτουργικότητα, ευχρηστία), ενώ άλλα όχι
(π.χ. τροποποιησιμότητα, φορητότητα, επαναχρησιμοποιησιμότητα, δυνατότητα
δοκιμής), και ορισμένα (π.χ. εννοιολογική ακεραιότητα, ορθότητα, πληρότητα)
είναι εγγενείς στο λογισμικό.

### *Ανάλυση ποιότητας και τεχνικές αξιολόγησης*

Διάφορα εργαλεία και τεχνικές μπορούν να βοηθήσουν στην ανάλυση και αξιολόγηση
της ποιότητας του σχεδιασμού λογισμικού. (βλ. την παράγραφο Εργαλεία
ποιότητας λογισμικού στο γνωστικό πεδίο Ποιότητα λογισμικού.)

    * Οι επιθεωρήσεις σχεδιασμού λογισμικού περιλαμβάνουν άτυπες και σχολαστικές
    τεχνικές για να προσδιορίσουν τα χαρακτηριστικά ποιότητας του λογισμικού με
    βάση τα έγγραφα σχεδιασμού για παράδειγμα επιθεωρήσεις αρχιτεκτονικής,
    επιθεωρήσεις σχεδιασμού, τεχνικές βασισμένες σε σενάρια, ανίχνευση απαιτήσεων.

    * Στατική ανάλυση: επίσημη ή ημιεπίσημη στατική (μη εκτελέσιμη) ανάλυση που
    μπορεί να χρησιμοποιηθεί για την αξιολόγηση μιας σχεδίασης (π.χ. ανάλυση
    δέντρου υπαιτιότητας (fault tree) ή αυτοματοποιημένη διασταύρωση). Η ανάλυση
    ευπάθειας σχεδιασμού (π.χ. στατική ανάλυση για τις αδυναμίες ασφαλείας) μπορεί
    να πραγματοποιηθεί αν η ασφάλεια είναι ανησυχία. Η τυπική ανάλυση σχεδιασμού
    χρησιμοποιεί μαθηματικά μοντέλα που επιτρέπουν στους σχεδιαστές να προβλέπουν
    τη συμπεριφορά και να επικυρώνουν την απόδοση του λογισμικού αντί να εξαρτώνται
    αποκλειστικά από τον δοκιμαστικό έλεγχο. Η επίσημη ανάλυση σχεδιασμού μπορεί
    να χρησιμοποιηθεί για την ανίχνευση εναπομεινάντων προδιαγραφών και λαθών κατά
    την σχεδίαση (ίσως προκαλούμενα από ανακρίβεια, ασάφεια και άλλα είδη λαθών).
    (βλ. το γνωστικό πεδίο Μοντέλα και μέθοδοι τεχνολογίας λογισμικού.)

    * Προσομοίωση και προτυποποίηση: δυναμικές τεχνικές για την αξιολόγηση ενός
    σχεδίου (π.χ. απόδοση της προσομοίωσης ή εφικτότητα πρωτοτύπων).

### *Μέτρα και μετρικές*

Οι μετρικές μπορούν να χρησιμοποιηθούν για την αξιολόγηση ή την ποσοτική
εκτίμηση διάφορων πτυχών της σχεδίασης ενός λογισμικού, για παράδειγμα το
μέγεθος, τη δομή ή την ποιότητα. Οι περισσότερες μετρικές που έχουν προταθεί
βασίζονται στην προσέγγιση που χρησιμοποιείται για την παραγωγή του σχεδιασμού
(βλ. παράγραφο 5 Στρατηγικές και μέθοδοι του σχεδιασμού λογισμικού).
Αυτές οι μετρήσεις κατατάσσονται σε δύο ευρείες κατηγορίες:

    * Βάσει λειτουργίας (δομημένη) μετρική σχεδιασμού: μέτρα που προκύπτουν
    από την ανάλυση της λειτουργικής αποσύνθεσης, απεικονίζονται γενικά
    χρησιμοποιώντας ένα διάγραμμα δομής (μερικές φορές ονομάζεται ιεραρχικό
    διάγραμμα), στο οποίο διάφορες μετρικές μπορούν να υπολογιστούν.

    * Αντικειμενοστρεφείς μετρικές σχεδιασμού: η δομή του σχεδιασμού αναπαρίσταται
    συνήθως ως διάγραμμα κλάσεων, στο οποίο μπορούν να υπολογιστούν διάφορες
    μετρικές. Μπορούν επίσης να υπολογιστούν μετρήσεις για τις ιδιότητες του
    εσωτερικού περιεχομένου κάθε κλάσης.

### *Επαλήθευση, επικύρωση και πιστοποίηση*

Η συστηματική ανάλυση ή αξιολόγηση του σχεδιασμού παίζει σημαντικό ρόλο σε
κάθε μία από αυτές τις τρεις περιοχές:

* επαλήθευση: για να επιβεβαιωθεί ότι ο σχεδιασμός πληροί τις δηλωμένες απαιτήσεις.
* επικύρωση: για να επιβεβαιωθεί ότι ο σχεδιασμός θα επιτρέψει στο σύστημα να
πληροί τις προσδοκίες των ενδιαφερομένων μερών, συμπεριλαμβανομένων πελατών,
χρηστών, χειριστών και συντηρητών.
* πιστοποίηση: πιστοποίηση από τρίτο μέρος για τη συμμόρφωση της σχεδίασης με
τη συνολική του προδιαγραφή και την προοριζόμενη χρήση.

(βλ. παράγραφο 2.2 Επαλήθευση και επικύρωση στο γνωστικό πεδίο Ποιότητα
λογισμικού.)