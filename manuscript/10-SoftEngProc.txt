# Διεργασίες τεχνολογίας λογισμικού {#softengpr}


## Ακρωνύμια

|BPMN	|Business Process Modeling Notation    |
|CASE	|Computer-aided software engineering   |
|CMM	|Capability Maturity Model             |
|CMMI	|Capability Maturity Model Integration |
|GQM	|Goal-question-metric                  |
|IDEF0|Integration definition                |
|KA 	|Knowledge Area		                     |
|PDCA	|Plan-Do-Check-Act                     |
|SLCM	|Software life cycle model             |
|SLCP	|Software life cycle process           |
|UML	|Unified Modeling Language             |


## Εισαγωγή

Το παρόν κεφάλαιο αναφέρεται στις διεργασίες τεχνολογίας λογισμικού, λαμβάνοντας υπόψη ποικίλες οπτικές: ιδέες, κύκλους ζωής και την αξιολόγηση των 
σχετικών διεργασιών. Η κοινότητα της τεχνολογίας λογισμικού είναι ιδιαίτερα ενεργή σε ό,τι αφορά την τυποποίηση ποικίλων τομέων των διεργασιών τεχνολογίας 
λογισμικού.

## Κατανομή των θεμάτων για το γνωστικό πεδίο διεργασίες τεχνολογίας λογισμικού

{id="fig-softengproc-tree"}
![Σχήμα 10.1 Κατανομή των θεμάτων στο γνωστικό πεδίο Διεργασίες τεχνολογίας λογισμικού.](images/10-SoftEngProc.png)

## **Βασικές αρχές των διεργασιών τεχνολογίας λογισμικού**

### Εισαγωγή

Οι διεργασίες τεχνολογίας λογισμικού περιλαμβάνουν εργασιακές δραστηριότητες τις οποίες εκτελούν οι μηχανικοί λογισμικού για την κατασκευή και 
λειτουργία λογισμικού. Όταν εμφανίστηκε ο κλάδος της τεχνολογίας λογισμικού, οι επιστήμονες, οι μηχανικοί και οι τεχνικοί έπρεπε να εξετάσουν τους 
υπάρχοντες κλάδους για να κατανοήσουν το εύρος των διεργασιών τεχνολογίας λογισμικού. Μια διεργασία αποτελείται από ένα σύνολο αλληλοσχετιζόμενων 
δραστηριοτήτων, οι οποίες μετατρέπουν ένα ή περισσότερα στοιχεία εισόδου σε στοιχεία εξόδου, ενώ παράλληλα καταναλώνουν πόρους ώστε να ολοκληρώσουν 
αυτή τη μετατροπή. Ως είδος μηχανικής, η τεχνολογία λογισμικού  χρησιμοποιεί διαδικασίες παρόμοιες με αυτές άλλων τύπων μηχανικής. Για την κατασκευή 
συσκευών ή άλλων προϊόντων, οι μηχανικοί ακολουθούν διάφορα βήματα, καταβάλλοντας σημαντική προσπάθεια σχεδιασμού, βασιζόμενοι σε ένα εξαιρετικά ευρύ 
φάσμα γνώσης, το οποίο ταυτόχρονα εμπλουτίζουν, για παράδειγμα, μέσω της μάθησης για την διαδικασία που εκτελούν και το προϊόν που δημιουργούν.

Ξεκινώντας από την δεκαετία του 1960 και μέχρι την δεκαετία του 1970, ο μηχανικός σχεδιασμός και η κατασκευή παρείχαν μια βάση—ένα θεμέλιο—για αυτό που 
θα αποτελούσε στο μέλλον έναν νέο κλάδο. Εκείνη την εποχή είχε συμφωνηθεί ότι η διεργασία ανάπτυξης λογισμικού θα αναλυόταν σε επιμέρους διαδικασίες, οι 
οποίες θα ήταν δυνατόν να περιλαμβάνουν τον σχεδιασμό, την κατασκευή και αργότερα τις λειτουργίες. Μερικές από τις διαδικασίες που χρειάζονταν για την 
κατασκευή λογισμικού ανήκαν στην κατηγορία του σχεδιασμού, ενώ άλλες στην κατηγορία κατασκευής. Ακόμη και σήμερα, η κοινότητα της τεχνολογίας λογισμικού 
συνεχίζει να μαθαίνει και να βελτιώνει τις σχετικές διεργασίες. Επί του παρόντος, επικρατεί κοινή αποδοχή της αντίληψης ότι η κατασκευή συστημάτων λογισμικού 
απαιτεί αυξημένο σχεδιασμό και προσπάθεια μάθησης, εστιασμένα στο προϊόν υπό ανάπτυξη και στην αντίστοιχη διαδικασία παραγωγής του.

Η έννοια του έργου ορίζεται ως «μια προσπάθεια με καθορισμένα κριτήρια για την έναρξη και λήξη υλοποίησης, που τίθενται για την δημιουργία ενός προϊόντος ή 
υπηρεσίας, σύμφωνα με προκαθορισμένους πόρους ή απαιτήσεις » [1] ή ως «μια προσωρινή προσπάθεια δημιουργίας ενός μοναδικού προϊόντος, υπηρεσίας ή αποτελέσματος » [13]. 
Το έργο αποτελεί έννοια του διοικητικού κλάδου, συνυφασμένο με ξεκάθαρους στόχους και δεσμευμένο από στενό χρονικό περιθώριο, όπως περιγράφεται στο γνωστικό 
πεδίο 9, της Διοίκησης Τεχνολογίας Λογισμικού. Οι διεργασίες τεχνολογίας λογισμικού συνήθως λαμβάνουν χώρα στο πλαίσιο κάποιου έργου.

Πολλές διαδικασίες των πιο συμβατικών κλάδων μηχανικής (για παράδειγμα, της ηλεκτρικής ή χημικής), περιλαμβάνουν σχεδιασμό και κατασκευή, μέσω της οποίας 
παράγονται πολλές μονάδες ενός συστήματος (για παράδειγμα, ενός χημικού αντιδραστήρα). Αυτό, ωστόσο, δεν συμβαίνει στα συστήματα λογισμικού, αν και η κατασκευή 
κρίνεται χρήσιμη για τον προσδιορισμό της ανάγκης ανάπτυξης των πολυάριθμων τμημάτων λογισμικού που στοιχειοθετούν ένα σύστημα λογισμικού. Στην ηλεκτρική ή 
χημική μηχανική, η λειτουργία των αντίστοιχων συστημάτων μετασχηματίζει (ανεπεξέργαστα) υλικά, ενέργεια και φυσικές οντότητες σε άλλες μορφές. Για τον κλάδο 
της τεχνολογίας λογισμικού, αναλογία της παραπάνω λειτουργίας θα μπορούσε να αποτελέσει η εκτέλεση ενός τμήματος λογισμικού (αποτέλεσμα συνόλου διεργασιών 
μηχανικής λογισμικού), το οποίο μετατρέπει ένα είδος δεδομένων σε άλλο.

Για το πέρας της ενότητας, με τον όρο *διεργασία* θα εννοούνται εργασιακές δραστηριότητες και όχι εκτέλεση λογισμικού. 

Το γνωστικό πεδίο των διεργασιών τεχνολογίας λογισμικού είναι στενά συνδεδεμένο με το παρόν γνωστικό πεδίο και σχετίζεται επίσης με τα γνωστικά πεδία 
Διοίκηση μηχανικής λογισμικού, Μοντέλα και μέθοδοι τεχνολογίας λογισμικού, Ποιότητα λογισμικού, Αρχιτεκτονική λογισμικού και Έλεγχος λογισμικού. Η έννοια 
της μέτρησης και  ανάλυσης αρχικής αιτίας του γνωστικού πεδίου των Βασικών αρχών μηχανικής, χαρακτηρίζεται επίσης σχετική.

### Ορισμός διεργασίας λογισμικού

Μια διεργασία αποτελείται από «ένα σύνολο αλληλοσχετιζόμενων ή αλληλοεπιδρώντων δραστηριοτήτων, οι οποίες μετατρέπουν στοιχεία εισόδου σε στοιχεία εξόδου». 
Με τον όρο δραστηριότητα ορίζεται «το σύνολο συνεκτικών καθηκόντων μιας διαδικασίας», ενώ ως καθήκον περιγράφεται «μια απαιτούμενη, προτεινόμενη ή και επιτρεπτή 
εργασία, προοριζόμενη να συμβάλλει στην επίτευξη ενός ή περισσότερων αποτελεσμάτων μιας διαδικασίας» [1]. Σύμφωνα με δεύτερο ορισμό [2], μια διεργασία συνιστά 
«προκαθορισμένη πορεία γεγονότων, ορισμένη σύμφωνα με τον σκοπό της ή την επίδρασή της, η οποία επιτυγχάνεται υπό συγκεκριμένες συνθήκες». Τρίτο ορισμό [7] 
αποτελεί η περιγραφή της διεργασίας ως «σύστημα δραστηριοτήτων, οι οποίες αναλώνουν πόρους για την μετατροπή στοιχείων εισόδου σε στοιχεία εξόδου». Τέλος, 
η έννοια της διεργασίας ενδέχεται να αναφερθεί ως «σύνολο αλληλένδετων ή αλληλοεπιδρώντων δραστηριοτήτων, που μετασχηματίζουν στοιχεία εισόδου σε στοιχεία 
εξόδου για την παράδοση του επιθυμητού αποτελέσματος» [20]. Συμπερασματικά, η περιγραφή μιας διεργασίας ενσωματώνει τα απαιτούμενα στοιχεία εισόδου, τις μεθόδους 
μετασχηματισμού και τα παραγόμενα στοιχεία εξόδου. Οι παραπάνω ορισμοί αναφέρονται σε οποιεσδήποτε διεργασίες, εφαρμοζόμενες στο τμήμα λογισμικού των συστημάτων 
λογισμικού. Τα συστήματα λογισμικού περιλαμβάνουν μηχανήματα υπολογιστών, το ανθρώπινο στοιχείο και χειρωνακτικές διαδικασίες. Το στοιχείο εξόδου μιας διεργασίας 
μπορεί να αποτελέσει στοιχείο εισόδου μιας άλλης. Οι διεργασίες ενδέχεται να περιλαμβάνουν στοιχεία ελέγχου (π.χ. οδηγίες και περιορισμούς) και μηχανισμούς 
ενεργοποίησης (π.χ. εργαλεία, τεχνολογίες ή πόρους, όπως εργατικό δυναμικό και υποδομή) σχετιζόμενα με αυτές [14].

## **Κύκλοι ζωής λογισμικού** 

### Ορισμός κύκλων ζωής λογισμικού, κατηγορίες διεργασιών και ορολογία 

Ένας *κύκλος ζωής*, σύμφωνα με την αναφορά [1], ορίζεται ως «η εξέλιξη ενός συστήματος, προϊόντος, υπηρεσίας, έργου από την σύλληψή του μέχρι την απόσυρση». Στην τεχνολογία λογισμικού, 
οι κύκλοι ζωής συμβάλλουν στην μεταφορά πληροφοριών σχετικών με τα συστήματα λογισμικού και ειδικότερα «με συστήματα για τα οποία το λογισμικό αποτελεί 
στοιχείο πρωταρχικής σημασίας των ενδιαφερόμενων μερών» [1]. Η έννοια των κύκλων ζωής τέθηκε σε εφαρμογή εξαιτίας της αδυναμίας επαρκούς περιγραφής της 
πολυπλοκότητας των συστημάτων μέσω του απλού προσδιορισμού και ορισμού των απαιτούμενων διεργασιών για την παραγωγή λογισμικού. Ήταν, επομένως, απαραίτητος ο 
καθορισμός των κύκλων ζωής, οι οποίοι περιλαμβάνουν μια σειρά από διεργασίες και περιορισμούς [8]. 

Στην τεχνολογία λογισμικού, ο όρος *ανάπτυξη* αφορά ένα κρίσιμο στάδιο του κύκλου ζωής ενός συστήματος, προϊόντος, υπηρεσίας ή έργου: αυτό της κατασκευής 
(ή αλλαγής) ενός συστήματος λογισμικού, ανάλογα με τις ανάγκες των ενδιαφερόμενων μερών. Σύμφωνα με  την οπτική της διαχείρισης παραγωγής/βιομηχανικής 
διαχείρισης, τα συστήματα λογισμικού αναφέρονται ως προϊόντα. Στο συγκεκριμένο πλαίσιο, έχει νόημα η χρήση του όρου *κύκλος ζωής ανάπτυξης προϊόντος λογισμικού*.

Ο *κύκλος ζωής προϊόντος* μπορεί να οριστεί ως «η σειρά των φάσεων που αντιπροσωπεύουν την εξέλιξη ενός προϊόντος, από την σύλληψη της ιδέας στην παραγωγή, 
ανάπτυξη, ωριμότητα μέχρι την απόσυρση» [13]. Ο εν λόγω ορισμός δεν περιορίζεται στα συστήματα λογισμικού αλλά αφορά, σε πιο ευρύ επίπεδο, όλα τα προϊόντα.  

Τα συστήματα λογισμικού περιέχουν μονάδες λογισμικού, οι οποίες συνιστούν «συστατικά της αρχιτεκτονικής λογισμικού σε ατομικό επίπεδο που μπορούν να υποβληθούν 
σε αυτόνομη δοκιμή» (βλ. γνωστικό πεδίο Έλεγχος λογισμικού). Ο κύκλος ζωής ενός συστήματος λογισμικού (κρίνεται σημαντικό να ληφθεί υπόψιν ότι η μηχανική λογισμικού 
υιοθετεί μια διεπιστημονική προσέγγιση) περιλαμβάνει όλες τις διεργασίες, δραστηριότητες και καθήκοντα από την σύλληψη της ιδέας του συστήματος λογισμικού μέχρι 
την απόσυρσή του, συμπεριλαμβανομένης της παραγωγής, λειτουργίας και εξέλιξης, όπως και της απόκτησης, εφόσον χρειαστεί, και της προμήθειας. Με τον ίδιο τρόπο 
μπορεί να γίνει αντιληπτός ο κύκλος ζωής ενός στοιχείου συστήματος λογισμικού (μιας μονάδας λογισμικού). Ο κύκλος ζωής ενός συστήματος λογισμικού λαμβάνει υπόψη 
τις επιχειρησιακές και τεχνικές ανάγκες των ενδιαφερόμενων μερών και την ικανότητα του συστήματος να παράγει, ως αποτέλεσμα εκτέλεσης από ομάδα των διαφορετικών 
διεργασιών του κύκλου ζωής λογισμικού (SLCPs), ένα προϊόν που ικανοποιεί τις ανάγκες των ενδιαφερόμενων μερών και χαρακτηρίζεται από το απαραίτητο επίπεδο 
ποιότητας για τους χρήστες και τα υπόλοιπα μέρη.

Οι επόμενες παράγραφοι απαριθμούν, σύμφωνα με την αναφορά [1], τις κατηγορίες διεργασιών, οι οποίες αντικατοπτρίζουν τις ποικίλες συμμετέχουσες απόψεις στην παραγωγή ενός συστήματος 
λογισμικού:  (1) τεχνικές διεργασίες, συμπεριλαμβανομένων μηχανικών πρακτικών για την παραγωγή, δημιουργία, εξέλιξη, λειτουργία και απόσυρση προϊόντων 
λογισμικού, (2) διεργασίες τεχνικής διαχείρισης, οι οποίες καλύπτουν την σχεδίαση και τον έλεγχο, όπως και την διαχείριση διαμόρφωσης, διαχείριση κινδύνου, 
διαχείριση πληροφοριών και διασφάλιση ποιότητας, (3) οργανωσιακές διαδικασίες υλοποίησης έργων που υποστηρίζουν το μοντέλο κύκλου ζωής, τη διαχείριση υποδομής, 
διαχείριση χαρτοφυλακίου και διαχείριση ανθρώπινων πόρων, γνώσης, ποιότητας και τέλος, (4) διαδικασίες σύναψης συμφωνίας, απαραίτητες για την στήριξη της 
συλλογικής λήψης αποφάσεων και των διαδικασιών απόκτησης και προμήθειας.

Ακολουθεί κατανομή των διεργασιών:

  1. Τεχνικές διεργασίες

    α)	Διεργασία ανάλυσης επιχείρησης ή αποστολής
    β)	Διεργασία καθορισμού αναγκών και απαιτήσεων ενδιαφερόμενων μερών
    γ)	Διεργασία καθορισμού απαιτήσεων συστήματος/λογισμικού
    δ)	Διεργασία καθορισμού αρχιτεκτονικής
    ε)	Διεργασία καθορισμού σχεδίου
    στ)	Διεργασία ανάλυσης συστήματος
    ζ)	Διεργασία υλοποίησης
    η)	Διεργασία ολοκλήρωσης 
    θ)	Διεργασία επαλήθευσης
    ι)	Διεργασία μετάβασης
    ια)	Διεργασία επικύρωσης
    ιβ)	Διεργασία λειτουργίας
    ιγ)	Διεργασία συντήρησης
    ιδ)	Διεργασία διάθεσης

    Διεργασίες τεχνικής διαχείρισης

      α)	Διεργασία σχεδιασμού έργου
      β)	Διεργασία αξιολόγησης έργου και ελέγχου
      γ)	Διεργασία διαχείρισης αποφάσεων
      δ)	Διεργασία διαχείρισης κινδύνου
      ε)	Διεργασία διαχείρισης διαμόρφωσης
      στ)	Διαδικασία διαχείρισης πληροφορίας
      ζ)	Διεργασία μέτρησης
      η)	Διεργασία διασφάλισης ποιότητας

  2. Οργανωσιακές διεργασίες υλοποίησης έργων 

    α)	Διεργασία διαχείρισης μοντέλου κύκλου ζωής
    β)	Διεργασία διαχείρισης υποδομής
    γ)	Διεργασία διαχείρισης χαρτοφυλακίου
    δ)	Διεργασία διαχείρισης ανθρώπινου δυναμικού
    ε)	Διεργασία διαχείρισης ποιότητας 
    στ)	Διεργασία διαχείρισης γνώσης

  3. Διεργασίες συμφωνίας και διαδικασίες απόκτησης και προμήθειας

### Λογική των κύκλων ζωής

Η δημιουργία, λειτουργία και απόσυρση προϊόντων λογισμικού απαιτούν έναν αριθμό διαδικασιών με τις αντίστοιχες δραστηριότητες και καθήκοντα, 
καθώς και ένα σύνολο περιορισμών.  Όπως σημειώθηκε προηγουμένως, τα συστήματα λογισμικού περιλαμβάνουν ανθρώπινο δυναμικό, χειρωνακτικές διαδικασίες, 
λογισμικό και μηχανήματα υπολογιστών. Ο ορισμός των διεργασιών λογισμικού, σύμφωνα με την αναφορά [12], προαπαιτεί τον καθορισμό των στοιχείων εισόδου και εξόδου. Τα στοιχεία εισόδου 
ορισμένων διεργασιών ενδέχεται να αποτελούν στοιχεία εξόδου άλλων. Ως λογικό επόμενο, οι διεργασίες του κύκλου ζωής είναι αλληλένδετες, δηλαδή κάθε ξεχωριστή 
διεργασία (τα στοιχεία εισόδου και εξόδου της) ενδέχεται να εξαρτάται από άλλες. Η συγγενική φύση των εμπλεκόμενων διαδικασιών καθιστά εξαιρετικά πολύπλοκη 
την συνολική διεργασία τεχνολογίας λογισμικού.

Ο προσδιορισμός των κύκλων ζωής συνιστά ισχυρό εργαλείο για την εφαρμογή μιας μηχανικής προσέγγισης στην δημιουργία, λειτουργία και απόσυρση των συστημάτων 
λογισμικού. Ένας κύκλος ζωής πρέπει να οριστεί σύμφωνα με τις αρχές μηχανικής που διέπουν την μηχανική ως κλάδο [8]. Ο προσδιορισμός ενός κύκλου ζωής περιλαμβάνει 
τον καθορισμό κάθε ξεχωριστής διεργασίας και των σχετικών περιορισμών. Είναι σημαντικό, η συγκεκριμενοποίηση των διεργασιών να προσφέρει χρησιμότητα στους 
ανθρώπους, επιτρέποντας μέσω αυτής, την μεταξύ τους επικοινωνία. Τέλος, η συγκεκριμενοποίηση είναι θεμιτό να χαρακτηρίζεται ως εύληπτη και ορθή, καθώς ο σωστός 
προσδιορισμός των κύκλων ζωής συνιστά θεμέλιο της τεχνικής και μηχανικής διαχείρισης, συμπεριλαμβανομένων του συντονισμού και της συμφωνίας, της μέτρησης, 
αξιολόγησης και βελτίωσης και της διαχείρισης ποιότητας.

### Οι έννοιες των μοντέλων διεργασιών και των μοντέλων κύκλου ζωής

Η ενότητα 2.1 παρέχει έναν αριθμό ορισμών του κύκλου ζωής λογισμικού. Σύμφωνα με την αναφορά [2], ένας νέος ορισμός εισάγει την έννοια του *προτύπου* ως κοινά αποδεκτό έγγραφο 
καθοδήγησης, ορίζοντας ότι « μια συγκεκριμένη για ένα έργο ακολουθία δραστηριοτήτων δημιουργείται μέσω της χαρτογράφησης των δραστηριοτήτων ενός προτύπου σε ένα επιλεγμένο 
μοντέλο κύκλου ζωής λογισμικού (SLCM)». Δηλαδή ένας κύκλος ζωής δημιουργείται σύμφωνα με το μοντέλο του κύκλου ζωής.

Παραδείγματα γνωστών μοντέλων κύκλου ζωής για την ανάπτυξη προϊόντος είναι, μεταξύ άλλων, το μοντέλο του καταρράκτη, το μοντέλο V (V-model), το αυξητικό μοντέλο (incremental model), 
το σπειροειδές μοντέλο (spiral model) και το Ευέλικτο μοντέλο (Agile model) [2,3,10].

### Μερικά παραδείγματα μοντέλων κύκλου ζωής για την ανάπτυξη

Κάθε σύστημα λογισμικού έχει τα δικά του χαρακτηριστικά που αντικατοπτρίζουν τις ανάγκες των ενδιαφερόμενων, τόσο των επιχειρήσεων όσο και των τεχνικών. Ένας κατάλληλος 
κύκλος ζωής θα λάβει υπόψιν του όλες αυτές τις ανάγκες. Όπως εξηγήθηκε στην ενότητα 2.3, ένας κύκλος ζωής λογισμικού θα οριστεί ως συμμορφούμενος με (μερικώς ή πλήρως) ένα 
SLCM. Ορισμένοι συγγραφείς χρησιμοποιούν τον όρο «ανάπτυξη» για να αναφερθούν σε ένα SLCM. Για παράδειγμα, χρησιμοποιείται ο όρος «επαναληπτική ανάπτυξη» αντί για «επαναληπτικό μοντέλο 
κύκλου ζωής (λογισμικού)». Οι τύποι κύκλων ζωής περιγράφονται παρακάτω.

Οι *προγνωστικοί* (predictive) κύκλοι ζωής είναι «μια μορφή κύκλου ζωής ενός έργου στην οποία το εύρος, ο χρόνος και το κόστος καθορίζονται στην πρώιμη φάση του κύκλου ζωής» [13]. 
Οι προγνωστικοί κύκλοι ζωής προϋποθέτουν ότι το σύνολο των απαιτήσεων που θα εφαρμοστούν είναι κλειστό και δεν θα υποστεί σημαντικές αλλαγές εκτός ανωτέρας βίας (force majeure).

Ένας *επαναληπτικός* (iterative) κύκλος ζωής ορίζεται ως «ένας κύκλος ζωής έργου όπου το εύρος του έργου συνήθως ορίζεται νωρίς στον κύκλο ζωής αλλά οι εκτιμήσεις του χρόνου 
και κόστους τροποποιούνται τακτικά όσο η κατανόηση του προϊόντος από την ομάδα έργου αυξάνεται. Οι επαναλήψεις αναπτύσσουν το προϊόν μέσω μιας σειράς επαναλαμβανόμενων κύκλων, 
ενώ οι αυξήσεις προσθέτουν διαδοχικά στην λειτουργικότητα του προϊόντος» [3,8,13]. Η διάρκεια των επαναλήψεων ορίζεται ξεχωριστά για κάθε έργο. Η επιλεγόμενη μέθοδος (βλ. γνωστικό πεδίο 11) 
καθορίζει τον ρόλο και μέγεθος των επαναλήψεων.

Σε έναν *εξελικτικό* (evolutionary) κύκλο ζωής, ένα προϊόν ή μια υπηρεσία αλλάζει κατά την διάρκεια της ζωής του. Αυτό ενδέχεται να συμβεί εξαιτίας της αλλαγής των απαιτήσεων 
ή αναγκών των πελατών, αλλά και εξαιτίας της εισαγωγής απαιτήσεων στο προϊόν σε διαδοχικά βήματα και όχι ως ολοκληρωμένο και ατομικό σύνολο [3,8]. Ο όρος «διαδοχικά βήματα» 
είναι συνώνυμος του όρου «επαναλήψεις».

Ένας *σταδιακός* (incremental) κύκλος ζωής ορίζεται ως «ένας προσαρμοστικός κύκλος ζωής έργου στον οποίο το παραδοτέο παράγεται μέσω μιας σειράς επαναλήψεων, οι οποίες διαδοχικά 
προσθέτουν λειτουργικότητα εντός ενός προκαθορισμένου χρονικού πλαισίου. Το παραδοτέο διαθέτει την αναγκαία και επαρκή ικανότητα να θεωρείται ολοκληρωμένο μόνο μετά το πέρας της τελικής επανάληψης» [3,8,13]. 
Οι αυξανόμενοι κύκλοι ζωής δεν είναι πάντα προγνωστικοί, έχουν ωστόσο την ικανότητα να είναι. Η *σταδιακή ανάπτυξη* (incremental development) ορίζεται ως «τεχνική ανάπτυξης λογισμικού στην οποία 
ο ορισμός απαιτήσεων, το σχέδιο, η υλοποίηση και ο έλεγχος, λαμβάνουν χώρα με επικαλυπτόμενο, επαναληπτικό (και όχι διαδοχικό) τρόπο, με αποτέλεσμα τη σταδιακή ολοκλήρωση του συνολικού 
προϊόντος λογισμικού» [2].

Η *συνεχής* (continuous) ανάπτυξη αναφέρεται σε πρακτικές τεχνολογίας λογισμικού, οι οποίες επιτρέπουν τις τακτικές εκδόσεις νέων συστημάτων (συμπεριλαμβανoμένου του λογισμικού) 
σε περιβάλλοντα σταδιοποίησης ή δοκιμών μέσω της χρήσης αυτοματοποιημένων εργαλείων [8,9,11].

Ένας κύκλος ζωής μπορεί να επιβάλει ένα κανόνα, τον οποίο αδυνατούν να επιβάλλουν οι προδιαγραφές απαιτήσεων, καθώς δεν κρίνεται εφικτή η αλλαγή αυτών μετά το πέρας της διαδικασίας 
απαιτήσεων και της συμφωνίας του πελάτη με τις προδιαγραφές. Αυτό, για παράδειγμα, συμβαίνει στους προγνωστικούς κύκλους ζωής. Από την άλλη πλευρά, όταν ο κύκλος ζωής δεν αποκλείει αλλαγές 
στις προδιαγραφές απαιτήσεων, ακόμη και αφού έχει συμφωνήσει και υπογράψει ο πελάτης και εμπράκτως επιτρέπει την αλλαγή τους ανά πάσα στιγμή [κατόπιν διαπραγμάτευσης με τα ενδιαφερόμενα μέρη], 
τότε ο κύκλος ζωής θεωρείται *ανοιχτός στις αλλαγές*. Το χαρακτηριστικό του ανοίγματος στις αλλαγές υποστηρίζεται ως ένα εκ των στοιχείων της Ευέλικτης ανάπτυξης [9,10].

### Μοντέλα κύκλου ζωής ανάπτυξης και η μηχανική τους διάσταση

Πολλά μοντέλα κύκλου ζωής έχουν γίνει ευρέως γνωστά για την ανάπτυξη της μηχανικής λογισμικού, από όταν αυτή ξεκίνησε. Ένα μοντέλο που ήταν δημοφιλές νωρίς στην ιστορία του 
κλάδου, είναι το μοντέλο του καταρράκτη [3], το οποίο, εμπίπτει στην κατηγορία των *προγνωστικών* μοντέλων, περιγραφή των οποίων πραγματοποιήθηκε προηγουμένως. Η προσέγγιση του 
μοντέλου του καταρράκτη για την ανάπτυξη προϊόντος χρησιμοποιεί έναν αριθμό φάσεων, συμπεριλαμβανομένων του ορισμού απαιτήσεων, του προκαταρκτικού και, εν συνεχεία, του λεπτομερούς 
σχεδιασμού, της συγγραφής κώδικα και του ελέγχου. Το παρόν μοντέλο εφαρμόζει μια πολύ αυστηρή διαδικασία, στην οποία καμία φάση δεν μπορεί να ξεκινήσει εφόσον, δεν έχει ολοκληρωθεί 
πρώτα η προηγούμενή της. Το μοντέλο του καταρράκτη ήταν χρήσιμο διότι εισήγαγε την έννοια της συστηματοποίησης στην ανάπτυξη των συστημάτων λογισμικού και επομένως αυτό που μπορεί 
να οριστεί ως μια μηχανική προσέγγιση στην ανάπτυξη προϊόντων λογισμικού. Πολλές παραλλαγές ή επεκτάσεις, όπως το μοντέλο V [3], με πολλά διαφορετικά ονόματα και λεκτικές αποχρώσεις, 
έχουν εισαχθεί κατά την ιστορία της τεχνολογίας λογισμικού. Το μοντέλο του καταρράκτη ήταν μια πρώιμη προσπάθεια για την αντιμετώπιση της λεγόμενης κρίσης λογισμικού [3]. Το μοντέλο του 
καταρράκτη στηρίζεται σε έγγραφα. Η αναφορά [2] ορίζει το μοντέλο καταρράκτη ως «το μοντέλο της διαδικασίας ανάπτυξης λογισμικού στο οποίο οι συστατικές δραστηριότητες, συνήθως της ιδέας, 
απαιτήσεων, υλοποίησης, δοκιμής, εγκατάστασης και ελέγχου, εκτελούνται με αυτή την σειρά, πιθανώς με επικάλυψη αλλά με ελάχιστη ή καθόλου επανάληψη».

Το μοντέλο του καταρράκτη αποτελεί ξεκάθαρο παράδειγμα ενός προγνωστικού κύκλου ζωής. Ορισμένα άλλα παραδείγματα όπως ο αυξητικός κύκλος ζωής, προσπάθησαν επίσης να αντιμετωπίσουν 
την «κρίση λογισμικού». Σε αυτό το μοντέλο (βλ. Ενότητα 2.4), διαφορετικές φάσεις λαμβάνουν χώρα με επικαλυπτόμενο και όχι διαδοχικό τρόπο. Ένας αυξητικός κύκλος ζωής μπορεί να 
είναι επίσης προγνωστικός κύκλος ζωής. Αυτό θα σήμαινε ότι οι απαιτήσεις ορίζονται και κλείνουν προτού ξεκινήσει οποιαδήποτε άλλη φάση ανάπτυξης. Το σπειροειδές μοντέλο, το οποίο 
εισήχθη από τον Boehm, είναι εξελικτικό και βασίζεται στον κίνδυνο αντί για τα έγγραφα ή τον κώδικα [3]. Η αναφορά [2] ορίζει το σπειροειδές μοντέλο ως «ένα μοντέλο της διαδικασίας ανάπτυξης 
λογισμικού, στο οποίο οι συστατικές δραστηριότητες, συνήθως η ανάλυση απαιτήσεων, ο προκαταρκτικός και μετέπειτα ο λεπτομερής σχεδιασμός, η κωδικοποίηση, η ενοποίηση και ο έλεγχος, 
εκτελούνται επαναληπτικά, μέχρι να ολοκληρωθεί το λογισμικό». Ακόμη ένα δημοφιλές μοντέλο θεωρείται η ταχεία δημιουργία πρωτοτύπων (rapid prototyping) που αποτελεί «τύπο προτυποποίησης κατά τον οποίο, 
δίνεται έμφαση στην δημιουργία πρωτοτύπων νωρίς στην διαδικασία ανάπτυξης, επιτρέποντας την έγκαιρη ανατροφοδότηση και ανάλυση για την υποστήριξη της διαδικασίας » [2].

Το Ευέλικτο Μανιφέστο (Agile Manifesto) [16] προκάλεσε αναστάτωση στην κοινότητα της τεχνολογίας λογισμικού, δημιουργώντας μια απότομη αλλαγή της υπάρχουσας νοοτροπίας. 
Η διαφορά έγκειτο, στο γεγονός ότι, σύμφωνα με τους υπογράφοντες του Ευέλικτου Μανιφέστου, η διαδικασία πρέπει να παραμένει ανοιχτή στις αλλαγές – οι απαιτήσεις θα έπρεπε 
να μπορούν να τροποποιηθούν σε οποιοδήποτε στάδιο της διαδικασίας ανάπτυξης, εφόσον υπάρξει αλλαγή στις ανάγκες των χρηστών. Η επικοινωνία και η αμοιβαία εμπιστοσύνη 
ανάμεσα σε ομάδα ανάπτυξης και πελάτη κρινόταν απαραίτητη. Οι υπογράφοντες υποστήριξαν ότι η επικοινωνία ανάμεσα στην ομάδα, συχνά δια ζώσης, και η επικοινωνία με τον 
πελάτη συνιστούσαν κλειδί. Παρόλα αυτά, το Ευέλικτο Μανιφέστο δεν αναφέρει ότι τα έγγραφα (για παράδειγμα για τον ορισμό απαιτήσεων) δεν χρειάζονται. Αντίθετα τα έγγραφα 
είναι απαραίτητα [9,10]. Οι υπογράφοντες τέθηκαν επίσης υπέρ των μικρών σταδιακών παραδόσεων λογισμικού, σε αντίθεση με έργα που εφάρμοζαν το μοντέλο του καταρράκτη και 
την μία μόνο παράδοση λογισμικού στο τέλος του έργου, το οποίο ενδέχεται να συνέβαινε μετά από χρόνια ή μήνες εργασίας. Το Ευέλικτο μοντέλο κάνει σαφή διάκριση ανάμεσα, 
από την μια πλευρά, στις αξίες και αρχές (για παράδειγμα, στην αρχή της συνεχούς παροχής αξίας στον πελάτη ή σε μια δέσμευση για τεχνική αρτιότητα) και από την άλλη, στις 
πρακτικές (προγραμματισμός από ομότιμους, προγραμματισμός σπριντ ή αναδρομικός). Η Ευέλικτη νοοτροπία [10] διαφέρει από την προγνωστική νοοτροπία. Η Ευέλικτη νοοτροπία 
βασίζεται σε ένα πλήθος αξιών και αρχών (για παράδειγμα στη σημαντικότητα της επικοινωνίας, στην αξία του να είσαι ανοιχτός στην αλλαγή, ή στη δέσμευση για τεχνική 
αρτιότητα και συνεχή παράδοση αξίας στον πελάτη). Αυτή η προσέγγιση διαφοροποιεί την Ευέλικτη από την προγνωστική νοοτροπία, η οποία εστιάζει περισσότερο στη δέσμευση για 
την εφαρμογή των προδιαγραφών των απαιτήσεων. Η Ευέλικτη μεθοδολογία συμβάλλει στην αντιμετώπιση της πολυπλοκότητας [8,10].

Αρκετές παρανοήσεις έχουν προκύψει γύρω από την Ευέλικτη νοοτροπία και ορισμένες εξ’ αυτών συνεχίζουν να υφίστανται. Μια από αυτές αναφέρει ότι η Ευέλικτη νοοτροπία αποτελεί 
μέθοδο από μόνη της, το οποίο δεν ισχύει. Άλλη παρανόηση, υποστηρίζει ότι το Ευέλικτο μοντέλο είναι ταχύτερο από αυτό του καταρράκτη, διότι δεν χρειάζεται η σύνταξη οποιουδήποτε 
εγγράφου. Μια τρίτη, ισχυρίζεται ότι το Ευέλικτο μοντέλο αποτελείται από ένα περιορισμένο ή μη δομημένο σύνολο μεθόδων/πρακτικών. Ένα γράφημα που απαριθμεί αρκετές ευρέως χρησιμοποιούμενες 
Ευέλικτες μεθόδους και πρακτικές, μπορεί για παράδειγμα να βρεθεί στην αναφορά [18]. Αρκετές Ευέλικτες μέθοδοι έγιναν δημοφιλείς, όπως ο Ακραίος Προγραμματισμός (Extreme Programming) για την 
ανάπτυξη προϊόντων, το Σκραμ (Scrum) για την διαχείριση έργων και άλλα. Ακόμη και αν ληφθεί υπόψιν η συνεχώς αυξανόμενη δημοτικότητα του Ευέλικτου μοντέλου ζωής για την αντιμετώπιση σύνθετων έργων, 
η επέκταση του Ευέλικτου μοντέλου για μεγάλα έργα και χαρτοφυλάκια εξακολουθεί να αποτελεί πρόκληση. Η σημερινή αντίληψη αναφορικά με το Ευέλικτο Μανιφέστο, είναι ότι προκάλεσε σημαντική αναστάτωση. 
Ωστόσο, αποτελεί ήδη ιδέα είκοσι ετών, με αποτέλεσμα αρκετοί συγγραφείς να υποστηρίζουν ότι ορισμένες από τις αρχές στις οποίες βασίζεται, χρειάζονται ενημέρωση, σύμφωνα με την εμπειρία που έχουν αποκομίσει 
οι προγραμματιστές τα τελευταία είκοσι χρόνια [17].

Η εφαρμογή των Ευέλικτων πρακτικών έχει ξεπεράσει τη διεργασία τεχνολογίας λογισμικού, με αποτέλεσμα οι όροι *επιχειρηματική ευελιξία* (business agility) και *Ευέλικτοι οργανισμοί* 
(Agile organizations) να είναι πλέον ευρέως διαδεδομένοι. Σύμφωνα με την οπτική της τεχνολογίας λογισμικού, η Ευέλικτη νοοτροπία έχει δημιουργήσει μια ευκαιρία για τη βιομηχανία, 
ώστε να επιτύχει τον ανασχεδιασμό και την καλύτερη ευθυγράμμιση των διεργασιών τεχνολογίας λογισμικού και των επιχειρηματικών στρατηγικών διαδικασιών στους οργανισμούς. Η χρήση της Ευέλικτης 
προσέγγισης στις επιχειρηματικές διαδικασίες συνιστά σύνηθες σενάριο. Αυτό αντικατοπτρίζεται, για παράδειγμα, στις αρχές του DevOps [11], το οποίο εξηγείται παρακάτω σε αυτή την ενότητα, και στην 
αξιολόγηση και βελτίωση των διεργασιών, που παρουσιάζεται στην ενότητα 3.

Η ανάγκη παροχής τακτικότερων εκδόσεων, η συχνότερη μεταβολή των αναγκών των χρηστών και των τεχνολογικών κύκλων, 
σε συνδυασμό με την απαιτούμενη ευθυγράμμιση των στρατηγικών σχεδίων των οργανισμών με την τεχνολογία πληροφορικής, 
οδήγησαν στη δημιουργία του DevOps. Το DevOps ορίζεται ως ένα "σύνολο αρχών και πρακτικών που επιτρέπουν την καλύτερη 
επικοινωνία και συνεργασία μεταξύ σχετιζόμενων μεταξύ τους ενδιαφερομένων μερών, με σκοπό τον καθορισμό, την ανάπτυξη και τη λειτουργία 
προϊόντων, υπηρεσιών λογισμικού και συστημάτων και τη συνεχή βελτίωση όλων των διαστάσεων του κύκλου ζωής λογισμικού" [11]. 
Η δυνατότητα παροχής περισσότερων εκδόσεων σε πιο τακτικό ρυθμό, εφόσον έχει οριστεί κατάλληλη διαχείριση των διαδικασιών, 
αποτελεί πλεονέκτημα που καθιστά τις εταιρείες πιο ανταγωνιστικές.

Στην ιστορία της τεχνολογίας λογισμικού, έχουν υπάρξει πολλές αντιπαραθέσεις αναφορικά με τα μοντέλα κύκλου ζωής λογισμικού. 
Σχετικό παράδειγμα αποτελεί η συζήτηση σχετικά με τα πλεονεκτήματα του μοντέλου καταρράκτη έναντι του Ευέλικτου μοντέλου ανάπτυξης λογισμικού 
(βλέπε ενότητα 2). Αυτή η διαφωνία οφείλει να γίνει κατανοητή από ιστορική σκοπιά. Σύμφωνα με αυτή, οι νέες προσεγγίσεις έχουν υπάρξει ανατρεπτικές
ή έχουν θεωρηθεί ανατρεπτικές, ενώ έχει παρατηρηθεί ανεπάρκεια εμπειρικών μέτρων για την υποστήριξη συζητήσεων για την τεχνολογία λογισμικού, 
οι οποίες βασίζονται σε αποδεδειγμένα στοιχεία. Η προαναφερόμενη κατάσταση αλλάζει αργά αλλά σταθερά. Η χρήση εμπειρικών μέτρων ως θεμέλιο για 
τη λήψη αποφάσεων αποτελεί ζωτικής σημασίας στοιχείο για την τεχνολογία λογισμικού [4,8]. Βλέπε επίσης το γνωστικό πεδίο 9, Διαχείριση Μηχανικής Λογισμικού, 
και το γνωστικό πεδίο 12, Ποιότητα λογισμικού.

### Διαχείριση διεργασιών κύκλου ζωής λογισμικού (SLCPs)

Ο κύκλος ζωής κάθε συστήματος λογισμικού περιλαμβάνει διάφορα στάδια. Σύμφωνα με το [14], τα στάδια αυτά είναι τα ακόλουθα:

  1. Σύλληψη: Σε αυτό το στάδιο, προσδιορίζονται οι ανάγκες των ενδιαφερομένων μερών, διερευνώνται έννοιες και προτείνονται λύσεις.
  2. Ανάπτυξη: Σε αυτό το στάδιο, οι απαιτήσεις, οι οποίες αντιπροσωπεύουν τις ανάγκες των χρηστών, θα βελτιωθούν, θα δημιουργηθούν λύσεις, θα κατασκευαστούν συστήματα και όλα θα υποβληθούν στις απαραίτητες διαδικασίες επαλήθευσης και επικύρωσης.
  3. Παραγωγή: Αυτό το στάδιο θα έχει διαφορετικό πεδίο εφαρμογής, ανάλογα με τα χαρακτηριστικά του συστήματος λογισμικού υπό ανάπτυξη. Σε γενικές γραμμές, θα περιλαμβάνει την παραγωγή και τη δοκιμή του συστήματος.
  4. Αξιοποίηση: Σε αυτό το στάδιο, το σύστημα λειτουργεί για την ικανοποίηση των αναγκών των χρηστών.
  5. Υποστήριξη: Σε αυτό το στάδιο, οι προγραμματιστές πραγματοποιούν τις απαραίτητες ενέργειες για την επίτευξη ικανοποιητικής λειτουργίας.
  6. Απόσυρση: Σε αυτό το στάδιο, η ομάδα ακολουθεί τις καθιερωμένες διαδικασίες για την απόσυρση του συστήματος.

Τα στάδια δεν είναι απαραίτητο να διαδέχονται το ένα το άλλο, σύμφωνα με την παραπάνω σειρά. Στην πραγματικότητα, 
η προδιαγραφή του κύκλου ζωής ενός συστήματος λογισμικού περιλαμβάνει τον τρόπο διεξαγωγής των μεταβάσεων μεταξύ 
των προαναφερόμενων σταδίων. Πρέπει να καταστεί σαφές ότι τα στάδια έχουν προσδιοριστεί με γνώμονα έναν γενικότερο κύκλο ζωής. 
Οι κύκλοι ζωής, οι οποίοι αφορούν συγκεκριμένες καταστάσεις, χαρακτηρίζονται από στάδια, ορισμένα με τέτοιο τρόπο ώστε να προσφέρουν 
αξία στα ενδιαφερόμενα μέρη του συγκεκριμένου έργου. Ωστόσο, σε κάθε περίπτωση, τα στάδια αυτά εντάσσονται στις παραπάνω γενικότερες κατηγορίες.

### Διαχείρηση διεργασιών τεχνολογίας λογισμικού

Η διαχείριση διεργασίας ορίζεται ως "η κατεύθυνση, ο έλεγχος και ο συντονισμός των εργασιών που εκτελούνται 
για την ανάπτυξη ενός προϊόντος ή την εκτέλεση μιας υπηρεσίας" [2]. Διάφορα επίπεδα διαχείρισης διέπουν, 
όπως εξηγείται στην αναφορά [1], τη διεργασία τεχνολογίας λογισμικού (βλέπε επίσης γνωστικό πεδίο 9, Διαχείριση Μηχανικής Λογισμικού).
Το χαμηλότερο επίπεδο είναι η διαχείριση τεχνικών διαδικασιών μηχανικής, το δεύτερο είναι το επίπεδο τεχνικής διαχείρισης, 
το οποίο αντιπροσωπεύεται από το επίπεδο τεχνικών διαδικασιών και ενσωματώνει διαδικασίες διαχείρισης έργων. Τέλος, το τρίτο 
επίπεδο είναι το επίπεδο (εκτελεστικής) διαχείρισης, το οποίο επικεντρώνεται σε οργανωτικές διεργασίες ενεργοποίησης, 
όπως η διαχείριση της γνώσης, η διαχείριση μοντέλων κύκλου ζωής ή η διαχείριση χαρτοφυλακίου.

### Προσαρμογή του κύκλου ζωής λογισμικού

Κάθε σύστημα λογισμικού διακρίνεται από διαφορετικά χαρακτηριστικά. Τα διαφοροποιημένα αυτά χαρακτηριστικά, 
στην εκάστοτε περίπτωση, σε συνδυασμό με τις ανάγκες των ενδιαφερόμενων μερών, οδηγούν στην διαμόρφωση συγκεκριμένων 
κύκλων ζωής. Η διαδικασία προσαρμογής ενός κύκλου ζωής, σύμφωνα με την επικρατούσα κατάσταση, περιλαμβάνει τον προσδιορισμό 
όλων των σχετικών χαρακτηριστικών, την επιλογή των κατάλληλων προτύπων ή εγγράφων, εσωτερικών σε ένα οργανισμό, την επιλογή 
στρατηγικής ανάπτυξης/μοντέλου κύκλου ζωής, σταδίων και διαδικασιών και την τεκμηρίωση των αποφάσεων και του σκεπτικού. 
Η προσαρμογή δεν απαιτεί τη διατήρηση των ονομάτων που παρέχονται στην ενότητα 2 ή τη συμπερίληψη όλων τους [5,14,23].

### Πρακτικά ζητήματα

Ο ορισμός μιας διαδικασίας κύκλου ζωής περιλαμβάνει τον προσδιορισμό των τεσσάρων κατηγοριών που παρουσιάστηκαν στην ενότητα 2. 
Αυτό σημαίνει ότι οφείλουν να περιγραφούν οι τεχνικές διεργασίες (ορισμός των διεργασιών που θα απαιτηθούν), οι οργανωτικές διεργασίες 
(αυτό περιλαμβάνει, μεταξύ άλλων διεργασιών, τους ανθρώπινους πόρους), οι διεργασίες τεχνικής διαχείρισης (πώς συνδέονται οι διεργασίες, 
πώς παρακολουθούνται και διαχειρίζονται) και οι διεργασίες συμφωνίας.

Από της ιδρύσεως του κλάδου της τεχνολογίας λογισμικού, παρατηρείται σημαντική εξέλιξή του για ποικίλους λόγους. 
Έναν εξ αυτών συνιστά το γεγονός ότι η κοινότητα δεν σταμάτησε ποτέ να μαθαίνει, ενώ η πολυπλοκότητα των προϊόντων 
αυξάνεται συνεχώς. Ο καθορισμός ενός κύκλου ζωής λογισμικού για την ανάπτυξη ενός προϊόντος απαιτεί την εξέταση των 
χαρακτηριστικών αφενός του προϊόντος (π.χ. ανάγκες των ενδιαφερομένων μερών, μέγεθος ή πολυπλοκότητα του προϊόντος), 
αλλά και άλλων εξωτερικών ως προς αυτό, όπως τα χαρακτηριστικά των ενδιαφερόμενων μερών. Κάτι το οποίο έχει μάθει η κοινότητα 
είναι ότι οι εκτιμήσεις και οι μετρήσεις είναι απαραίτητες. Οι λανθασμένες ή αβέβαιες εκτιμήσεις στο πλαίσιο ενός κύκλου ζωής 
θα οδηγήσουν σε αποτυχία. Ωστόσο, οι ακριβείς εκτιμήσεις δεν είναι εύκολο να παραχθούν. 

Τρέχουσα τάση στην τεχνολογία λογισμικού συνιστά η εστίαση στη συνεχή παράδοση, η οποία υποστηρίζεται από ρεαλιστικές εκτιμήσεις 
και μετρήσεις των διεργασιών και του προϊόντος. Ένα χρήσιμο μάθημα, το οποίο έχουν αφομοιώσει οι μηχανικοί είναι ότι η εργασία με 
μεγάλες διεργασίες, χωρίς την παραγωγή παραδοτέων στην πορεία, αυξάνει την αβεβαιότητα (βλέπε DevOps στην ενότητα 2.5.). Η Ευέλικτη 
νοοτροπία έχει συμβάλει στην αναγνώριση αυτού και έχει βοηθήσει τους μηχανικούς να κατανοήσουν την αξία της επικοινωνίας κατά την διάρκεια 
της διαδικασίας.

Όταν μια διαδικασία ενός έργου ορίζεται σύμφωνα με έναν κύκλο ζωής, είναι σημαντικό αρχικά  να διασφαλιστεί ότι θα υπάρχουν ορισμοί μετρικών/μετρήσεων 
που θα οδηγούν σε ρεαλιστικές εκτιμήσεις και μετρήσεις της διαδικασίας (και του προϊόντος) καθ' όλη τη διάρκεια του ορισμού και της εκτέλεσης του έργου. 
Κατόπιν, πρέπει να καθοριστεί το επίπεδο ακρίβειας και αβεβαιότητας. Οι μετρήσεις της διαδικασίας (και του προϊόντος) του έργου θα πρέπει πάντα να παρέχουν 
ακριβείς πληροφορίες σχετικά με το τι συμβαίνει (την κατάσταση της διαδικασίας και του προϊόντος) κατά την εκτέλεση της διαδικασίας του κύκλου ζωής. Εάν υπάρξει 
αβεβαιότητα για την ακρίβεια των εκτιμήσεων και των μετρήσεων, το έργο ενδέχεται να μην στεφθεί από επιτυχία. Σε αυτή την περίπτωση, θα πρέπει να γίνει ένας αναστοχασμός 
σχετικά με τη συνολική προσέγγιση. Ιστορικά, έχουν αναπτυχθεί πολλές πολεμικές σχετικά με τον προβλεπτικό κύκλο ζωής έναντι του ευέλικτου κύκλου ζωής. Στην τεχνολογία λογισμικού, 
οι συζητήσεις θα πρέπει πάντα να υποστηρίζονται από ρεαλιστικές εκτιμήσεις και μετρήσεις της διαδικασίας και του προϊόντος, οι οποίες μπορούν να μειώσουν με ακρίβεια το επίπεδο αβεβαιότητας.

### Υποδομή διεργασιών λογισμικού, εργαλεία, μέθοδοι

Για τον ορισμό των διεργασιών λογισμικού έχουν χρησιμοποιηθεί διάφορες σημειώσεις, όπως η φυσική γλώσσα, η οποία προσδιορίζει καταλόγους κειμένου των δραστηριοτήτων και εργασιών που τις απαρτίζουν, 
διαγράμματα ροής δεδομένων, διαγράμματα καταστάσεων, ο ορισμός ολοκλήρωσης (IDEF0 - Icam DEFinition for Function Modeling), τα δίκτυα Petri, τα διαγράμματα δραστηριοτήτων της Ενοποιημένης Γλώσσας 
Μοντελοποίησης (UML-Unified Modeling Language), και ο συμβολισμός μοντελοποίησης επιχειρησιακών διαδικασιών (BPMN-Business Process Model and Notation) [2,3]. Η υποδομή διεργασιών λογισμικού περιλαμβάνει 
εργαλεία για την υποστήριξη του ορισμού αυτών των διαδικασιών (π.χ. μια εργαλειοθήκη BPMN), αλλά κυρίως για την υποστήριξη όλων των συγκεκριμένων διεργασιών (δοκιμές ή διαχείριση διαμόρφωσης). 
Οι ορισμοί των διεργασιών συχνά περιλαμβάνουν μεθόδους και φορμαλισμό (π.χ. Rational Unified Process ή extreme programming) [3]. Τα εργαλεία θα πρέπει, ιδανικά, να υποστηρίζουν αυτές τις μεθόδους και, 
εξίσου σημαντικό, να ενσωματώνονται σε αυτές. Επομένως, δεν αρκεί ένα εργαλείο να υποστηρίζει τις δοκιμές. Μόλις, για παράδειγμα, μια μονάδα κώδικα δοκιμαστεί επιτυχώς, το γεγονός αυτό καθίσταται χρήσιμη 
πληροφορία που θα πρέπει να καταγράφεται ώστε να γνωστοποιείται στην υπόλοιπη ομάδα. Αυτό σημαίνει ότι το εργαλείο διαχείρισης ρυθμίσεων και το εργαλείο δοκιμών θα πρέπει να ενσωματωθούν [3,8]. Σε αυτό το πλαίσιο, 
ο όρος *περιβάλλον μηχανικής λογισμικού*, χρησιμοποιείται μερικές φορές και αντιπροσωπεύει ένα σύνολο ολοκληρωμένων εργαλείων. Ο όρος της μηχανικής λογισμικού με τη βοήθεια υπολογιστή, *CASE* (Computer-aided software engineering) 
υπήρξε δημοφιλής στις δεκαετίες του 1980 και του 1990. Κατά κάποιο τρόπο, τα ισχυρά εργαλεία των δεκαετιών του 1980 και του 1990 υπερτιμήθηκαν ως θεραπεία για την κρίση του λογισμικού. Σε κάθε περίπτωση, σήμερα, η αυτοματοποίηση 
ορισμένων διαδικασιών (π.χ. διαχείριση διαμόρφωσης ή τουλάχιστον έλεγχος έκδοσης- δοκιμές- διαχείριση εισιτηρίων) θεωρείται απαραίτητη για την υλοποίηση επιτυχημένων κύκλων ζωής. Μπορείτε επίσης να ανατρέξετε στο γνωστικό πεδίο 11, 
Μοντέλα και Μέθοδοι Τεχνολογίας Λογισμικού.

### Παρακολούθηση των διεργασιών τεχνολογίας λογισμικού και η σχέση τους με το προϊόν λογισμικού

Οι προγραμματιστές οφείλουν να παρακολουθούν την εκτέλεση της διεργασίας τεχνολογίας λογισμικού, να αξιολογούν κατά πόσον επιτυγχάνονται οι στόχοι της διαδικασίας και να εκτιμούν τους κινδύνους. Η παρακολούθηση της διεργασίας αποτελεί 
μέρος της αξιολόγησης της διεργασίας τεχνολογίας λογισμικού (βλέπε ενότητα 3) και μέρος του γνωστικού πεδίου Διαχείριση Τεχνολογίας Λογισμικού [1,3,4,8].

Οι εμπειρικές μέθοδοι υποστηρίζουν την αξιολόγηση και τη βελτίωση της διεργασίας και προϊόντος. Ο στόχος της εκτέλεσης της διεργασίας είναι η απόκτηση προϊόντων που ανταποκρίνονται στις ανάγκες των ενδιαφερομένων μερών. 
Παρά το γεγονός ότι ο τομέας επικεντρώνεται στη διεργασία τεχνολογίας λογισμικού, η παρακολούθηση της διεργασίας απαιτεί την αξιολόγηση τόσο της διαδικασίας όσο και του προϊόντος, χρησιμοποιώντας μια κοινή, πιο ολιστική προσέγγιση.

## **Αξιολόγηση και βελτίωση διεργασιών λογισμικού**

### Επισκόπηση της αξιολόγησης και βελτίωσης διεργασιών λογισμικού

Η ιδέα ότι κάθε εκτελούμενη διαδικασία μπορεί να βελτιωθεί υπήρχε στο κλασικό παράδειγμα Shewhart-Deming Plan-Do-Check-Act (PDCA) [15,24], το οποίο συζητήθηκε και εφαρμόστηκε ήδη από τη δεκαετία του 1950, ενώ τα θεμέλιά του βρίσκονται αιώνες νωρίτερα. 
Για τη διεργασία τεχνολογίας λογισμικού έχουν αναπτυχθεί ποικίλες προσεγγίσεις.

Το παράδειγμα PDCA συνιστά ευκαιρία για την ικανοποίηση μιας ευρέως αναγνωρισμένης ανάγκης, αυτής των εμπειρικών στοιχείων για τη λήψη αποφάσεων. Τέτοιες αποφάσεις περιλαμβάνουν, μεταξύ άλλων, την επιλογή ενός κύκλου ζωής, τη λήψη απόφασης σχετικά με 
τον τρόπο αξιολόγησης μιας διαδικασίας ή την απόφαση για τη βελτίωση μιας διεργασίας. Η απόκτηση εμπειρικών στοιχείων για όλη την εκτέλεση μιας διεργασίας τεχνολογίας λογισμικού κρίνεται απαραίτητη για την επιτυχή εκτέλεσή της.

### Μετρική στόχων-ερωτήσεων (GQM)

Η προσέγγιση στόχος, ερώτηση, μέτρηση (GQM - Goal-question-metric) [21] βασίζεται στο Παράδειγμα Βελτίωσης της Ποιότητας (Quality Improvement Paradigm) του Basili. Και οι δύο προηγούμενες έννοιες βασίζονται στον καθορισμό στόχων που μπορούν να μετρηθούν, 
στην πραγματοποίηση κάποιας αλλαγής και στη συνέχεια στην αξιολόγηση του αποτελέσματος αυτής. Όταν η αξιολόγηση είναι θετική, έχει επέλθει βελτίωση.

### Μέθοδοι που βασίζονται σε πλαίσιο

Ορισμένες μέθοδοι αξιολόγησης βασίζονται σε πλαίσια που χρησιμοποιούν ένα μοντέλο αναφοράς διεργασίας και ένα μοντέλο αναφοράς αξιολόγησης - για παράδειγμα, το μοντέλο ωριμότητας ικανότητας (CMM - Capability Maturity Model), το CMMI (Capability Maturity Model Integration) [4,22], 
και η σειρά του προτύπου ISO/IEC 33000 [4,6], γνωστή και ως SPICE.

Το πλαίσιο του προτύπου ISO/IEC 33000 περιλαμβάνει ένα πλαίσιο αναφοράς διεργασιών και ένα μοντέλο αξιολόγησης διεργασιών. Το πλαίσιο του προτύπου ISO/IEC 33000 αναθεωρεί τη σειρά διεθνών προτύπων ISO/IEC 15504, παρέχοντας ένα πλαίσιο για την αξιολόγηση (1) των ποιοτικών χαρακτηριστικών της διεργασίας, 
ένα εκ των οποίων είναι η ικανότητα της διεργασίας, μαζί με (2) την οργανωτική ωριμότητα. Το πλαίσιο αυτό καλύπτει διεργασίες για την ανάπτυξη, τη συντήρηση και τη χρήση συστημάτων σε όλο τον τομέα της πληροφορικής, καθώς και διαδικασίες για το σχεδιασμό, τη μετάβαση, την παροχή και 
τη βελτίωση των υπηρεσιών. Η έννοια της επιδίωξης συνεχούς βελτίωσης διέπει την αξιολόγηση.

Η παρούσα σειρά έχει αναπτύξει ποικίλες ομάδες προτύπων που αφορούν, εκτός από τα βασικά στοιχεία, τις βασικές απαιτήσεις για τη διενέργεια αξιολογήσεων διεργασιών, τα μοντέλα διεργασιών και το πλαίσιο μέτρησης διεργασιών, οδηγίες για τον τρόπο διενέργειας αξιολογήσεων, πλαίσια μέτρησης 
για την αξιολόγηση της ικανότητας διεργασιών και της οργανωτικής ωριμότητας, μοντέλα αναφοράς διεργασιών για ειδικές περιπτώσεις, όπως η ασφάλεια ή η υψηλή ωριμότητα καθώς και μοντέλα αξιολόγησης διεργασιών για SLCPs, διαδικασίες κύκλου ζωής συστήματος, διαχείριση υπηρεσιών πληροφορικής, 
ασφάλεια και υψηλή ωριμότητα και μοντέλα οργανωτικής ωριμότητας.

Το μοντέλο αναφοράς διεργασιών ορίζεται ως ένα "μοντέλο που περιλαμβάνει ορισμούς διεργασιών σε έναν τομέα εφαρμογής, οι οποίοι περιγράφονται με γνώμονα το σκοπό και τα αποτελέσματα των διεργασιών, όπως και μια αρχιτεκτονική που περιγράφει τις σχέσεις μεταξύ των διεργασιών". 
Το μοντέλο αξιολόγησης διεργασιών ορίζεται ως "μοντέλο κατάλληλο για την αξιολόγηση ενός συγκεκριμένου χαρακτηριστικού ποιότητας διεργασιών, με βάση ένα ή περισσότερα μοντέλα αναφοράς διεργασιών".

### Αξιολόγηση και βελτίωση των διεργασιών στην Ευέλικτη διαδικασία

Οι Ευέλικτες μέθοδοι (π.χ. η μέθοδος διαχείρισης έργων σκραμ (scrum)) εισάγουν στοιχεία που ονομάζονται *αναδρομές* στο τέλος κάθε επανάληψης. Στόχος της αναδρομής είναι η ανάλυση του τι πήγε καλά και τι όχι, η κατανόηση της αιτίας αυτού και ο ορισμός αριθμού δράσεων για μάθηση και βελτίωση. 
Με αυτόν τον τρόπο, η ομάδα βρίσκεται σε ένα συνεχή βρόχο μάθησης [9].
