{mainmatter}

# Απαιτήσεις λογισμικού {#softreq}

## Ακρωνύμια

|INCOSE |International Council on Systems Engineering |
|UML	|Unified Modeling Language		      |   
|SysML  |Systems Modeling Language    		      |

## Εισαγωγή

Το γνωστικό πεδίο των Απαιτήσεων λογισμικού ασχολείται με την εκμαίευση,
την ανάλυση, τον προσδιορισμό και την επαλήθευση των απαιτήσεων του
λογισμικού, καθώς και τη διαχείριση των απαιτήσεων κατά τη διάρκεια
ολόκληρου του κύκλου ζωής του λογισμικού.
Είναι κοινώς αποδεκτό μεταξύ των ερευνητών και των επαγγελματιών του
κλάδου ότι τα έργα λογισμικού είναι ιδιαίτερα ευάλωτα, όταν οι δραστηριότητες
που σχετίζονται με τις απαιτήσεις εκτελούνται ανεπαρκώς.

Οι απαιτήσεις λογισμικού εκφράζουν τις ανάγκες και τους περιορισμούς
ενός προϊόντος λογισμικού, το οποίο συμβάλλει στην επίλυση κάποιου
προβλήματος του  πραγματικού κόσμου.

Ο όρος «απαιτήσεις μηχανικής» χρησιμοποιείται ευρέως στο χώρο για
να υποδηλώσει τη συστηματική διαχείριση των απαιτήσεων.
Για λόγους συνέπειας, ο όρος «μηχανική» θα χρησιμοποιηθεί σε αυτό
το γνωστικό πεδίο αποκλειστικά για την τεχνολογία λογισμικού.

Για τον ίδιο λόγο, ο όρος «μηχανικός απαιτήσεων», ο οποίος εμφανίζεται
ορισμένος από τη βιβλιογραφία, επίσης δεν θα χρησιμοποιηθεί. Αντιθέτως,
θα χρησιμοποιηθούν, οι όροι «μηχανικός λογισμικού» ή σε ορισμένες
περιπτώσεις «ειδικός απαιτήσεων».
Ο τελευταίος θα προτιμηθεί, όπου ο ρόλος υπό εξέταση αφορά 
κάποιον που δεν είναι μηχανικός λογισμικού.
Αυτό δεν σημαίνει, ωστόσο, ότι ένας μηχανικός λογισμικού δεν θα μπορούσε
να εκτελέσει τη λειτουργία.

Ο κίνδυνος, που ενέχεται από την προτεινόμενη ανάλυση, είναι ότι μπορεί
να προκύψει μια διαδικασία καταρράκτη.
Για την πρόληψη του παραπάνω κινδύνου, έχει σχεδιαστεί η ενότητα [Απαιτήσεις 
από την διεργασία ανάπτυξης](#req-process) για να παρέχει μια επισκόπηση υψηλού επιπέδου 
των διαδικασιών απαιτήσεων, μέσω του καθορισμού των πόρων και των 
περιορισμών υπό τους οποίους λειτουργεί η διαδικασία και οι οποίοι 
ενεργούν για να την διαμορφώσουν.

Μια εναλλακτική ανάλυση θα μπορούσε να δομείται βασισμένη στο  προϊόν
(απαιτήσεις συστήματος, απαιτήσεις λογισμικού, πρωτότυπα, περιπτώσεις
χρήσης, και ούτω καθεξής).

Η βασισμένη στην διαδικασία ανάλυση αντανακλά το γεγονός, ότι η διαδικασία
απαιτήσεων για να είναι επιτυχής πρέπει να θεωρηθεί ως μια διαδικασία
που συνεπάγεται πολύπλοκες, στενά συνδεδεμένες δραστηριότητες (τόσο
διαδοχικές όσο και ταυτόχρονες), παρά ως μια διακριτή, εφάπαξ δραστηριότητα,
η οποία εκτελείται κατά την αρχική φάση ενός έργου ανάπτυξης λογισμικού.

Το γνωστικό πεδίο των Απαιτήσεων λογισμικού σχετίζεται στενά με τα
γνωστικά πεδία του Σχεδιασμούς λογισμικού, του Ελέγχου λογισμικού,
της Συντήρησης λογισμικού, της Διαχείρισης  σχηματισμών λογισμικού,
της Διοίκησης τεχνολογίας λογισμικού, των Διεργασιών τεχνολογίας λογισμικού,
των Μοντέλων και μεθόδων τεχνολογίας λογισμικού και της Ποιότητας
λογισμικού.


## Κατανομή των θεμάτων για τις απαιτήσεις λογισμικού

{id="fig-softreq-tree"}
![Σχήμα 1.1 Κατανομή των θεμάτων στο γνωστικό πεδίο Απαιτήσεις λογισμικού.](images/1-SoftReq.png)

Η κατανομή των θεμάτων για τα γνωστικά πεδία των απαιτήσεων λογισμικού
απεικονίζεται στο [Σχήμα 1.1](#fig-softreq-tree).

## Βασικές αρχές στις απαιτήσεις λογισμικού

### Ορισμός μιας απαίτησης λογισμικού

Ουσιαστικά, μια απαίτηση λογισμικού είναι μια ιδιότητα που πρέπει
να εξεταστεί με βάση κάποιο χαρακτηριστικό, ώστε να λύνει κάποιο πρόβλημα
στον πραγματικό κόσμο. Μπορεί να έχει ως σκοπό την αυτοματοποίηση
κάποιου μέρους μιας εργασίας για να υποστηρίξει τις επιχειρηματικές
διαδικασίες ενός οργανισμού, για να διορθώσει ελλείψεις υπάρχοντος
λογισμικού ή για να ελέγξει μια συσκευή -- ονοματίζοντας μόνο κάποια
από τα πολλά προβλήματα που απευθύνονταν οι λύσεις λογισμικού. Οι
τρόποι με τους οποίους λειτουργούν οι χρήστες, οι επιχειρηματικές
διαδικασίες και οι συσκευές είναι πολύπλοκοι κατά κανόνα.
Κατ' επέκταση, οι απαιτήσεις για συγκεκριμένο λογισμικό είναι τυπικώς
ένας πολύπλοκος συνδυασμός, που προκύπτει από διαφορετικούς ανθρώπους
σε διαφορετικά επίπεδα του οργανισμού και οι οποίοι είναι με τον έναν
ή τον άλλο τρόπο εμπλεκόμενοι ή συνδεδεμένοι με αυτή την λειτουργία
από το περιβάλλον στο οποίο θα λειτουργήσει το λογισμικό.

Μια βασική ιδιότητα των απαιτήσεων λογισμικού είναι ότι είναι επαληθεύσιμες
ως μεμονωμένα χαρακτηριστικά, ως λειτουργική απαίτηση ή σε επίπεδο
συστήματος ως μη λειτουργική απαίτηση. Μπορεί να είναι δύσκολο ή ακριβό
να επαληθεύσεις βασικές απαιτήσεις λογισμικού. Για παράδειγμα, η επαλήθευση
των απαιτήσεων απόδοσης για ένα τηλεφωνικό κέντρο μπορεί να απαιτεί
την ανάπτυξη λογισμικού προσομοίωσης.
Οι απαιτήσεις λογισμικού, ο έλεγχος λογισμικού και το προσωπικό ποιότητας
πρέπει να διασφαλίζουν ότι οι απαιτήσεις μπορούν να επαληθευτούν στο
πλαίσιο των διαθέσιμων περιορισμών των πόρων.

Οι απαιτήσεις έχουν και άλλα χαρακτηριστικά πέραν των ιδιοτήτων συμπεριφοράς.
Κοινά παραδείγματα συμπεριλαμβάνουν μια κατάταξη προτεραιότητας με
στόχο τους συμβιβασμούς, ενόψει των πεπερασμένων πόρων και μια μετρική
κατάστασης με στόχο να παρακολουθείται η πρόοδος του έργου.
Συνήθως, οι απαιτήσεις λογισμικού είναι μονοσήμαντες, ώστε να μπορούν
να θέτονται κάτω από την Διαχείριση σχηματισμών λογισμικού καθ' όλη
την διάρκεια του  κύκλου ζωής της λειτουργίας και του λογισμικού.

### Απαιτήσεις προϊόντων και διεργασιών ανάπτυξης {#proddevelreq}

Η απαίτηση του προϊόντος είναι μια ανάγκη ή ένας περιορισμός σχετικά
με το λογισμικό που θα αναπτυχθεί (για παράδειγμα, «Το λογισμικό
πρέπει επαληθεύει ότι ένας μαθητής ικανοποιεί όλες τις προϋποθέσεις
πριν εγγραφεί σε ένα μάθημα»).
Μια απαίτηση διεργασιών ανάπτυξης είναι ουσιαστικά ένας περιορισμός
για την ανάπτυξη του λογισμικού (για παράδειγμα, «Το λογισμικό πρέπει
να αναπτυχθεί χρησιμοποιώντας μια ορθολογικά ενοποιημένη διαδικασία»).

Ορισμένες απαιτήσεις λογισμικού δημιουργούν σιωπηρές απαιτήσεις διεργασιών
ανάπτυξης. Ένα παράδειγμα είναι η επιλογή της τεχνικής με την οποία
επαληθεύονται. Ένα άλλο μπορεί να είναι η χρήση ιδιαίτερα αυστηρών
τεχνικών ανάλυσης (όπως μέθοδοι τυπικών προδιαγραφών) για τη μείωση
των σφαλμάτων που μπορούν να οδηγήσουν σε ανεπαρκή αξιοπιστία.
Απαιτήσεις διαδικασιών μπορούν, επίσης, να επιβληθούν απευθείας από
τον οργανισμό ανάπτυξης, τους πελάτες του ή από τρίτους όπως μια ρυθμιστική
αρχή.

### Λειτουργικές και μη λειτουργικές απαιτήσεις {#func-nonfun-req}

Οι λειτουργικές απαιτήσεις περιγράφουν τις λειτουργίες τις οποίες
το λογισμικό πρέπει εκτελέσει. Για παράδειγμα, τη μορφοποίηση κειμένου
ή την διαμόρφωση ενός σήματος. Είναι γνωστές και ως δυνατότητες ή
λειτουργίες.
Μια λειτουργική απαίτηση μπορεί, επίσης, να περιγραφεί ως μια απαίτηση
για την οποία μπορεί να γραφεί ένα πεπερασμένο σύνολο δοκιμασμένων
βημάτων για να επαληθευτεί η συμπεριφορά της.

Μη λειτουργικές απαιτήσεις είναι εκείνες οι οποίες δρουν για να περιορίσουν
τη λύση. Είναι γνωστές και ως περιορισμοί ή ποιοτικές απαιτήσεις.
Μπορούν, επίσης, να κατηγοριοποιηθούν ανάλογα με το αν είναι απαιτήσεις
απόδοσης, απαιτήσεις συντήρησης, απαιτήσεις διασφάλισης, απαιτήσεις
αξιοπιστίας, απαιτήσεις ασφάλειας, απαιτήσεις διαλειτουργικότητας
ή ένας από τους πολλούς διάφορους τύπους απαιτήσεων λογισμικού (βλ.
παράγραφο [Μοντέλα και χαρακτηριστικά ποιότητας](#modattrb), στο γνωστικό
πεδίο Ποιότητα λογισμικού).

### Αναδυόμενες ιδιότητες {#emergpr}

Ορισμένες απαιτήσεις αντιπροσωπεύουν αναδυόμενες ιδιότητες λογισμικού,
δηλαδή, απαιτήσεις οι οποίες δεν μπορούν να αντιμετωπιστούν από ένα
και μόνο συστατικό αλλά εξαρτώνται από το πόσο όλα τα συστατικά στοιχεία
του λογισμικού διαλειτουργούν. Για παράδειγμα, η απαίτηση απόδοσης
για ένα τηλεφωνικό κέντρο θα μπορούσε να εξαρτάται από το πώς το τηλεφωνικό
σύστημα, το σύστημα πληροφοριών και οι φορείς αλληλεπιδρούν υπό πραγματικές
συνθήκες λειτουργίας.
Οι αναδυόμενες ιδιότητες εξαρτώνται σημαντικά από την αρχιτεκτονική
του συστήματος.

### Ποσοτικές απαιτήσεις

Οι απαιτήσεις λογισμικού θα πρέπει να δηλώνονται όσο το δυνατόν πιο
σαφώς και μονοσήμαντα και όπου είναι κατάλληλο, ποσοτικά. Είναι σημαντικό
να αποφευχθούν οι ασαφείς και μη επαληθεύσιμες απαιτήσεις οι οποίες
εξαρτώνται για την ερμηνεία τους από την υποκειμενική κρίση («το λογισμικό
πρέπει να είναι αξιόπιστο», «το λογισμικό πρέπει να είναι φιλικό προς
το χρήστη»). Αυτό είναι ιδιαίτερα σημαντικό για τις μη λειτουργικές
απαιτήσεις. Δύο παραδείγματα ποσοτικών απαιτήσεων είναι τα εξής: το
λογισμικό ενός τηλεφωνικού κέντρου πρέπει να αυξήσει την απόδοσή του
κατά 20%, και ένα σύστημα πρέπει να έχει πιθανότητα να προκαλέσει
ένα ανεπανόρθωτο σφάλμα (fatal error) κατά τη διάρκεια οποιασδήποτε
ώρας λειτουργίας, μικρότερη από 1%. Η απαίτηση απόδοσης είναι σε πολύ
υψηλό επίπεδο και θα πρέπει να χρησιμοποιηθεί για να παράγει μια σειρά
από λεπτομερείς απαιτήσεις.
Η απαίτηση αξιοπιστίας θα περιορίσει αρκετά την αρχιτεκτονική του
συστήματος.

### Απαιτήσεις συστήματος και λογισμικού

Σε αυτό το θέμα, «σύστημα» είναι
ένας αλληλεπιδραστικός συνδυασμός των στοιχείων για την επίτευξη ενός
καθορισμένου στόχου.
Αυτά περιλαμβάνουν υλικό υπολογιστή (hardware), λογισμικό (software),
υλικο-λογισμικό (firmware), ανθρώπους, πληροφορίες, τεχνικές, εγκαταστάσεις,
υπηρεσίες, καθώς και άλλα στοιχεία υποστήριξης,
όπως ορίζεται από το Διεθνές συμβούλιο για την τεχνολογία λογισμικού
και συστημάτων (INCOSE).

Απαιτήσεις συστήματος είναι οι απαιτήσεις για το σύστημα ως σύνολο.
Σε ένα σύστημα που περιέχει στοιχεία του λογισμικού, προέρχονται
οι απαιτήσεις λογισμικού από τις απαιτήσεις του συστήματος.

Αυτό το γνωστικό πεδίο ορίζει τις «απαιτήσεις των χρηστών» με ένα
ελεγχόμενο τρόπο, όπως τις απαιτήσεις των πελατών του συστήματος ή
των τελικών χρηστών.
Οι απαιτήσεις του συστήματος, αντιθέτως, περιλαμβάνουν τις απαιτήσεις
των χρηστών, τις απαιτήσεις άλλων ενδιαφερόμενων μερών (όπως οι ρυθμιστικές
αρχές), καθώς και απαιτήσεις χωρίς μία ανθρώπινη αναγνωρίσιμη πηγή.


## Απαιτήσεις από την διεργασία ανάπτυξης {#req-process}
Αυτή η ενότητα εισάγει τις απαιτήσεις λογισμικού από την διεργασία
ανάπτυξης, προσανατολίζοντας τα υπόλοιπα πέντε θέματα και δείχνοντας
πώς οι απαιτήσεις από τη διεργασία ανάπτυξης βρίσκονται σε άμεση συνάρτηση
με τη συνολική διαδικασία τεχνολογίας λογισμικού.

### Μοντέλα διεργασιών {#pr-models}

Ο στόχος αυτού του θέματος είναι να καταστήσει σαφές ότι οι απαιτήσεις
από τη διεργασία ανάπτυξης

  * δεν είναι μία διακριτή εφάπαξ δραστηριότητα του κύκλου ζωής του
  λογισμικού, αλλά περισσότερο μια διαδικασία που ξεκινάει στην αρχή
  του έργου και συνεχίζει να τελειοποιείται καθ 'όλη τη διάρκεια του
  κύκλου ζωής του,
  * προσδιορίζει τις απαιτήσεις του λογισμικού ως στοιχεία διαμόρφωσης
  και τα διαχειρίζεται χρησιμοποιώντας τις ίδιες πρακτικές διαχείρισης
  σχηματισμών του λογισμικού ως άλλα στοιχεία από τις διαδικασίες του
  κύκλου ζωής του λογισμικού και
  * πρέπει να ευθυγραμμίζεται με τον οργανισμό και την «βασική ιδέα»
  του έργου.

Ειδικότερα, αυτό το θέμα ασχολείται με το πώς οι δραστηριότητες της
εκμαίευσης, της ανάλυσης, του προσδιορισμού  και της επαλήθευσης ρυθμίζονται
για διαφορετικούς τύπους έργων και περιορισμών.
Το θέμα περιλαμβάνει επίσης δραστηριότητες που συνεισφέρουν στις απαιτήσεις
από τη διεργασία ανάπτυξης, όπως το μάρκετινγκ και μελέτες σκοπιμότητας.

### Φορείς των διεργασιών {#actors}

Το θέμα αυτό εισάγει τους ρόλους των ανθρώπων που συμμετέχουν στις
απαιτήσεις από τη διεργασία ανάπτυξης. Αυτή η διεργασία είναι θεμελιωδώς
διεπιστημονική, και ο ειδικός των απαιτήσεων πρέπει να μεσολαβήσει
μεταξύ του πεδίου των ενδιαφερόμενων μερών και της τεχνολογίας λογισμικού.
Συνήθως υπάρχουν πολλοί άνθρωποι που εμπλέκονται, εκτός από τον ειδικό
απαιτήσεων, καθένας από τους οποίους έχει μερίδιο στο λογισμικό.
Τα ενδιαφερόμενα μέρη ποικίλλουν μεταξύ των έργων, περιλαμβάνουν όμως
πάντα τους χρήστες/διαχειριστές και τους πελάτες (που δεν χρειάζεται
να είναι οι ίδιοι).
Τυπικά παραδείγματα των ενδιαφερομένων μερών λογισμικού περιλαμβάνουν
(αλλά δεν περιορίζονται σε αυτά) τα εξής:

  * Χρήστες: Αυτή η ομάδα αποτελείται από αυτούς που θα λειτουργήσουν
  το λογισμικό.
  Ως επί το πλείστον είναι μια ετερογενής ομάδα που αφορά ανθρώπους
  με διαφορετικούς ρόλους και απαιτήσεις.
  * Πελάτες: Αυτή η ομάδα περιλαμβάνει αυτούς που προμηθεύονται 
  το λογισμικό ή αυτούς που αποτελούν αγορά-στόχο του λογισμικού.
  * Αναλυτές της αγοράς: Ένα προϊόν μαζικής αγοράς δεν θα έχει έναν
  πελάτη στον οποίο προμηθεύσει το λογισμικό, έτσι οι άνθρωποι του μάρκετινγκ
  συχνά είναι απαραίτητο  να καθορίσουν ποιές είναι οι ανάγκες της αγοράς
  και να ενεργούν ως πελάτες μεσολάβησης.
  * Ρυθμιστές: Πολλά πεδία εφαρμογών, όπως το τραπεζικό αλλά και των
  μέσων μαζικής μεταφοράς, είναι ρυθμιζόμενα. Το λογισμικό που προορίζεται γι αυτούς
  τους τομείς πρέπει να συμμορφώνεται με τις απαιτήσεις των ρυθμιστικών αρχών.
  * Μηχανικοί λογισμικού: Αυτά τα άτομα έχουν θεμιτό ενδιαφέρον να επωφελούνται
  από την ανάπτυξη του λογισμικού. Για παράδειγμα, την επαναχρησιμοποίηση
  των συστατικών σε ή από άλλα προϊόντα. Αν, σε αυτό το σενάριο, ένας
  πελάτης ενός συγκεκριμένου προϊόντος έχει συγκεκριμένες απαιτήσεις
  που θέτουν σε κίνδυνο τη δυνατότητα επαναχρησιμοποίησης, οι μηχανικοί
  λογισμικού πρέπει να ζυγίζουν προσεκτικά τα δικά τους μερίδια ενάντια
  σε εκείνα του πελάτη. Ειδικές απαιτήσεις, ιδίως λόγω περιορισμών,
  ενδέχεται να έχουν σημαντικές επιπτώσεις στο κόστος του έργου ή την
  παράδοσή του επειδή είτε ταιριάζουν είτε όχι με το σύνολο των δεξιοτήτων
  των μηχανικών.
  Πρέπει να προσδιοριστούν σημαντικά αντισταθμίσματα μεταξύ των εν λόγω
  απαιτήσεων.

Δεν θα είναι δυνατόν να ικανοποιηθούν απόλυτα οι απαιτήσεις του κάθε
ενδιαφερόμενου μέρους και είναι δουλειά του μηχανικού λογισμικού να
διαπραγματευτεί ανταλλάγματα που είναι αποδεκτά τόσο από τα κύρια
ενδιαφερόμενα μέρη αλλά και εντός του προϋπολογισμού και των τεχνικών,
ρυθμιστικών και άλλων περιορισμών.
Απαραίτητη προϋπόθεση για αυτό είναι ότι πρέπει να προσδιοριστούν
όλα τα ενδιαφερόμενα μέρη, να αναλυθεί η φύση της «συμμετοχής» τους
και να εκμαιεύονται οι απαιτήσεις τους.

### Υποστήριξη και διαχείριση διεργασιών

Αυτή η ενότητα εισάγει τους πόρους διαχείρισης του έργου που απαιτούνται
και καταναλώνονται από τις απαιτήσεις των διεργασιών ανάπτυξης. Καθορίζει
το πλαίσιο για την πρώτη ενότητα, [Έναρξη και ορισμός σκοπού](#initiat-scope-defin-mng), στο γνωστικό
πεδίο Διοίκηση τεχνολογίας λογισμικού.
Κύριος σκοπός του είναι να κάνει τη σύνδεση μεταξύ των δραστηριοτήτων
διεργασιών που προσδιορίζεται στο θέμα Μοντέλα διεργασιών και των θεμάτων του κόστους,
των ανθρώπινων πόρων, της εκπαίδευσης και των εργαλείων.

### Ποιότητα και βελτίωση διεργασιών

Αυτό το θέμα ασχολείται με την αξιολόγηση της ποιότητας και τη βελτίωση
των απαιτήσεων των διεργασιών ανάπτυξης. Σκοπός του είναι να τονίσει
το βασικό ρόλο που παίζουν σε όρους κόστους και επικαιρότητας ενός
προϊόντος λογισμικού και ικανοποίησης του πελάτη από αυτό. Θα συμβάλει
στον προσανατολισμό αυτών των απαιτήσεων με τα πρότυπα διεργασίας
ποιότητας και πρότυπα διεργασίας βελτίωσης  για το λογισμικό και τα
συστήματα.
Η ποιότητα και η διεργασίας βελτίωσης είναι στενά συνδεδεμένες με
την γνωστική περιοχή τόσο της Ποιότητας λογισμικού αλλά και των Διεργασιών
τεχνολογίας λογισμικού, και περιλαμβάνουν:

  * την κάλυψη των απαιτήσεων των διεργασιών ανάπτυξης μέσω προτύπων
  και μοντέλων της διεργασίας βελτίωσης,
  * τη μέτρηση και τη συγκριτική αξιολόγηση των απαιτήσεων των διεργασιών
  ανάπτυξης,
  * το σχεδιασμό και την εφαρμογή της βελτίωσης και
  * την ασφάλεια του σχεδιασμού και της εφαρμογής της βελτίωσης.

## Εκμαίευση απαιτήσεων

Η εκμαίευση απαιτήσεων ασχολείται με τις πηγές των απαιτήσεων λογισμικού
και το πώς ο μηχανικός λογισμικού μπορεί να τις συλλέξει. Είναι το
πρώτο στάδιο κατανόησης του προβλήματος που το λογισμικό καλείται
να επιλύσει. Πρόκειται ουσιαστικά για μια ανθρώπινη δραστηριότητα
όπου τα ενδιαφερόμενα μέρη προσδιορίζονται και διαμορφώνονται οι σχέσεις
μεταξύ της ομάδας ανάπτυξης και του πελάτη.
Ορίζεται ποικιλοτρόπως και ως «σύλληψη απαιτήσεων», «ανακάλυψη απαιτήσεων»
και «απόκτηση απαιτήσεων».

Μία από τις θεμελιώδεις αρχές μιας καλής διαδικασίας εκμαίευσης απαιτήσεων
είναι η αποτελεσματική επικοινωνία μεταξύ των διαφόρων ενδιαφερομένων
μερών. Η επικοινωνία αυτή συνεχίζεται καθ' όλη τη διαδικασία της ανάπτυξης
του κύκλου ζωής του λογισμικού με διάφορα ενδιαφερόμενα μέρη σε διαφορετικά
χρονικά σημεία. Πριν ξεκινήσει η ανάπτυξη, οι ειδικοί απαιτήσεων μπορούν
να αποτελέσουν τον αγωγό για την επικοινωνία αυτή. Θα πρέπει να μεσολαβήσουν
μεταξύ του πεδίου των χρηστών του λογισμικού (και άλλων ενδιαφερομένων
μερών) και τον τεχνικό κόσμο του μηχανικού λογισμικού.
Μια σειρά από εσωτερικά συνεπή μοντέλα σε διαφορετικά επίπεδα αφαίρεσης
διευκολύνουν την επικοινωνία μεταξύ των χρηστών του λογισμικού/ενδιαφερόμενων
μερών και των μηχανικών λογισμικού.

Ένα κρίσιμο στοιχείο της εκμαίευσης απαιτήσεων είναι η ενημέρωση της
εφαρμογής του σχεδίου. Αυτό περιλαμβάνει την παροχή μιας περιγραφής
του λογισμικού, καθώς και  το σκοπό και την ιεράρχηση των παραδοτέων,
για να εξασφαλιστεί ότι οι πιο σημαντικές επιχειρηματικές ανάγκες
του πελάτη ικανοποιούνται κατά προτεραιότητα. Αυτό ελαχιστοποιεί τον
κίνδυνο οι ειδικοί απαιτήσεων να ξοδεύουν χρόνο εκμαιεύοντας απαιτήσεις
που είναι χαμηλής σημασίας, ή που αποδεικνύονται ότι είναι πλέον άνευ
αντικειμένου όταν παραδίδεται το λογισμικό.
Από την άλλη πλευρά, η περιγραφή πρέπει να είναι κλιμακούμενη και
επεκτάσιμη για να δεχθεί περαιτέρω απαιτήσεις που δεν εκφράζονται
στις πρώτες επίσημες λίστες καθώς και να είναι συμβατή με τις προηγούμενες,
όπως προβλέπεται σε αναδρομικές μεθόδους.

### Πηγές απαιτήσεων

Οι απαιτήσεις έχουν πολλές πηγές στο τυπικό λογισμικό, και είναι σημαντικό
να εντοπίζονται και να αξιολογούνται όλες οι πιθανές πηγές. Το θέμα
αυτό έχει σχεδιαστεί για την προαγωγή της επίγνωσης των διαφόρων πηγών
των απαιτήσεων του λογισμικού και των πλαισίων διαχείρισής τους.
Τα κύρια σημεία που καλύπτονται είναι τα εξής:

  * Στόχοι: Ο όρος «στόχος» (μερικές φορές ονομάζεται «ανησυχία των
  επιχειρήσεων» ή «κρίσιμος παράγοντας επιτυχίας») αναφέρεται στους
  συνολικά υψηλού επιπέδου στόχους του λογισμικού. Παρέχουν την σκοπιμότητα
  του λογισμικού, αλλά είναι συχνά ασαφείς. Οι μηχανικοί λογισμικού
  πρέπει να δώσουν ιδιαίτερη προσοχή στην εκτίμηση της αξίας (σε σχέση
  με την προτεραιότητα) και το κόστος των στόχων.
  Μια μελέτη σκοπιμότητας είναι  ένας τρόπος σχετικά χαμηλού κόστους
  για να γίνει αυτό.
  * Γνώση της περιοχής: Ο μηχανικοί λογισμικού θα πρέπει να αποκτούν
  ή να διαθέτουν γνώσεις σχετικά με το πεδίο εφαρμογής. Η γνώση της
  περιοχής παρέχει το πλαίσιο, μέσα στο οποίο πρέπει να καθορίζονται
  όλες οι απαιτήσεις γνώσεων που προέκυψαν, ώστε να το καταλάβουν. Είναι
  μια καλή πρακτική για να μιμηθεί μια οντολογική προσέγγιση στην γνώση
  της περιοχής.
  Πρέπει να προσδιορίζονται οι σχέσεις μεταξύ των σχετικών εννοιών εντός
  του πεδίου εφαρμογής.
  * Ενδιαφερόμενα μέρη/«οι έχοντες λόγο» (βλ. παράγραφο [Φορείς
  των διεργασιών](#actors)):  Μεγάλο μέρος του λογισμικού έχει αποδειχθεί μη ικανοποιητικό,
  επειδή έχει τονίσει τις απαιτήσεις μιας ομάδας των ενδιαφερομένων
  μερών σε βάρος των άλλων. Ως εκ τούτου, το λογισμικό είναι δύσκολο
  στη χρήση ή υπονομεύει τις πολιτισμικές και πολιτικές δομές της οργάνωσης
   πελάτη.
  Ο μηχανικοί λογισμικού πρέπει να προσδιορίσουν, να αντιπροσωπεύσουν
  και να διαχειρίζονται τις «οπτικές» πολλών διαφορετικών τύπων ενδιαφερομένων
  μερών.
  * Επιχειρησιακοί κανόνες: Αυτές είναι δηλώσεις που ορίζουν ή περιορίζουν
  κάποια πτυχή της δομής ή της συμπεριφοράς της ίδιας της επιχείρησης.
  "Ένας φοιτητής δεν μπορεί να εγγραφεί στα μαθήματα του επόμενου εξαμήνου,
  αν εξακολουθούν να υπάρχουν κάποια απλήρωτα δίδακτρα» θα μπορούσε
  να είναι ένα παράδειγμα ενός επιχειρησιακού κανόνα, ο οποίος θα είναι
  μια πηγή απαίτησης για το λογισμικό εγγραφής ενός πανεπιστημίου.
  * Επιχειρησιακό περιβάλλον: Απαιτήσεις θα προέρχονται από το περιβάλλον
  στο οποίο θα εκτελεστεί το λογισμικό. Αυτές μπορεί να είναι, για παράδειγμα,
  χρονικοί περιορισμοί σε λογισμικό πραγματικού χρόνου ή περιορισμούς
  επιδόσεων σε ένα επιχειρηματικό περιβάλλον.
  Πρέπει να αναζητηθούν ενεργά, επειδή μπορεί να επηρεάσουν σε μεγάλο
  βαθμό τη σκοπιμότητα και το κόστος του λογισμικού, καθώς περιορίζουν
  τις επιλογές σχεδιασμού.
  * Οργανωσιακό περιβάλλον: Το λογισμικό απαιτείται συχνά να υποστηρίξει
  μια επιχειρηματική διαδικασία, η επιλογή της οποίας μπορεί να επηρεάζεται
  από τη δομή, την κουλτούρα και την εσωτερική πολιτική της οργάνωσης.
  Ο μηχανικοί λογισμικού πρέπει να είναι ευαίσθητοι απέναντι σε αυτές,
  δεδομένου ότι σε γενικές γραμμές το νέο λογισμικό δεν πρέπει να
  επιβάλει κάποια απρόβλεπτη αλλαγή στην επιχειρηματική διαδικασία.

### Τεχνικές εκμαίευσης

Αφού έχουν προσδιοριστεί οι πηγές απαιτήσεων, ο μηχανικός λογισμικού
μπορεί να ξεκινήσει την εκμαίευση των πληροφοριών, που αφορούν τις
απαιτήσεις από αυτές. Σημειώνεται ότι οι απαιτήσεις σπάνια εκμαιεύονται
έτοιμες. Αντίθετα, ο μηχανικός λογισμικού αποσπά πληροφορίες από τις
οποίες διατυπώνει απαιτήσεις. Αυτό το θέμα επικεντρώνεται σε τεχνικές
για να κάνει τα ανθρώπινα ενδιαφερόμενα μέρη να διατυπώσουν τις απαιτήσεις,
που σχετίζονται με τις πληροφορίες. Είναι ένα πολύ δύσκολο έργο και
ο μηχανικός λογισμικού θα πρέπει να ευαισθητοποιηθεί ως προς το γεγονός
ότι  οι χρήστες, εν παραδείγματι, μπορεί να έχουν δυσκολία να περιγράψουν
τα καθήκοντά τους, μπορεί να μην εκφράσουν σημαντικές πληροφορίες
ή μπορεί να είναι απρόθυμοι ή ανίκανοι να συνεργαστούν. Είναι ιδιαίτερα
σημαντικό να κατανοήσουμε ότι η εκμαίευση δεν είναι μια παθητική δραστηριότητα
και ότι, ακόμη και αν τα συνεργάσιμα και σαφή ενδιαφερόμενα μέρη είναι
διαθέσιμα, ο μηχανικός λογισμικού πρέπει να εργαστεί σκληρά για να
αποσπάσει τις σωστές πληροφορίες. Πολλές επιχειρησιακές ή τεχνικές
απαιτήσεις είναι σιωπηρές ή υπάρχει ανατροφοδότηση που δεν έχει ακόμη
ληφθεί από τους τελικούς χρήστες. Η σημασία του σχεδιασμού, της επαλήθευσης
και της επικύρωσης στην εκμαίευση απαιτήσεων δεν μπορεί να υπερεκτιμηθεί.
Υπάρχει μια σειρά από τεχνικές για την εκμαίευση απαιτήσεων, εκ των
οποίων οι κυριότερες είναι οι εξής:

  * Συνεντεύξεις: Ένα «παραδοσιακό» μέσο εκμαίευσης απαιτήσεων είναι
  η λήψη συνέντευξης από τα ενδιαφερόμενα μέρη.
  Είναι σημαντικό να κατανοήσουμε τα πλεονεκτήματα και τους περιορισμούς
  των συνεντεύξεων και πώς θα πρέπει να διεξαχθούν.
  * Σενάρια: Τα σενάρια παρέχουν ένα πολύτιμο μέσο για την διαμόρφωση
  πλαισίου στην εκμαίευση των απαιτήσεων των χρηστών. Επιτρέπουν στο
  μηχανικό λογισμικού να διαμορφώσει ένα πλαίσιο για ερωτήσεις σχετικά
  με τα καθήκοντα του χρήστη, επιτρέποντας να τεθούν τα ερωτήματα «τι
  γίνεται αν» και «πώς γίνεται αυτό». Ο πιο κοινός τύπος σεναρίου είναι
  η περιγραφή περίπτωση χρήσης.
  Υπάρχει μία σύνδεση εδώ με τη παράγραφο Αφηρημένη μοντελοποίηση,
  διότι οι συμβολισμοί των σεναρίων, όπως τα διαγράμματα περιπτώσεων
  χρήσης είναι κοινοί στη μοντελοποίηση λογισμικού.
  * Πρωτότυπα: Αυτή η τεχνική είναι ένα πολύτιμο εργαλείο για την αποσαφήνιση
  διφορούμενων απαιτήσεων. Μπορούν να ενεργούν με παρόμοιο τρόπο με
  τα σενάρια, παρέχοντας στους χρήστες ένα πλαίσιο εντός του οποίου
  μπορούν να κατανοήσουν καλύτερα τις πληροφορίες που πρέπει να παρέχουν.
  Υπάρχει ένα ευρύ φάσμα τεχνικών υλοποίησης πρωτοτύπου (από αφαιρετικά
  σχέδια της οθόνης στο χαρτί έως προγράμματα σύγκρισης) και ένας σαφής
  διαχωρισμός των ξεχωριστών χρήσεών τους για την εκμαίευση και την
  επικύρωση των απαιτήσεων (βλ. παράγραφο [Υλοποίηση πρωτοτύπου](#prototyping)).
  Τα χαμηλής πιστότητας πρωτότυπα προτιμούνται συνήθως, ώστε να αποφύγουν
  τα ενδιαφερόμενα μέρη την «αγκίστρωση» σε ελάσσονος σημασίας, τα τυχαία
  χαρακτηριστικά ενός υψηλότερης ποιότητας πρωτοτύπου, που μπορεί να
  περιορίσει την ευελιξία σχεδιασμού με μη αναμενόμενους τρόπους.
  * Οργανωμένες συναντήσεις: Ο σκοπός αυτών των συναντήσεων είναι να
  προσπαθήσουμε να επιτύχουμε μια αθροιστική επίδραση, σύμφωνα με την
  οποία μια ομάδα ανθρώπων μπορεί να επιτύχει περισσότερη διορατικότητα
  στις απαιτήσεις του λογισμικού της από ό, τι δουλεύοντας ατομικά.
  Μπορούν να προβούν σε καταιγισμό ιδεών (brainstorm) και να βελτιώσουν
  τις ιδέες, που μπορεί να είναι δύσκολο να έρθουν στην επιφάνεια μέσω
  συνεντεύξεων. Ένα άλλο πλεονέκτημα είναι ότι συγκρουόμενες απαιτήσεις
  έρχονται στην επιφάνεια νωρίς κατά ένα τρόπο που να επιτρέπει στα
  ενδιαφερόμενα μέρη να τις αναγνωρίζουν όταν αυτές προκύπτουν. Όταν
  λειτουργεί καλά, η τεχνική αυτή μπορεί να οδηγήσει σε ένα πλουσιότερο
  και πιο συνεκτικό σύνολο απαιτήσεων από ό, τι θα μπορούσε διαφορετικά
  να είναι εφικτό.
  Ωστόσο, οι συνεδριάσεις πρέπει να αντιμετωπίζονται με προσοχή (εξ
  ου και η ανάγκη για ένα διαμεσολαβητή) για να αποτραπεί μια κατάσταση,
  κατά την οποία οι κρίσιμες ικανότητες της ομάδας διαβρώνονται από
  την αφοσίωσή της ή μέσα στην οποία αντικατοπτρίζονται ανησυχίες των
  λιγότερο ειλικρινών (και ίσως και ανώτερων ιεραρχικά) ανθρώπων που ευνοούνται
  εις βάρος των άλλων.
  * Παρατήρηση: Η σημασία του γενικού πλαισίου του λογισμικού εντός
  του οργανωτικού περιβάλλοντος οδήγησε στην υιοθέτηση τεχνικών παρατήρησης,
  όπως η εθνογραφία για την εκμαίευση απαιτήσεων. Οι μηχανικοί λογισμικού
  μαθαίνουν σχετικά με τις εργασίες των χρηστών με το «βάπτισμά» τους
  στο περιβάλλον και παρατηρώντας πώς οι χρήστες εκτελούν τα καθήκοντά
  τους αλληλεπιδρώντας μεταξύ τους και με τα εργαλεία λογισμικού και
  άλλους πόρους.
  Οι τεχνικές αυτές είναι σχετικά ακριβές, αλλά και διδακτικές, επειδή
  δείχνουν ότι πολλές εργασίες των χρηστών και των επιχειρηματικών διαδικασιών
  είναι πολύ λεπτές και πολύπλοκες για να τις περιγράψει εύκολα κανείς.
  * Ιστορίες των χρηστών: Αυτή η τεχνική χρησιμοποιείται συνήθως σε
  προσαρμοστικές μεθόδους (βλ. παράγραφο [Ευέλικτες μέθοδοι](#agileMth) στο γνωστικό
  πεδίο Μοντέλα και μέθοδοι τεχνολογίας λογισμικού) και αναφέρεται σε
  σύντομες περιγραφές υψηλού επιπέδου της απαιτούμενης λειτουργικότητας
  που εκφράζεται σε όρους πελάτη. Μια τυπική ιστορία του χρήστη έχει
  τη μορφή: «Ως <ρόλος>, θέλω <στόχος/επιθυμία> έτσι ώστε <πλεονέκτημα>».
  Η ιστορία ενός χρήστη  προορίζεται να περιέχει ακριβώς αρκετές πληροφορίες,
  έτσι ώστε οι προγραμματιστές να μπορούν να κάνουν μια λογική εκτίμηση
  της προσπάθειας για την υλοποίησή της. Ο στόχος είναι να αποφευχθούν
  ορισμένα από τα «απόβλητα», που συμβαίνει συχνά σε έργα όπου οι λεπτομερείς
  απαιτήσεις συγκεντρώνονται από νωρίς, αλλά καθίστανται ανούσιες πριν
  από την έναρξη των εργασιών.
  Πριν εφαρμοστεί μια ιστορία ενός χρήστη, η κατάλληλη διαδικασία αποδοχής
  πρέπει να είναι γραμμένη από τον πελάτη για να καθοριστεί εάν οι στόχοι
  της ιστορίας του χρήστη έχουν εκπληρωθεί.
  * Άλλες τεχνικές: Υπάρχει μια σειρά από άλλες τεχνικές για την υποστήριξη
  της εκμαίευσης πληροφοριών, που σχετίζονται με τις απαιτήσεις, και
  κυμαίνονται από την ανάλυση ανταγωνισμού, στην εφαρμογή τεχνικών εξόρυξης
  δεδομένων για τη χρήση των πηγών γνώσης, την εκμετάλλευση πληροφορίας
  από βάσεις διατήρησης λαθών και σχολίων χρηστών.

## Ανάλυση απαιτήσεων {#req-analysis}

Αυτό το θέμα ασχολείται με τη διαδικασία της ανάλυσης απαιτήσεων για:

  * τον εντοπισμό και την επίλυση των συγκρούσεων μεταξύ των απαιτήσεων,
  * να ανακαλύψει τα όρια του λογισμικού και πώς πρέπει να αλληλεπιδρούν
  με το οργανωτικό και λειτουργικό τους περιβάλλον
  * να αναπτύξουμε απαιτήσεις συστήματος σε απαιτήσεις λογισμικού.

Η παραδοσιακή οπτική της ανάλυσης απαιτήσεων ήταν να μειωθεί σε αφηρημένη
μοντελοποίηση χρησιμοποιώντας μία από τις μεθόδους ανάλυσης, όπως
η μέθοδος δομημένης ανάλυσης.
Ενώ η αφηρημένη μοντελοποίηση είναι σημαντική, συμπεριλαμβάνουμε την
κατηγοριοποίηση των απαιτήσεων για να βοηθήσει στην ενημέρωση αντισταθμισμάτων
μεταξύ των απαιτήσεων (απαιτήσεις ταξινόμησης) και της διαδικασίας
εδραίωσης των αντισταθμισμάτων (απαιτήσεις διαπραγμάτευσης).

Πρέπει να δοθεί προσοχή για την ακριβή περιγραφή των απαιτήσεων για
να μπορέσουν αυτές να επικυρωθούν, να ελέγχεται η εφαρμογή τους, και
να εκτιμάται το κόστος τους.

### Κατηγοριοποίηση απαιτήσεων {#classif-req}


Οι απαιτήσεις μπορούν να κατηγοριοποιηθούν βάσει διαφόρων κριτηρίων.
Ακολούθως περιλαμβάνουν κάποια παραδείγματα:

  * αν η απαίτηση είναι λειτουργική ή μη λειτουργική (βλ.
  παράγραφο [Λειτουργικές και μη λειτουργικές](#func-nonfun-req) απαιτήσεις).
  * αν η απαίτηση προέρχεται από μία ή περισσότερες απαιτήσεις υψηλού
  επιπέδου ή από κάποια αναδυόμενη ιδιότητα (βλ.
  παράγραφο [Αναδυόμενες ιδιότητες](#emergpr)), ή αν επιβάλλεται άμεσα στο
  λογισμικό από τα ενδιαφερόμενα μέρη ή κάποια άλλη πηγή.
  * αν η απαίτηση είναι στο προϊόν ή στη διεργασία ανάπτυξης (βλ. παράγραφο
  [Απαιτήσεις προϊόντων και διεργασιών ανάπτυξης](#proddevelreq)).
  Οι απαιτήσεις διεργασιών ανάπτυξης μπορούν να περιορίσουν την επιλογή
  του συμβαλλομένου, τη διαδικασία της τεχνολογίας λογισμικού που πρέπει
  να υιοθετηθεί, ή τα πρότυπα που πρέπει να τηρούνται.
  * Προτεραιότητα απαίτησης: Όσο υψηλότερη είναι η προτεραιότητα, τόσο
  πιο ουσιαστική είναι η απαίτηση για την επίτευξη των συνολικών στόχων
  του λογισμικού. Συχνά κατηγοριοποιούνται σε μια κλίμακα σταθερού σημείου,
  όπως υποχρεωτικές, ιδιαίτερα επιθυμητές, επιθυμητές ή προαιρετικές.
  Η προτεραιότητα πρέπει συχνά να ευθυγραμμίζεται σε σχέση με το κόστος
  της ανάπτυξης και υλοποίησης.
  * Εύρος της απαίτησης: Το εύρος αναφέρεται στο βαθμό στον οποίο μια
  απαίτηση επηρεάζει το λογισμικό και τα στοιχεία του. Ορισμένες από
  τις απαιτήσεις, κυρίως ορισμένες μη λειτουργικές, έχουν παγκόσμιο
  εύρος, η ικανοποίηση τους δεν μπορεί να διαμοιραστεί ισότιμα σε διακριτά
  στοιχεία.
  Ως εκ τούτου, μια απαίτηση παγκόσμιου εύρους μπορεί να επηρεάσει σε
  μεγάλο βαθμό την αρχιτεκτονική λογισμικού και το σχεδιασμό πολλών
  συστατικών, ενώ μία απαίτηση μικρού εύρους μπορεί να προσφέρει μια
  σειρά από επιλογές σχεδιασμού και έχει μικρό αντίκτυπο στην ικανοποίηση
  των υπολοίπων απαιτήσεων.
  * Μεταβλητότητα/σταθερότητα: Ορισμένες απαιτήσεις θα αλλάξουν κατά
  τη διάρκεια του κύκλου ζωής του λογισμικού και ακόμη κατά τη διάρκεια
  της ίδιας της διαδικασίας ανάπτυξης. Είναι χρήσιμο, αν μπορεί να γίνει
  κάποια εκτίμηση της πιθανότητας η απαίτηση να αλλάξει. Για παράδειγμα,
  σε μια εφαρμογή ηλεκτρονικών τραπεζικών συναλλαγών, οι απαιτήσεις
  για τις λειτουργίες του υπολογισμού και της πίστωσης τόκων σε λογαριασμούς
  πελατών είναι πιθανό να είναι πιο σταθερές από την απαίτηση να υποστηριχθεί
  ένα συγκεκριμένο είδος αφορολόγητου. Το πρώτο αντανακλά ένα θεμελιώδες
  χαρακτηριστικό του τραπεζικού τομέα (ότι οι λογαριασμοί μπορούν να
  κερδίσουν το ενδιαφέρον), ενώ το δεύτερο μπορεί να καταστεί απαρχαιωμένο
  από την αλλαγή στην κυβερνητική νομοθεσία.
  Ο προσδιορισμός των εν δυνάμει μεταβλητών απαιτήσεων μπορεί να βοηθήσει
  τον μηχανικό λογισμικού να διαμορφώσει ένα σχέδιο πιο ανεκτικό στην
  αλλαγή.

Άλλες κατηγοριοποιήσεις μπορεί να είναι κατάλληλες, ανάλογα με τη
συνήθη πρακτική του οργανισμού και την ίδια την εφαρμογή.

Υπάρχει σαφής διαχωρισμός ανάμεσα στην κατηγοριοποίηση των απαιτήσεων
και τα γνωρίσματα των απαιτήσεων (βλ. παράγραφο [Γνωρίσματα 
απαιτήσεων](#attribreq)).

### Αφηρημένη μοντελοποίηση {#concmodel}


Η ανάπτυξη των μοντέλων ενός προβλήματος του πραγματικού κόσμου είναι
το κλειδί για την ανάλυση των απαιτήσεων λογισμικού. Σκοπός τους είναι
να βοηθήσουν την κατανόηση της κατάστασης στην οποία εμφανίζεται το
πρόβλημα, καθώς απεικονίζει μια λύση. Ως εκ τούτου, αφηρημένα μοντέλα
περιλαμβάνουν μοντέλα οντοτήτων από το πεδίο του προβλήματος, διαμορφωμένα
ώστε να αντανακλούν τις πραγματικές τους σχέσεις και εξαρτήσεις.
Το θέμα αυτό συνδέεται στενά με το γνωστικό πεδίο Μοντέλα και Μέθοδοι
τεχνολογίας λογισμικού.

Μπορούν να αναπτυχθούν διάφορα είδη μοντέλων. Αυτά περιλαμβάνουν διαγράμματα
περιπτώσεων χρήσης (case diagrams), μοντέλα ροής δεδομένων (data flow
models), καταστατικά μοντέλα (state models), μοντέλα με βάση το στόχο
(goal-based models), την αλληλεπίδραση των χρηστών (user interaction),
μοντέλα αντικειμένου (object models), μοντέλα δεδομένων (data models),
και πολλά άλλα. Πολλά από αυτά τα γραφικά σύμβολα μοντελοποίησης είναι
μέρος της ενοποιημένης γλώσσας μοντελοποίησης (_Unified Modeling Language
- UML_).
Διαγράμματα περιπτώσεων χρήσης, για παράδειγμα, χρησιμοποιούνται συνήθως
για να απεικονίσουν σενάρια, όπου το όριο διαχωρίζει τους παράγοντες
(χρήστες ή συστήματα στο εξωτερικό περιβάλλον) από την εσωτερική συμπεριφορά,
όπου κάθε περίπτωση χρήσης απεικονίζει μία λειτουργικότητα του συστήματος.

Οι παράγοντες που επηρεάζουν την επιλογή των γραφικών συμβόλων μοντελοποίησης
περιλαμβάνουν τα παρακάτω:

  * Το είδος του προβλήματος: Μερικοί τύποι λογισμικού απαιτούν την
  αυστηρή ανάλυση ορισμένων πτυχών.
  Για παράδειγμα, τα καταστατικά και παραμετρικά μοντέλα, τα οποία αποτελούν
  μέρος της γλώσσας μοντελοποίησης συστημάτων (Systems Modeling Language-SysML),
  είναι πιθανό να είναι πιο σημαντικά για το λογισμικό του
  πραγματικού χρόνου από ότι για τα πληροφοριακά συστήματα, ενώ θα
  είναι συνήθως το αντίθετο για μοντέλα αντικείμενων και δραστηριοτήτων.
  * Η εξειδίκευση του μηχανικού λογισμικού: Συχνά είναι πιο παραγωγικό
  να υιοθετηθούν γραφικά σύμβολα μοντελοποίησης ή μια μέθοδος με την
  οποία ο μηχανικός λογισμικού έχει εμπειρία.
  * Οι απαιτήσεις διεργασιών ανάπτυξης  του πελάτη (βλ. παράγραφο 
  [Απαιτήσεις προϊόντων και διεργασιών ανάπτυξης](#proddevelreq)). Οι πελάτες μπορούν
  να επιβάλλουν τα δικά τους γραφικά σύμβολα ή τη μέθοδο ή να απαγορεύσουν
  οτιδήποτε άλλο με το οποίο δεν είναι εξοικειωμένοι.
  Αυτός ο παράγοντας μπορεί να έρχεται σε αντίθεση με τον προηγούμενη
  παράγοντα.

Σημειώστε ότι, σε όλες σχεδόν τις περιπτώσεις, είναι χρήσιμο να γίνει
η αρχή με την δόμηση ενός μοντέλου για το πλαίσιο του λογισμικού.
Το γενικό πλαίσιο του λογισμικού παρέχει μια σύνδεση μεταξύ του προορισμένου
λογισμικού και του εξωτερικού του περιβάλλοντος. Αυτό είναι ζωτικής
σημασίας για την κατανόηση του πλαισίου του λογισμικού στο λειτουργικό
του περιβάλλον και τον προσδιορισμό των διασυνδέσεων του με το περιβάλλον.
Αυτό το δευτερεύον θέμα δεν επιδιώκει να «διδάξει» ένα συγκεκριμένο
στυλ μοντελοποίησης ή συμβολισμού, αλλά παρέχει καθοδήγηση σχετικά
με το σκοπό και την πρόθεση της μοντελοποίησης.

### Αρχιτεκτονικός σχεδιασμός και κατανομή απαιτήσεων

Σε κάποιο σημείο, η αρχιτεκτονική λύση πρέπει να προκύψει. Ο αρχιτεκτονικός
σχεδιασμός είναι το σημείο στο οποίο οι απαιτήσεις διεργασιών ανάπτυξης
συμπίπτουν με τις απαιτήσεις σχεδιασμού του λογισμικού ή του συστημάτων
και δείχνει πόσο αδύνατο είναι να ανεξαρτητοποιηθούν καθαρά οι δύο
εργασίες. Το θέμα αυτό συνδέεται στενά με τη δομή και την αρχιτεκτονική
του λογισμικού  στην γνωστική περιοχή του Σχεδιασμού λογισμικού. Σε
πολλές περιπτώσεις, ο μηχανικός λογισμικού λειτουργεί ως αρχιτέκτονας
λογισμικού, επειδή η διαδικασία της ανάλυσης και της επεξεργασίας
των απαιτήσεων απαιτεί τα στοιχεία της αρχιτεκτονικής/σχεδιασμού
θα είναι υπεύθυνα για την ικανοποίηση των απαιτήσεων που προσδιορίζονται.
Αυτό είναι η κατανομή των απαιτήσεων, δηλαδή, η εκχώρηση στα αρχιτεκτονικά
συστατικά, που είναι υπεύθυνα για την ικανοποίηση των απαιτήσεων.

Η κατανομή είναι σημαντική για να επιτρέψει τη λεπτομερή ανάλυση των
απαιτήσεων. Έτσι, για παράδειγμα, όταν το σύνολο των απαιτήσεων έχει
κατανεμηθεί σε ένα συστατικό, οι ατομικές ανάγκες μπορούν να αναλυθούν
περαιτέρω για να ανακαλύψουν περαιτέρω απαιτήσεις σχετικά με το πώς
το στοιχείο θα πρέπει να αλληλεπιδρά με άλλα στοιχεία, ώστε να ικανοποιήσει
τις απαιτήσεις που κατανέμονται. Σε μεγάλα έργα, η κατανομή οδηγεί
σε ένα νέο γύρο ανάλυσης για κάθε υποσύστημα. Εν παραδείγματι, απαιτήσεις
για ένα συγκεκριμένο σύστημα φρεναρίσματος ενός αυτοκινήτου (απόσταση
φρεναρίσματος, ασφάλεια σε κακές συνθήκες οδήγησης, ομαλότητα της
εφαρμογής, η απαιτούμενη πίεση του πεταλιού, και ούτω καθεξής) μπορούν
να κατανεμηθούν στο υλικό φρεναρίσματος (μηχανικές και υδραυλικές
συναρμολογήσεις) και σε ένα σύστημα αντιμπλοκαρίσματος τροχών (ABS).
Μόνο όταν η απαίτηση για ένα σύστημα φρεναρίσματος απεμπλοκής των
τροχών και οι απαιτήσεις, που του αναλογούν, έχουν αναγνωριστεί,
μπορούν οι δυνατότητες του ABS, το υλικό φρεναρίσματος, καθώς και
οι αναδυόμενες ιδιότητες (όπως το βάρος του αυτοκινήτου) να χρησιμοποιούνται
για τον προσδιορισμό των λεπτομερών απαιτήσεων λογισμικού ABS.
Ο αρχιτεκτονικός σχεδιασμός ταυτίζεται στενά με την αφηρημένη μοντελοποίηση
(βλ. παράγραφο [Αφηρημένη μοντελοποίηση](#concmodel)).

### Διαπραγμάτευση απαιτήσεων {#negot-req}

Ένας άλλος όρος, που χρησιμοποιείται συνήθως για αυτό το υπόθεμα,
είναι η «επίλυση των συγκρούσεων.» Αυτό αφορά στην επίλυση των προβλημάτων
με τις απαιτήσεις όπου συμβαίνουν συγκρούσεις μεταξύ δύο ενδιαφερόμενων
μερών που απαιτούν ασυμβίβαστα χαρακτηριστικά, μεταξύ των απαιτήσεων
και των πόρων, ή μεταξύ λειτουργικών και μη-λειτουργικών απαιτήσεων,
για παράδειγμα. Στις περισσότερες περιπτώσεις, δεν είναι σοφό για
τον μηχανικό λογισμικού να παίρνει μια μονομερή απόφαση, έτσι ώστε
να καθίσταται αναγκαία η διαβούλευση με τα ενδιαφερόμενα μέρη για
να επιτευχθεί συναίνεση για ένα κατάλληλο αντιστάθμισμα. Συνήθως είναι
πολύ σημαντικό, για συμβατικούς λόγους, τέτοιου είδους αποφάσεις να
είναι ανιχνεύσιμες από τον πελάτη. Έχουμε κατατάξει αυτό ως ένα θέμα
ανάλυσης απαιτήσεων λογισμικού, επειδή τα προβλήματα προκύπτουν ως
αποτέλεσμα της ανάλυσης. Ωστόσο, μπορεί επίσης να γίνει μια σημαντική
περίπτωση για την θεώρηση ενός θέματος επικύρωσης απαιτήσεων (βλ.
ενότητα [Επικύρωση απαιτήσεων](#validreq)).

Η ιεράρχηση των απαιτήσεων είναι απαραίτητη, όχι μόνο ως μέσο για
το φιλτράρισμα σημαντικών απαιτήσεων, αλλά και για την επίλυση των
συγκρούσεων και το σχεδιασμό σταδιακών παραδόσεων, πράγμα που σημαίνει
την κατασκευή σύνθετων αποφάσεων που απαιτούν τη λεπτομερή γνώση του
πεδίου και δεξιότητες εκτίμησης. Ωστόσο, είναι συχνά δύσκολο να ληφθούν
πραγματικές πληροφορίες που μπορούν να λειτουργήσουν ως βάση για τις
εν λόγω αποφάσεις. Επιπλέον, οι απαιτήσεις συχνά εξαρτώνται η μια
με την άλλη και οι προτεραιότητες είναι σχετικές. Στην πράξη, οι μηχανικοί
λογισμικού εκτελούν την ιεράρχηση των απαιτήσεων συχνά χωρίς να γνωρίζουν
για όλες τις απαιτήσεις. Η ιεράρχηση των απαιτήσεων μπορεί να ακολουθήσει
μια προσέγγιση κόστους-αξίας, η οποία περιλαμβάνει μια ανάλυση από
τα ενδιαφερόμενα μέρη, όπου καθορίζονται σε μια κλίμακα τα οφέλη ή
το συνολικό κέρδος, που η εφαρμογή της απαίτησης τους φέρνει, σε σχέση
με τις κυρώσεις που υπάρχουν από την μη εφαρμογή μιας συγκεκριμένης
απαίτησης. Περιλαμβάνει επίσης μια ανάλυση από τους μηχανικούς λογισμικού
εκτιμώντας σε μια κλίμακα το κόστος της εφαρμογής κάθε απαίτησης,
σε σχέση με άλλες απαιτήσεις.
Μια άλλη προσέγγιση της ιεράρχησης των απαιτήσεων, που ονομάζεται
αναλυτική διεργασία ιεραρχίας, περιλαμβάνει τη σύγκριση όλων των μοναδικών
ζευγών των απαιτήσεων για να καθοριστεί ποια από τις δύο είναι μεγαλύτερη
προτεραιότητα, και σε ποιο βαθμό.

### Τυπική ανάλυση {#formal-analysis}

Η τυπική ανάλυση αφορά όχι μόνο την ενότητα Ανάλυση απαιτήσεων, αλλά επίσης τα θέματα 
Προσδιορισμός απαιτήσεων λογισμικού και Επικύρωση του μοντέλου.
Το θέμα αυτό σχετίζεται επίσης με την παράγραφο Τυπικές μέθοδοι
στο γνωστικό πεδίο Μοντέλα και μέθοδοι τεχνολογίας λογισμικού.

Η τυπική ανάλυση έχει αντίκτυπο σε ορισμένες περιοχές εφαρμογής, ιδίως
στα συστήματα υψηλής ακεραιότητας. Η επίσημη έκφραση των απαιτήσεων
απαιτεί μια γλώσσα με επίσημα καθορισμένους συμβολισμούς. Η χρήση
της τυπικής ανάλυσης για την έκφραση απαιτήσεων έχει δύο πλεονεκτήματα.
Πρώτον, επιτρέπει απαιτήσεις, που εκφράζονται στη γλώσσα αυτή, να
καθορίζονται με ακρίβεια και σαφήνεια, συνεπώς, (κατ' αρχήν) να αποφευχθεί
το ενδεχόμενο παρερμηνείας. Δεύτερον, οι απαιτήσεις μπορούν να αιτιολογηθούν,
επιτρέποντας να αποδειχθούν επιθυμητές ιδιότητες του καθορισμένου
λογισμικού. Η τυπική αιτιολόγηση απαιτεί την υποστήριξη ενός εργαλείου,
για να είναι πρακτική για οτιδήποτε άλλο εκτός από τετριμμένα συστήματα.
Εργαλεία που συνήθως χωρίζονται σε δύο τύπους: τεκμηριωτές θεωρίας
ή ελεγκτές μοντέλων.
Σε καμία περίπτωση δεν μπορεί η απόδειξη να είναι πλήρως αυτοματοποιημένη,
καθώς και το επίπεδο επάρκειας στην τυπική αιτιολόγηση, που απαιτείται
για να χρησιμοποιήσετε τα εργαλεία, περιορίζει την ευρύτερη εφαρμογή
της τυπικής ανάλυσης.

Η τυπικότερη ανάλυση επικεντρώνεται σε σχετικά προχωρημένα στάδια
της ανάλυσης απαιτήσεων. Είναι γενικά αντιπαραγωγικό να εφαρμόζεται
τυποποίηση, μέχρι οι επιχειρηματικοί στόχοι και οι απαιτήσεις των
χρηστών να έχουν προβληθεί με μέσα όπως αυτά που περιγράφονται αλλού
στην παράγραφο 4. Ωστόσο, από τη στιγμή που οι απαιτήσεις έχουν οριστεί
και έχουν διαμορφωθεί για τον καθορισμό συγκεκριμένων ιδιοτήτων του
λογισμικού, μπορεί να είναι χρήσιμο να τυποποιηθούν, τουλάχιστον,
οι κρίσιμες απαιτήσεις.
Αυτό επιτρέπει τη στατική επικύρωση πως το λογισμικό, που διαμορφώνεται
από τις απαιτήσεις, έχει πράγματι τις ιδιότητες που ο πελάτης, οι χρήστες, και ο μηχανικός λογισμικού
προσδοκούν να έχει (για παράδειγμα, την απουσία αδιεξόδου).

## Προσδιορισμός απαιτήσεων

Για τα περισσότερα επαγγέλματα μηχανικής, ο όρος «προσδιορισμός» αναφέρεται
στην ανάθεση των αριθμητικών τιμών ή των ορίων στους στόχους του σχεδιασμού
ενός προϊόντος. Στην τεχνολογία λογισμικού, ο «προσδιορισμός προδιαγραφών
λογισμικού» αναφέρεται συνήθως στην παραγωγή ενός εγγράφου, το οποίο
μπορεί να επανεξετάζεται, να αξιολογείται και να εγκρίνεται συστηματικά.
Για σύνθετα συστήματα, ιδίως εκείνα που αφορούν σημαντικά μη λογισμικά
συστατικά στοιχεία, παράγονται τρεις διαφορετικοί τύποι των εγγράφων:
ο ορισμός του συστήματος, απαιτήσεις του συστήματος και απαιτήσεις
του λογισμικού. Για τα απλά προϊόντα λογισμικού, μόνο το τρίτο από
αυτά απαιτείται. Όλα τα τρία έγγραφα περιγράφονται εδώ, με την προϋπόθεση
ότι μπορούν να συνδυαστούν αναλόγως.
Μια περιγραφή των συστημάτων μηχανικής μπορεί να βρεθεί στο κεφάλαιο
Σχετικές αρχές της τεχνολογία λογισμικού του παρόντος Οδηγού.

### Έγγραφο ορισμού συστήματος


Αυτό το έγγραφο (μερικές φορές γνωστό και ως έγγραφο με τις απαιτήσεις
των χρηστών ή πλαίσιο της έννοιας της λειτουργίας) καταγράφει τις
απαιτήσεις του συστήματος. Καθορίζει τις απαιτήσεις υψηλού επιπέδου
του συστήματος από τη σκοπιά του πεδίου. Το κοινό, που προβλέπεται
να το διαβάσει, περιλαμβάνει εκπροσώπους των χρηστών/πελατών του συστήματος
(το μάρκετινγκ μπορεί να παίξει αυτούς τους ρόλους για την αγορά του
λογισμικού), οπότε το περιεχόμενό του θα πρέπει να διατυπωθεί σε συμφωνία
με την οπτική του πεδίου. Το έγγραφο παραθέτει τις απαιτήσεις του
συστήματος σε συνδυασμό με τις βασικές πληροφορίες σχετικά με τους
γενικούς στόχους του συστήματος, το περιβάλλον-στόχο του, καθώς και
μια αναφορά των περιορισμών, των παραδοχών, και των μη λειτουργικών
απαιτήσεων.
Μπορεί να περιλαμβάνει αφηρημένα μοντέλα σχεδιασμένα για να καταδείξουν
το πλαίσιο του συστήματος, σενάρια χρήσης, καθώς και τις κύριες οντότητες
πεδίου, καθώς και τις ροές εργασίας.

### Προσδιορισμός απαιτήσεων συστήματος

Οι προγραμματιστές συστημάτων με λογισμικά και μη λογισμικά συστατικά
στοιχεία - ένα σύγχρονο αεροσκάφος, για παράδειγμα - συχνά διαχωρίζουν
την περιγραφή των απαιτήσεων του συστήματος από την περιγραφή των
απαιτήσεων λογισμικού. Κατά την άποψη αυτή, οι απαιτήσεις του συστήματος
προσδιορίζονται, οι απαιτήσεις του λογισμικού προέρχονται από τις
απαιτήσεις του συστήματος και, στη συνέχεια προσδιορίζονται οι απαιτήσεις
για τα στοιχεία του λογισμικού.
Για να κυριολεκτήσουμε, ο προσδιορισμός των απαιτήσεων του συστήματος
είναι μια δραστηριότητα μηχανικού συστήματος και εμπίπτει στο πεδίο
εφαρμογής του παρόντος Οδηγού.

### Προσδιορισμός απαιτήσεων λογισμικού {#req-specif}

Ο προσδιορισμός των απαιτήσεων λογισμικού δημιουργεί τη βάση για την
επίτευξη συμφωνίας μεταξύ των πελατών και των αναδόχων ή προμηθευτών
(σε έργα με γνώμονα την αγορά, αυτοί οι ρόλοι μπορούν να αναπαρασταθούν
από τα τμήματα μάρκετινγκ και ανάπτυξης) σε ό,τι το προϊόν λογισμικού
προσδοκάται ή όχι να κάνει.

Ο προσδιορισμός των απαιτήσεων λογισμικού επιτρέπει την αυστηρή αξιολόγηση
των αναγκών, πριν το σχέδιο να μπορεί να αρχίσει, και μειώνει τυχόν
μεταγενέστερο ανασχεδιασμό.
Θα πρέπει επίσης να παρέχει μια ρεαλιστική βάση για την εκτίμηση του
κόστους, των κινδύνων και των χρονοδιαγραμμάτων των προϊόντων.

Οι οργανισμοί μπορούν επίσης να χρησιμοποιήσουν ένα έγγραφο προσδιορισμού
των απαιτήσεων του λογισμικού ως βάση για την ανάπτυξη αποτελεσματικών
σχεδίων επαλήθευσης και επικύρωσης.

Ο προσδιορισμός των απαιτήσεων λογισμικού παρέχει μια ενημερωμένη
βάση για τη μεταφορά ενός προϊόντος λογισμικού σε νέους χρήστες ή
πλατφόρμες λογισμικού.
Τέλος, μπορεί να αποτελέσει τη βάση για την βελτίωση του λογισμικού.

Οι απαιτήσεις του λογισμικού είναι συχνά γραμμένες σε φυσική γλώσσα,
αλλά, όσον αφορά τον προσδιορισμό απαιτήσεων του λογισμικού, αυτό
μπορεί να συμπληρωθεί με επίσημες ή ημιεπίσημες περιγραφές. Η επιλογή
των κατάλληλων συμβολισμών επιτρέπει σε συγκεκριμένες απαιτήσεις και 
πτυχές της αρχιτεκτονικής λογισμικού να περιγραφούν ακριβέστερα και
πιο περιεκτικά από ότι με τη φυσική γλώσσα. Ο γενικός κανόνας είναι
ότι συμβολισμοί θα πρέπει να χρησιμοποιούνται επιτρέποντας στις απαιτήσεις
να περιγράφονται όσο το δυνατόν ακριβέστερα.
Το γεγονός αυτό είναι ιδιαιτέρως σημαντικό για αξιόπιστα λογισμικά
ασφαλείας, ρυθμιστικά και άλλων βασικών τύπων. Ωστόσο, η επιλογή
της σημειογραφίας περιορίζεται συχνά από την εκπαίδευση, τις δεξιότητες,
και τις προτιμήσεις των συγγραφέων και των αναγνωστών του εγγράφου.

Μια σειρά από δείκτες ποιότητας έχουν αναπτυχθεί, ώστε να μπορούν να
χρησιμοποιηθούν για να συσχετίσουν την ποιότητα του προσδιορισμού
απαιτήσεων του λογισμικού με άλλες μεταβλητές του έργου, όπως το κόστος,
η αποδοχή, η απόδοση, το χρονικό προγραμματισμό, και η επαναληψιμότητα.
 Οι δείκτες ποιότητας για τη μεμονωμένη έκφραση του καθορισμού απαιτήσεων
λογισμικού περιλαμβάνουν προστακτικό ύφος, οδηγίες, αδύναμες φράσεις,
επιλογές και αναβολές.
Δείκτες για ολόκληρο το έγγραφο των προδιαγραφών απαιτήσεων του λογισμικού 
περιλαμβάνουν το μέγεθος, την αναγνωσιμότητα, τις προδιαγραφές, το
βάθος και τη δομή του κειμένου.

## Επικύρωση απαιτήσεων {#validreq}

Τα έγγραφα απαιτήσεων μπορούν να υπόκεινται σε διαδικασίες επικύρωσης
και επαλήθευσης. Οι απαιτήσεις μπορεί να επικυρώνονται, για να εξασφαλίζουν
ότι ο μηχανικός λογισμικού τις έχει κατανοήσει. Είναι επίσης σημαντικό
να εξακριβώνεται ότι ένα έγγραφο απαιτήσεων συμμορφώνεται στα πρότυπα
της εταιρείας και ότι είναι κατανοητό, συνεπές και πλήρες.
Σε περιπτώσεις, όπου τεκμηριωμένα πρότυπα ή η ορολογία της εταιρείας
είναι ασυμβίβαστα με ευρέως αποδεκτά πρότυπα, θα πρέπει να συμφωνηθεί
μια χαρτογράφηση μεταξύ των δύο και να επισυνάπτεται στο έγγραφο.

Οι τυπικοί συμβολισμοί προσφέρουν το σημαντικό πλεονέκτημα να επιτρέπεται
στις τελευταίες δύο ιδιότητες να αποδειχθούν (έστω και περιορισμένα).
Διαφορετικά ενδιαφερόμενα μέρη, συμπεριλαμβανομένων των εκπροσώπων
του πελάτη και του υλοποιητή, θα πρέπει να επανεξετάσουν το έγγραφο
(ή τα έγγραφα). Τα έγγραφα απαιτήσεων υπόκεινται στις ίδιες πρακτικές
διαχείρισης διαμόρφωσης με τα άλλα παραδοτέα των διεργασιών του κύκλου
ζωής του λογισμικού. Όταν είναι εφικτό, οι επιμέρους απαιτήσεις επίσης
υπόκεινται σε διαχείριση της διαμόρφωσης, γενικώς χρησιμοποιώντας
ένα εργαλείο διαχείρισης απαιτήσεων (βλ. ενότητα [Εργαλεία απαιτήσεων λογισμικού](#toolsreq)).

Είναι φυσιολογικό να προγραμματιστούν ρητά ένα ή περισσότερα σημεία
της διαδικασίας απαιτήσεων, όπου οι απαιτήσεις έχουν επικυρωθεί. Ο
στόχος είναι να διευθετηθούν τυχόν προβλήματα, προτού διατεθούν πόροι
για την εφαρμογή των απαιτήσεων.
Η επικύρωση απαιτήσεων ασχολείται με τη διαδικασία εξέτασης του εγγράφου
απαιτήσεων, για να διασφαλιστεί ότι καθορίζεται το σωστό λογισμικό
(δηλαδή, το λογισμικό για το οποίο οι χρήστες προσδοκούν).

### Επιθεώρηση απαιτήσεων {#review-req}


Ίσως το πιο κοινό μέσο επικύρωσης γίνεται με την επιθεώρηση ή τα σχόλια
του εγγράφου (ή εγγράφων) απαιτήσεων. Σε μια ομάδα επιθεωρητών αποδίδεται
η έρευνα για λάθη, λανθασμένες παραδοχές, η έλλειψη σαφήνειας και
απόκλιση από την καθιερωμένη πρακτική.
Η σύνθεση της ομάδας, που διεξάγει την επιθεώρηση, είναι σημαντική
(για παράδειγμα, θα πρέπει να περιλαμβάνει, τουλάχιστον, έναν εκπρόσωπο
του πελάτη για ένα έργο, που βασίζεται στον πελάτη), και μπορεί να
βοηθήσει στην καθοδήγηση σχετικά με το τι πρέπει να διερευνηθεί για
τη μορφή των καταλόγων ελέγχου.

Οι επιθεωρήσεις μπορεί να συνθέτονται κατά την ολοκλήρωση του εγγράφου
διασαφήνισης του συστήματος, του εγγράφου καθορισμού του συστήματος,
του εγγράφου καθορισμού των απαιτήσεων λογισμικού, του καθορισμού
της αναφοράς για μια νέα έκδοση ή σε οποιοδήποτε άλλο στάδιο της διαδικασίας.

### Υλοποίηση πρωτοτύπου {#prototyping}

Η υλοποίηση πρωτοτύπου είναι συνήθως ένα μέσο για την επικύρωση της
ερμηνείας των απαιτήσεων του λογισμικού από το μηχανικό λογισμικού,
καθώς και για την εκμαίευση νέων απαιτήσεων. Όπως και στην εκμαίευση,
υπάρχει μια σειρά τεχνικών υλοποίησης πρωτοτύπων και μια σειρά από
σημεία της διαδικασίας, όπου η επικύρωση του πρωτοτύπου  μπορεί να
είναι χρήσιμη. Το πλεονέκτημα των πρωτοτύπων είναι ότι μπορούν να
κάνουν ευκολότερη την ερμηνεία των παραδοχών από το μηχανικό λογισμικού
και, όπου κρίνεται απαραίτητο, να «επιστρέψει» πληροφορίες ως προς
το γιατί αυτές μπορεί να είναι λάθος. Για παράδειγμα, η δυναμική συμπεριφορά
της διεπαφής του χρήστη μπορεί να γίνει καλύτερα κατανοητή μέσω ενός
κινούμενου πρωτότυπου παρά μέσω της περιγραφής κειμένου ή γραφικών
μοντέλων. Η μεταβλητότητα της απαίτησης, που διασαφηνίζεται μετά την
υλοποίηση πρωτοτύπου, έχει γίνει είναι εξαιρετικά χαμηλή, διότι δεν
υπάρχει συμφωνία μεταξύ των ενδιαφερόμενων μερών και του μηχανικού
λογισμικού - ως εκ τούτου, τα κρίσιμα για την ασφάλεια και τα καίρια
χαρακτηριστικά υλοποίησης πρωτοτύπου θα μπορούσαν πραγματικά να βοηθήσουν.
Όμως, υπάρχουν μειονεκτήματα. Αυτά περιλαμβάνουν τον κίνδυνο της απόσπασης
της προσοχής των χρηστών από τον πυρήνα της βαθύτερης λειτουργικότητας,
λόγω προβλημάτων αισθητικής ή  ποιότητας του πρωτοτύπου. Τα πρωτότυπα
μπορεί να είναι δαπανηρά για να αναπτυχθούν. Ωστόσο, εάν αποφευχθεί
η σπατάλη πόρων, που προκαλείται από την προσπάθεια να ικανοποιηθούν
λανθασμένες απαιτήσεις, το κόστος τους μπορεί να δικαιολογηθεί πιο
εύκολα. Τα αρχικά πρωτότυπα μπορούν να περιέχουν στοιχεία του τελικού
προϊόντος.
Τα πρωτότυπα μπορεί να είναι εξελικτικά και όχι μιας χρήσης.

### Επικύρωση του μοντέλου {#valid-model-req}

Είναι συνήθως απαραίτητο να επικυρώνεται η ποιότητα των μοντέλων,
που αναπτύχθηκαν κατά τη διάρκεια της ανάλυσης. Για παράδειγμα, στα
μοντέλα αντικειμένων είναι χρήσιμο να εκτελείται μια στατική ανάλυση,
για να εξακριβωθεί ότι υπάρχουν δίαυλοι επικοινωνίας μεταξύ των αντικειμένων
που ανταλλάσσουν δεδομένα, στο πεδίο των ενδιαφερομένων μερών. Εάν
χρησιμοποιούνται συμβολισμοί τυπικής ανάλυσης, είναι δυνατόν να χρησιμοποιηθεί
η επίσημη αιτιολόγηση για να αποδειχθούν οι ιδιότητες των προδιαγραφών.
Το θέμα αυτό συνδέεται στενά με το γνωστικό πεδίο Μοντέλα και μέθοδοι τεχνολογίας 
λογισμικού.

### Έλεγχοι αποδοχής {#accept-testing}


Μια βασική ιδιότητα μιας απαίτησης λογισμικού είναι ότι πρέπει να
είναι δυνατό να επαληθευτεί πως το τελικό προϊόν την ικανοποιεί. Απαιτήσεις,
οι οποίες δε μπορούν να επικυρωθούν, στην πραγματικότητα είναι απλά
«ευχές». Συνεπώς, μία σημαντική εργασία είναι να προβλέπεται πώς θα
ελέγχεται κάθε απαίτηση.
Στις περισσότερες περιπτώσεις, ο σχεδιασμός δοκιμών αποδοχής κάνει
αυτό για το οποίο οι τελικοί χρήστες χρησιμοποιούν το σύστημα
κατά κανόνα δεοντολογίας των επιχειρήσεων.

Ο καθορισμός και ο σχεδιασμός ελέγχων αποδοχής μπορεί να είναι δύσκολοι
για τις μη λειτουργικές απαιτήσεις (βλ. παράγραφο [Λειτουργικές
και μη λειτουργικές απαιτήσεις](#func-nonfun-req)).
Για να επικυρωθούν, πρέπει πρώτα να αναλυθούν και να αποσυντεθούν
σε σημείο να μπορούν να εκφράζονται ποσοτικά.

Πρόσθετες πληροφορίες μπορείτε να βρείτε στο θέμα Έλεγχος αποδοχής/πιστοποίησης
στο γνωστικό πεδίο Έλεγχος λογισμικού.

## Πρακτικές θεωρήσεις

Το πρώτο επίπεδο του θέματος αποσύνθεσης, που παρουσιάζεται σε αυτό
το γνωστικό πεδίο, μπορεί να φαίνεται να περιγράφει μια γραμμική αλληλουχία
των δραστηριοτήτων.
Αυτή είναι μια απλοποιημένη όψη της διαδικασίας.

Η διεργασία προδιαγραφής των  απαιτήσεων καλύπτει ολόκληρο τον κύκλο
ζωής του λογισμικού.
Η αλλαγή διαχείρισης και της συντήρησης των απαιτήσεων σε μια κατάσταση,
που αντικατοπτρίζει με ακρίβεια το λογισμικό που πρόκειται να υλοποιηθεί
ή που έχει υλοποιηθεί, είναι το κλειδί για την επιτυχία της διαδικασίας
ανάπτυξης λογισμικού.

Δεν έχει κάθε οργανισμός μια κουλτούρα καταγραφής και διαχείρισης
των απαιτήσεων. Είναι σύνηθες σε δυναμικές νεοσύστατες εταιρείες,
ωθούμενες από ένα ισχυρό «όραμα του προϊόντος» και με περιορισμένους
πόρους, για να αντιμετωπίζουν την τεκμηρίωση των απαιτήσεων ως περιττή
επιβάρυνση. Τις περισσότερες φορές, όμως, καθώς οι εταιρείες επεκτείνονται,
η πελατειακή τους βάση αυξάνεται και το προϊόν τους αρχίζει να εξελίσσεται,
ανακαλύπτουν ότι θα χρειαστεί να ανακτήσουν τις απαιτήσεις που εκμαίευσαν
τα χαρακτηριστικά του προϊόντος, προκειμένου να εκτιμηθεί το αντίκτυπο
των προτεινόμενων αλλαγών.
Ως εκ τούτου, η τεκμηρίωση των απαιτήσεων και η διαχείρισης της αλλαγής
είναι το κλειδί της επιτυχίας οποιασδήποτε διεργασίας προδιαγραφής
των  απαιτήσεων.

### Επαναληπτικός χαρακτήρας της διεργασίας  απαιτήσεων

Υπάρχει μια γενική πίεση στη βιομηχανία λογισμικού για συνεχώς μικρότερους
κύκλους ανάπτυξης, και αυτό είναι ιδιαίτερα έντονο σε εξαιρετικά ανταγωνιστικά
τμήματα της αγοράς. Επιπλέον, τα περισσότερα έργα περιορίζονται κατά
κάποιο τρόπο από το περιβάλλον τους, και πολλά από αυτά είναι αναβαθμίσεις
ή αναθεωρήσεις υπάρχοντος λογισμικού, των οποίων η αρχιτεκτονική είναι
γνωστή. Ως εκ τούτου, στην πράξη είναι σχεδόν πάντα ανέφικτο να εφαρμοστεί
η διεργασία προδιαγραφής απαιτήσεων ως μια γραμμική, ντετερμινιστική
διαδικασία, στην οποία οι απαιτήσεις του λογισμικού εκμαιεύονται από
τα ενδιαφερόμενα μέρη, αρχικοποιούνται, κατανέμονται και παραδίδονται
στην ομάδα ανάπτυξης του λογισμικού.
Είναι σίγουρα ένας μύθος ότι οι απαιτήσεις για τα μεγάλα έργα λογισμικού
είναι πάντα απόλυτα κατανοητές ή καθορισμένες ολόσωστα.

Αντ' αυτού, οι απαιτήσεις συνήθως επαναλαμβάνονται ως προς ένα επίπεδο
ποιότητας και λεπτομέρειας, που είναι επαρκές προκειμένου να επιτραπεί
ο σχεδιασμός και η λήψη των αποφάσεων που πρέπει να παρθούν. Σε ορισμένα
έργα, αυτό μπορεί να οδηγήσει σε απαιτήσεις που αρχικοποιούνται πριν
να γίνουν πλήρως κατανοητές όλες οι ιδιότητές τους. Αυτό εγκυμονεί
κινδύνους για ακριβές επαναλήψεις, αν προκύψουν προβλήματα αργά στη
διαδικασία της υλοποίησης λογισμικού. Ωστόσο, οι μηχανικοί λογισμικού
περιορίζονται αναγκαστικά από τα σχέδια διαχείρισης του έργου. Επομένως,
πρέπει να λάβουν μέτρα για να διασφαλιστεί, ότι η «ποιότητα» των απαιτήσεων
είναι όσο το δυνατόν υψηλότερη σε σχέση τους διαθέσιμους πόρους.
Για παράδειγμα, θα πρέπει να κάνουν ρητές τυχόν παραδοχές, στις οποίες
στηρίζονται οι απαιτήσεις, καθώς και τυχόν γνωστά προβλήματα.

Για τα προϊόντα λογισμικού, που έχουν αναπτυχθεί επαναληπτικά, μπορεί
μια ομάδα του έργου να αρχικοποιήσει μόνο τις απαιτήσεις που είναι
αναγκαίες για την τρέχουσα επανάληψη. Ο ειδικός απαιτήσεων μπορεί
να συνεχίσει να δημιουργεί απαιτήσεις για τις μελλοντικές επαναλήψεις,
ενώ οι προγραμματιστές προχωρούν με το σχεδιασμό και την κατασκευή
της τρέχουσας επανάληψης.
Αυτή η προσέγγιση παρέχει στους πελάτες την επιχειρηματική αξία γρήγορα,
ελαχιστοποιώντας παράλληλα το κόστος επανάληψης.

Σε όλες σχεδόν τις περιπτώσεις, η κατανόηση των απαιτήσεων συνεχίζει
να εξελίσσεται καθώς ο σχεδιασμός και η ανάπτυξη προχωρούν. Αυτό συχνά
οδηγεί στην αναθεώρηση των απαιτήσεων αργά στον κύκλο ζωής. Ίσως το
πιο καίριο σημείο για την κατανόηση των απαιτήσεων του λογισμικού
είναι ότι ένα σημαντικό ποσοστό των απαιτήσεων θα αλλάξει. Αυτό μερικές
φορές οφείλεται σε λάθη της ανάλυσης, αλλά είναι συχνά μια αναπόφευκτη
συνέπεια της αλλαγής στο «περιβάλλον», για παράδειγμα, το λειτουργικό
ή επιχειρηματικό περιβάλλον του πελάτη, τις ρυθμιστικές διαδικασίες,
που επιβάλλονται από τις αρχές, ή την αγορά στην οποία το λογισμικό
πρέπει να πουληθεί. Όποια και αν είναι η αιτία, είναι σημαντικό να
αναγνωρίσουμε το αναπόφευκτο των αλλαγών και να λάβουμε μέτρα για
την άμβλυνση των συνεπειών τους. Η αλλαγή πρέπει να είναι διαχωρίσιμη
έτσι, ώστε να διασφαλίζει, ότι οι προτεινόμενες αλλαγές θα περάσουν
από μια ορισμένη επιθεώρηση και μια διαδικασία έγκρισης, και να πραγματοποιείται
προσεκτικός εντοπισμός των απαιτήσεων, ανάλυση των επιπτώσεων, καθώς
και διαχείριση των σχηματισμών του λογισμικού (βλ. στο γνωστικό πεδίο
[Διαχείριση σχηματισμών λογισμικού](#softconfigmng)). Ως εκ τούτου, η διεργασία προδιαγραφή
των  απαιτήσεων δεν είναι απλώς ένα μετωπικό εφάπαξ έργο στην ανάπτυξη
λογισμικού, αλλά εκτείνεται σε ολόκληρο τον κύκλο ζωής του λογισμικού.
Σε ένα τυπικό έργο, οι δραστηριότητες, που σχετίζονται με τις απαιτήσεις
του λογισμικού, εξελίσσονται με την πάροδο του χρόνου μέσω της διαχείρισης
των αλλαγών. Ένας συνδυασμός των άνω προς τα κάτω μεθόδων ανάλυσης
και σχεδιασμού και των από κάτω προς τα πάνω μεθόδων υλοποίησης που
συναντιούνται στη μέση, θα μπορούσε να προσφέρει το καλύτερο και στους
δύο κόσμους.
Ωστόσο, αυτό είναι δύσκολο να επιτευχθεί στην πράξη, δεδομένου ότι
εξαρτάται σε μεγάλο βαθμό από την ωριμότητα και την εμπειρία των μηχανικών
λογισμικού.

### Διαχείριση αλλαγής

Η διαχείριση της αλλαγής είναι βασική για την διαχείριση των απαιτήσεων.
Αυτό το θέμα περιγράφει το ρόλο της διαχείρισης της αλλαγής, τις διαδικασίες
που πρέπει να πραγματοποιηθούν και την ανάλυση, που πρέπει να εφαρμόζεται
για τις προτεινόμενες αλλαγές.
Έχει ισχυρούς δεσμούς με το γνωστικό πεδίο Διαχείριση σχηματισμών 
λογισμικού.

### Γνωρίσματα απαιτήσεων {#attribreq}

Οι απαιτήσεις θα πρέπει να αποτελούνται όχι μόνο από μια προδιαγραφή
του τι απαιτείται, αλλά και της συμπληρωματικής πληροφορίας, η οποία
βοηθά στην διαχείριση και την ερμηνεία τους. Τα γνωρίσματα των απαιτήσεων
πρέπει να καθορίζονται, να καταγράφονται και να ενημερώνονται καθώς
το λογισμικό υπό ανάπτυξη ή υπό συντήρηση εξελίσσεται. Αυτό θα πρέπει
να περιλαμβάνει τις διάφορες κατηγοριοποιήσεις των διαστάσεων των
απαιτήσεων (βλ. παράγραφο [Κατηγοριοποίηση απαιτήσεων](#classif-req)) και τη
μέθοδο επαλήθευσης ή το σχετικό πλάνο ελέγχου αποδοχής.  Μπορεί επίσης
να περιλαμβάνει πρόσθετες πληροφορίες, όπως μία σύνοψη αιτιολόγησης
για κάθε απαίτηση, την πηγή της κάθε απαίτησης, και ένα ιστορικό αλλαγής.
Το πιο σημαντικό  γνώρισμα των απαιτήσεων, ωστόσο, είναι ένα προσδιοριστικό,
το οποίο επιτρέπει οι απαιτήσεις να είναι μοναδικές και να προσδιορίζονται
σαφώς.

### Ιχνηλασιμότητα απαιτήσεων {#tr-req}

Η ιχνηλασιμότητα των απαιτήσεων ασχολείται με την ανάκτηση της πηγής
τους και την πρόβλεψη των επιδράσεών τους. Η ιχνηλασιμότητα είναι
θεμελιώδους σημασίας για την πραγματοποίηση της ανάλυσης των επιπτώσεων,
όταν αλλάζουν οι απαιτήσεις. Μια απαίτηση θα πρέπει να είναι ανιχνεύσιμη
προς τα πίσω στις απαιτήσεις και στα ενδιαφερόμενα μέρη, τα οποία
την διαμόρφωσαν (για παράδειγμα, από την απαίτηση του λογισμικού πίσω
στην απαίτηση του συστήματος, που βοηθά στην ικανοποίηση).
Αντίθετα, μια απαίτηση θα πρέπει να είναι ανιχνεύσιμη προς τα εμπρός
στις απαιτήσεις και τις οντότητες σχεδιασμού, τα οποία την ικανοποιούν
(για παράδειγμα, από την απαίτηση του συστήματος στις απαιτήσεις του
λογισμικού, οι οποίες έχουν προκύψει από την πρώτη, και, εν συνεχεία,
στις ενότητες κώδικα, που την εφαρμόζουν, ή στις περιπτώσεις δοκιμών,
που σχετίζονται με τον εν λόγω κώδικα, και ακόμη και σε ένα τμήματος
του εγχειριδίου χρήσης, που περιγράφει την πραγματική λειτουργικότητα)
και την περίπτωση δοκιμής, που την επαληθεύει.

Η ιχνηλασιμότητα των απαιτήσεων για ένα τυπικό έργο θα σχηματίσει
μια πολύπλοκη, κατευθυνόμενη, άκυκλη γραφική παράσταση. Η διατήρηση
ενός ενημερωμένου γραφήματος ή μιας μήτρας ιχνηλασιμότητας είναι μια
δραστηριότητα, που πρέπει να εξετάζεται κατά τη διάρκεια ολόκληρου
του κύκλου ζωής ενός προϊόντος.
Εάν οι πληροφορίες ιχνηλασιμότητας δεν ενημερώνονται, καθώς οι αλλαγές
στις απαιτήσεις εξακολουθούν να συμβαίνουν, οι πληροφορίες ιχνηλασιμότητας
γίνονται αναξιόπιστες για την ανάλυση των επιπτώσεων.

### Μέτρηση απαιτήσεων

Ως ένα πρακτικό θέμα, είναι συνήθως χρήσιμο να υπάρχει κάποια ιδέα
του «όγκου» των απαιτήσεων για ένα συγκεκριμένο προϊόν λογισμικού.
Ο αριθμός αυτός είναι χρήσιμος στην αξιολόγηση του «μεγέθους» μιας
αλλαγής στις απαιτήσεις, στην εκτίμηση του κόστους μιας εργασίας ανάπτυξης
ή συντήρησης ή απλώς για να χρησιμεύσει ως παρονομαστής σε άλλες μετρήσεις.
Η λειτουργική μέτρηση του μεγέθους (Functional size measurement  -
FSM) είναι μια τεχνική για την αξιολόγηση του μεγέθους του σώματος
των λειτουργικών απαιτήσεων.

Πρόσθετες πληροφορίες σχετικά με τη μέτρηση και τα πρότυπα μεγέθους
θα βρεθούν στο γνωστικό πεδίο Διοίκησης τεχνολογίας λογισμικού.

## Εργαλεία απαιτήσεων λογισμικού {#toolsreq}

Τα εργαλεία για την αντιμετώπιση των απαιτήσεων λογισμικού εμπίπτουν
γενικά σε δύο κατηγορίες: εργαλεία για την μοντελοποίηση και εργαλεία
για τη διαχείριση των απαιτήσεων.

Τα εργαλεία διαχείρισης απαιτήσεων υποστηρίζουν συνήθως ένα ευρύ φάσμα
δραστηριοτήτων - συμπεριλαμβανομένης της τεκμηρίωσης, της ιχνηλασιμότητας
και της διαχείρισης της αλλαγής - και έχουν σημαντικό αντίκτυπο στην
πράξη. Πράγματι, η ιχνηλασιμότητα και η διαχείριση της αλλαγής είναι
πραγματικά εφικτή, μόνο αν υποστηρίζεται από ένα εργαλείο.
Δεδομένου ότι η διαχείριση των απαιτήσεων είναι θεμελιώδους σημασίας
για την καλή πρακτική απαιτήσεων, πολλοί οργανισμοί έχουν επενδύσει
σε εργαλεία διαχείρισης απαιτήσεων, αν και πολλοί περισσότεροι διαχειρίζονται
τις απαιτήσεις τους με περισσότερες «επί τούτου» και γενικά λιγότερο
ικανοποιητικές λύσεις, για παράδειγμα  χρησιμοποιώντας υπολογιστικά
φύλλα.
