{mainmatter}

# Λειτουργίες Μηχανικής Λογισμικού {#softengops}

## Ακρωνύμια

|API    |Application Programming Interface  |
|ATDD   |Acceptance Test Driven Development |
|CD     |Continuous Delivery                |
|CI     |Continuous Integration             |
|CPU    |Central Processing Unit            |
|CONOPS |Concepts of Operations             |
|DBMS   |Database Management System         |
|IaC    |Infrastructure as Code             |
|IaaS   |Infrastructure as a Service        |
|IT     |Information technology             |
|ITIL   |IT Infrastructure Library          |
|KA     |Knowledge Area                     |
|KPI    |Key Performance Indicator          |
|MR     |Modification request               |
|MVP    |Minimum Viable Product             |
|PaaS   |Platform as a Service              |
|PR     |Problem Report                     |
|QA     |Quality Assurance                  |
|SaaS   |Software as a Service              |
|SLAs   |Service-Level Agreements           |
|TDD    |Test Driven Development            |

## Εισαγωγή

*Οι λειτουργίες μηχανικής λογισμικού* αναφέρονται στο σύνολο των δραστηριοτήτων και 
εργασιών που είναι απαραίτητες για την ανάπτυξη, λειτουργία και υποστήριξη μίας 
εφαρμογής ή ενός συστήματος λογισμικού, διατηρώντας παράλληλα την ακεραιότητα και 
τη σταθερότητά του. Αυτές οι δραστηριότητες περιλαμβάνουν την ανάπτυξη και τη 
διαμόρφωση του λογισμικού στα στοχευμένα επιχειρησιακά περιβάλλοντα και την 
παρακολούθηση και διαχείριση της εφαρμογής όσο αυτή χρησιμοποιείται (μέχρι την 
απόσυρσή της). Μόλις η εφαρμογή είναι λειτουργική, οι λειτουργίες μηχανικής λογισμικού 
πρέπει να διαχειρίζονται τυχόν ελαττώματα που ανακαλύπτονται, τυχόν αλλαγές που 
γίνονται στο περιβάλλον λογισμικού του συστήματος και στον εξοπλισμό υλικού με την 
πάροδο του χρόνου, και τις απαιτήσεις κάθε νέου χρήστη που έρχονται στην επιφάνεια.

Οι λειτουργίες μηχανικής λογισμικού είναι ένα αναπόσπαστο μέρος του συστήματος και των
διαδικασιών του κύκλου ζωής λογισμικού [3]. Το γνωστικό πεδίο των λειτουργιών μηχανικής 
λογισμικού σχετίζεται με όλες τις άλλες πτυχές της μηχανικής λογισμικού. Επομένως, η 
περιγραφή αυτού συνδέεται με όλους τους άλλους τομείς γνώσης της μηχανικής λογισμικού 
του *εγχειριδίου SWEBOK*, ιδίως με τον τομέα της κατασκευής λογισμικού, ο οποίος αναφέρεται 
στην προετοιμασία του λογισμικού για εγκατάσταση (deployment), συμπεριλαμβανομένης της 
ενσωμάτωσης, της κατασκευής, της συσκευασίας (packaging) και της δοκιμής.

Οι μηχανικοί λειτουργιών εξειδικευμένου λογισμικού και τεχνολογιών πληροφορικής παραδοσιακά 
παρέχουν και διαχειρίζονται υπηρεσίες λειτουργιών τεχνολογίας πληροφορικής. Βέλτιστες 
πρακτικές για λειτουργίες μηχανικής λογισμικού αρχικά δημοσιεύθηκαν από το IT Infrastructure 
Library (ITIL) και έγιναν γρήγορα αποδεκτές από τον κλάδο. Οι πρακτικές αυτές συνοψίζονται 
και δημοσιεύονται στο πρότυπο 20000 του Ινστιτούτου Ηλεκτρολόγων και Ηλεκτρονικών Μηχανικών (IEEE) [1].

Ιστορικά, οι λειτουργίες και τα υπολογιστικά κέντρα βρίσκονταν συχνά σε ανεξάρτητα 
οργανωτικά τμήματα (silos) ξεχωριστά από τις δραστηριότητες ανάπτυξης λογισμικού. 
Οι προοδευτικοί οργανισμοί πλέον τοποθετούν μαζί την ανάπτυξη, την συντήρηση, και 
κάποιες δραστηριότητες λειτουργιών μηχανικής λογισμικού (συχνά παρέχονται ως υπηρεσία). 
Ορισμένα οφέλη από αυτή την προσέγγιση είναι η εξάλειψη των ανεξάρτητων οργανωτικών 
τμημάτων (silos) που διαχώριζαν αυτές τις δραστηριότητες λογισμικού, καθώς και η κοινή 
χρήση των κοινών διαδικασιών και εργαλείων. Η αυξανόμενη δημοτικότητα και αποδοχή των 
πρακτικών DevOps [2*] και των συναφών πρότυπων [4], συμπεριλαμβανομένου ενός διαρκώς 
εξελισσόμενου συνόλου εργαλείων, αντικατοπτρίζουν αυτή την τάση. Οι πρακτικές DevOps 
αποσκοπούν στην αυτοματοποίηση και τη συνεχή εξέλιξη των δραστηριοτήτων μηχανικής λογισμικού
για να διασφαλιστεί τόσο υψηλής ποιότητας λογισμικό, όσο και η ικανοποίηση των χρηστών οι 
οποίοι απαιτούν ταχύτερη ανταπόκριση και μικρότερους χρόνους παράδοσης από τους 
μηχανικούς λογισμικού.

Ο ρόλος του μηχανικού λογισμικού στις λειτουργίες μηχανικής λογισμικού έχει εξελιχθεί 
σημαντικά την τελευταία δεκαετία με την εμφάνιση του DevOps, των υποδομών ως κώδικα (IaC), 
των ευέλικτων υποδομών, τη διαθεσιμότητα των υποδομών ως υπηρεσία (IaaS) και των πλατφορμών 
ως υπηρεσία (PaaS). Καθήκοντα που εκτελούνται παραδοσιακά από μηχανικούς υποδομών πληροφορικής 
αυτοματοποιούνται όλο και περισσότερο και παρέχουν τη διαθεσιμότητα ως υπηρεσία, επιτρέποντας 
στους προγραμματιστές εφαρμογών να εκτελούν λειτουργίες μηχανικής λογισμικού ανεξάρτητα, ως 
μέρος των καθημερινών δραστηριοτήτων τους. Για παράδειγμα, οι προγραμματιστές εφαρμογών σε 
πολλούς οργανισμούς μπορούν πλέον να χρησιμοποιούν άμεσα τις υποδομές και πλατφόρμες ως 
υπηρεσία (IaaS & PaaS)  για την ανάπτυξη εφαρμογών σε περιβάλλοντα παραγωγής και να 
παρακολουθούν διάφορες πτυχές αυτών των εφαρμογών χωρίς να εμπλέκονται άμεσα οι μηχανικοί 
λειτουργιών (operation engineers).

Παρότι πολλοί οργανισμοί εξακολουθούν να χρησιμοποιούν συμβατικές αρχές διαχείρισης των 
διαδικασιών πληροφορικής, το παρόν γνωστικό πεδίο επικεντρώνεται κυρίως στον ρόλο των μηχανικών 
λογισμικού σε λειτουργίες στα αναδυόμενα πλαίσια των DevOps, IaC και ευέλικτων πρακτικών 
υποδομής. Για το σκοπό αυτό, εντοπίζουμε δύο κύριους ρόλους μηχανικών λογισμικού που 
σχετίζονται με τις λειτουργίες: Μηχανικός λειτουργιών, ο οποίος είναι υπεύθυνος για την 
ανάπτυξη υπηρεσιών λειτουργίας που γίνονται διαθέσιμες ως υπηρεσία και προσβάσιμες μέσω μιας 
διεπαφής (API), και μηχανικός λογισμικού, ο οποίος μπορεί να χρησιμοποιήσει τις προκύπτουσες 
υπηρεσίες λειτουργίας (διαθέσιμες ως υπηρεσία) για την ανεξάρτητη ανάπτυξη και διαχείριση 
εφαρμογών χωρίς να εμπλέκονται άμεσα οι ειδικοί λειτουργιών πληροφορικής.

## Κατανομή των θεμάτων για τις λειτουργίες μηχανικής λογισμικού

{id="fig-softengops-tree"}

![Σχήμα 1.1 Κατανομή των θεμάτων στο γνωστικό πεδίο των λειτουργιών μηχανικής λογισμικού.](images/1-softengops.png)

Η κατανομή των θεμάτων για το γνωστικό πεδίο των λειτουργιών μηχανικής λογισμικού 
απεικονίζεται στο Σχήμα 1 [Σχήμα 1.1](#fig-softengops-tree).

## Βασικές αρχές λειτουργιών μηχανικής λογισμικού

### *Ορισμός Λειτουργιών Μηχανικής Λογισμικού*

Στο παρόν εγχειρίδιο, ο όρος λειτουργίες μηχανικής λογισμικού αναφέρεται στις γνώσεις, δεξιότητες, 
διαδικασίες και εργαλεία που χρησιμοποιούνται από τους μηχανικούς λογισμικού ή τον οργανισμό τους 
για να διασφαλίσουν ότι ένα προϊόν λογισμικού, συμπεριλαμβανομένων των υποδομών πληροφορικής, 
λογισμικού συστήματος και λογισμικού εφαρμογών, λειτουργεί σωστά κατά τη διάρκεια ανάπτυξης και 
συντήρησης, καθώς και σε πραγματικές συνθήκες λειτουργίας.

Στο πρότυπο IEEE 12207 [3], ένας χειριστής (operator) ορίζεται ως "άτομο ή οργανισμός που εκτελεί τις 
λειτουργίες ενός συστήματος". Το *εγχειρίδιο SWEBOK* τροποποιεί τον ορισμό αυτό για τον όρο μηχανικός 
λειτουργιών, ο οποίος αναφέρεται σε έναν μηχανικό λογισμικού που εκτελεί διαδικασίες λειτουργιών 
της μηχανικής λογισμικού. Σε αυτόν τον ρόλο, ένας μηχανικός λειτουργιών συνεργάζεται στενά με τους 
μηχανικούς λογισμικού για να αναπτύξει και να προσφέρει υπηρεσίες λειτουργιών, όπως οι ακόλουθες:
    * Παροχή, ανάπτυξη, διαμόρφωση και υποστήριξη δοχείων (containers) και εικονικών εξυπηρετητών
    * Σχεδιασμός και προσφορά κατά παραγγελία (on-demand) υπηρεσιών [(π.χ. περιβάλλον κατά παραγγελία, 
    έκδοση (versioning), συνεχής ολοκλήρωση (CI) και δοκιμές, ανάπτυξη και επιτήρηση)] για χρήση από 
    μηχανικούς λογισμικού,
    * Παρακολούθηση και επίλυση συμβάντων λογισμικού συστήματος και εφαρμογών με την εκτέλεση 
    διαγνωστικών ελέγχων, την τεκμηρίωση των προβλημάτων και επιλύσεων (resolutions), την ιεράρχηση των 
    προβλημάτων και αξιολόγηση του αντίκτυπου αυτών,
    * Εκτέλεση, αυτοματοποίηση και εφαρμογή κατάλληλων διαδικασιών για την ασφάλεια, την προστασία των 
    δεδομένων και τις διαδικασίες αποτυχίας,
    * Επίβλεψη της χωρητικότητας, του αποθηκευτικού σχεδιασμού και των συστημάτων διαχείρισης βάσεων 
    δεδομένων (DBMS),
    * Παροχή τεκμηρίωσης και τεχνικών προδιαγραφών στο προσωπικό πληροφορικής για το σχεδιασμό και την 
    υλοποίηση νέων ή αναβαθμισμένων υποδομών πληροφορικής και λογισμικού συστήματος.

Το πρότυπο IEEE 20000 [1] περιγράφει την ανάγκη για ανάπτυξη και ενίσχυση των επαγγελματικών ικανοτήτων των 
μηχανικών λειτουργιών. Για την επίτευξη αυτού του στόχου, οι οργανισμοί λογισμικού θα πρέπει να 
αντιμετωπίσουν τα ακόλουθα:
    * Πρόσληψη προσωπικού: Επικύρωση των εργασιακών προσόντων/ικανοτήτων των υποψηφίων, 
    συμπεριλαμβανομένων των επαγγελματικών τους πιστοποιήσεων. Τον προσδιορισμό των δυνατών τους σημείων, 
    των αδυναμιών, των δυνατοτήτων τους σε σχέση με την περιγραφή εργασίας του μηχανικού λειτουργιών, τη 
    γνώση σε βασικές τεχνολογίες και γλώσσες προγραμματισμού, και συνολικά το επίπεδο εμπειρίας,
    * Προγραμματισμός πόρων: Για τη στελέχωση νέων ή διευρυμένων υπηρεσιών μηχανικής λειτουργιών, 
    προγραμματίστε τόσο τη χρήση νέων τεχνολογιών, όσο και την ανάθεση προσωπικού διαχείρισης υπηρεσιών 
    σε ομάδες ανάπτυξης έργων, αναπτύξτε προγραμματισμό διαδοχής και άλλα κενά στελέχωσης που δημιουργούνται 
    από την αποχώρηση προσωπικού (turnover),
    * Κατάρτιση και ανάπτυξη πόρων: Προσδιορίστε τις απαιτήσεις κατάρτισης και ανάπτυξης, και να 
    δημιουργήσετε ένα πρόγραμμα κατάρτισης και ανάπτυξης που να τις καλύπτει- επίσης, να παρέχει έγκαιρη και 
    αποτελεσματική παροχή λειτουργικών υπηρεσιών. Οι μηχανικοί λειτουργιών πρέπει να εκπαιδεύονται στις 
    σχετικές πτυχές της διαχείρισης υπηρεσιών (π.χ., μέσω εκπαιδευτικών μαθημάτων, αυτοεκπαίδευσης, 
    καθοδήγησης και εκπαίδευσης on-the-job), καθώς και να αναπτύξουν δεξιότητες ομαδικότητας και ηγεσίας. Το 
    αρχείο κατάρτισης θα πρέπει να τηρείται για κάθε άτομο, με περιγραφές των εκπαιδεύσεων που παρέχονται.

### *Διαδικασίες λειτουργιών μηχανικής λογισμικού*

Το πρότυπο IEEE 20000 [1] είναι το πρότυπο αναφοράς που παρουσιάζει μια επισκόπηση των διαδικασιών. Καθορίζει τις 
απαιτήσεις για τον σχεδιασμό, τη μετάβαση, την παράδοση και τη βελτίωση των υπηρεσιών λειτουργιών. Το πρότυπο IEEE 
20000 περιγράφει πέντε κύριες ομάδες διαδικασιών λειτουργιών: διαδικασίες παροχής υπηρεσιών, διαδικασίες έκδοσης, 
διαδικασίες ελέγχου, διαδικασίες επίλυσης και διαδικασίες σχέσεων. Αυτές οι διαδικασίες λειτουργιών 
κατηγοριοποιούνται περαιτέρω ως τεχνικές διαδικασίες στο πρότυπο IEEE 12207 [3]. Οι διαδικασίες λειτουργιών, από την οπτική 
γωνία ενός μηχανικού λογισμικού, περιλαμβάνουν τις δραστηριότητες και τις εργασίες που είναι απαραίτητες για την 
ανάπτυξη, διαμόρφωση, λειτουργία και υποστήριξη ενός υφιστάμενου συστήματος ή προϊόντος λογισμικού, διατηρώντας την 
ακεραιότητά του. Το πρότυπο IEEE 12207 περιγράφει τέσσερις κύριες δραστηριότητες διαδικασιών λειτουργιών: 1) προετοιμασία για 
τη λειτουργία: αυτή απαιτεί τον καθορισμό μιας στρατηγικής λειτουργίας- 2) εκτέλεση της λειτουργίας: η οποία 
αποτελείται από τη λειτουργία και την παρακολούθηση- 3) διαχείριση των αποτελεσμάτων της λειτουργίας: όπου οι όποιες 
ανωμαλίες καταγράφονται και αντιμετωπίζονται- και τέλος 4) υποστήριξη του πελάτη: που σημαίνει να παρέχεται βοήθεια 
και διαβούλευση σε κάθε χρήστη των υπηρεσιών λειτουργιών.

Τέλος, το πρότυπο IEEE 2675 [4] εισάγει έναν αριθμό δραστηριοτήτων λειτουργιών μηχανικής λογισμικού χρησιμοποιώντας ένα 
ευέλικτο και «ελάχιστο βιώσιμο προϊόν» (MVP). Αυτό το πρότυπο αναγνωρίζει την επιρροή των DevOps ως σύνολο αρχών 
και πρακτικών που επιτρέπουν την καλύτερη επικοινωνία και συνεργασία μεταξύ των σχετικών ενδιαφερόμενων μερών με 
σκοπό την εξειδίκευση, ανάπτυξη, συνεχή βελτίωση και λειτουργία προϊόντων λειτουργικού λογισμικού, συστημάτων και 
υπηρεσιών. Αυτές οι διαδικασίες και δραστηριότητες αποτελούν ευθύνη των μηχανικών λειτουργιών.

Για τους σκοπούς του *εγχειριδίου SWEBOK*, οι δραστηριότητες μηχανικών λειτουργιών μπορούν να ομαδοποιηθούν σε τρεις 
κύριες λειτουργικές διαδικασίες (βλ. Σχήμα 2) όπου καθεμία περιέχει έναν αριθμό λειτουργικών δραστηριοτήτων, οι οποίες 
περιγράφονται στις επόμενες ενότητες του παρόντος κεφαλαίου:
    * Λειτουργικός σχεδιασμός (ενότητα 2)
    * Παράδοση λειτουργιών (ενότητα 3)
    * Έλεγχος λειτουργιών (ενότητα 4)

{id="fig-softengops-processesactivities"}

![Σχήμα 1.2 Διαδικασίες και Δραστηριότητες Λειτουργιών Μηχανικής Λογισμικού.](images/6-SoftEngOpsProcAct.png)    

Κάθε διαδικασία λειτουργιών μηχανικής λογισμικού περιλαμβάνει δραστηριότητες που εκτελούνται κατά τη διάρκεια των 
διαδικασιών που προηγούνται και έπονται της παράδοσης ενός έργου λογισμικού. Οι δραστηριότητες σχεδιασμού λειτουργιών 
μηχανικής λογισμικού πραγματοποιούνται κατά τη διάρκεια του σταδίου πριν από την παράδοση. Αυτές οι δραστηριότητες 
καλύπτονται στο παρόν κεφάλαιο.

### *Εγκατάσταση λογισμικού*

Πριν μία εφαρμογή ή ενημέρωση λογισμικού μπορέσει να διατεθεί στους χρήστες (δηλ. να κυκλοφορήσει στη φάση παραγωγής), 
ο μηχανικός λειτουργιών πρέπει να εγκαταστήσει το λογισμικό ως μέρος της ανάπτυξής του (deployment). Για την 
εγκατάσταση του λογισμικού, ο μηχανικός ενδέχεται να χρειαστεί να απεγκαταστήσει προηγούμενες εκδόσεις, να διαμορφώσει 
το λογισμικό για τον τελικό προορισμό του, να δημιουργήσει τους απαραίτητους καταλόγους, αρχεία μητρώου και μεταβλητές 
περιβάλλοντος στον προορισμό-στόχο. Αυτό γίνεται συχνά με τη χρήση μιας γλώσσας σεναρίου (scripting language). Η 
εγκατάσταση του λογισμικού στην κατάλληλη τοποθεσία γίνεται συνήθως ηλεκτρονικά, αλλά στην περίπτωση των ενσωματωμένων 
συστημάτων, μπορεί να απαιτείται η χρήση ενός φυσικού ενδιάμεσου. Μόλις το λογισμικό εγκατασταθεί, πραγματοποιείται 
ένα βήμα επαλήθευσης για να διασφαλιστεί ότι η λειτουργία ήταν επιτυχής.

### *Εκτέλεση σεναρίων και αυτοματοποίηση*

Στα πλαίσια των λειτουργιών μηχανικής λογισμικού, επαναλαμβανόμενες εργασίες αυτοματοποιούνται για τη μείωση 
καθυστερήσεων, τη βελτίωση της ποιότητας και τη διασφάλιση συνεπούς και σταθερού λειτουργικού περιβάλλοντος .Αυτό 
συνήθως επιτυγχάνεται με τη χρήση γλωσσών σεναρίων (scripting languages), οι οποίες είναι βασικές γλώσσες προγραμματισμού. 
Η αυτοματοποίηση λειτουργιών επιτρέπει ταχύτερη αντίδραση σε περίπτωση αποτυχίας και, ως εκ τούτου, οδηγεί σε λιγότερο 
χρόνο διακοπής λειτουργίας και λιγότερα σοβαρά περιστατικά, καθώς οι ειδοποιήσεις αποστέλλονται αμέσως. Αυτοματοποίηση 
τέτοιων εργασιών είναι επίσης ένας καλός τρόπος για να διασφαλιστεί η τυποποίηση των λειτουργιών σε έναν οργανισμό. 
Αποτελεί επίσης τη βάση για την ανάπτυξη των λειτουργιών που διατίθενται ως υπηρεσία. Ανατρέξτε στην ενότητα 6 για 
περαιτέρω συζήτηση αναφορικά με τα εργαλεία λειτουργίας.

### *Αποτελεσματικός Έλεγχος και Αντιμετώπιση προβλημάτων*

Οι λειτουργίες μηχανικής λογισμικού είναι υπεύθυνες για τη διασφάλιση της σταθερότητας του συστήματος. Για το σκοπό αυτό, 
το λογισμικό πρέπει να δοκιμάζεται διεξοδικά πριν από την κυκλοφορία του (ανεπτυγμένο στην παραγωγή και διατεθειμένο στους 
χρήστες). Επειδή η χειροκίνητη δοκιμή είναι αναποτελεσματική, επιρρεπής σε σφάλματα και μη επεκτάσιμη, ο έλεγχος πρέπει να 
αυτοματοποιείται όσο το δυνατόν περισσότερο σε όλη τη διαδικασία λογισμικού. Επίσης, επειδή ο διαθέσιμος χρόνος για δοκιμές 
είναι περιορισμένος, οι δοκιμές παλινδρόμησης και οι στρατηγικές ελέγχων κάλυψης (test coverage strategies) (η επιλεκτική και 
επαναληπτική δοκιμή μιας εφαρμογής λογισμικού, ή ενός συστατικού της, για να επαληθευτεί ότι το λογισμικό δεν θα προκαλέσει 
ανεπιθύμητα αποτελέσματα) διαδραματίζουν σημαντικό ρόλο στις λειτουργίες μηχανικής λογισμικού.

Όταν εντοπίζονται σφάλματα (στην παραγωγή μετά την κυκλοφορία του λογισμικού ή κατά τη διάρκεια εσωτερικών φάσεων δοκιμής), 
οι μηχανικοί λειτουργιών λογισμικού πρέπει να επιλύουν προβλήματα υλικού και λογισμικού εκτελώντας διαγνωστικά, καταγράφοντας 
τα προβλήματα και τις λύσεις τους, ιεραρχώντας τα προβλήματα και αξιολογώντας τον αντίκτυπό τους. Το κόστος - τόσο σε χρόνο 
όσο και σε χρήμα - της επανάληψης της πλήρους δοκιμής σε ένα σημαντικό κομμάτι λογισμικού είναι σημαντικό. Για να διασφαλιστεί 
ότι οι ζητούμενες αναφορές προβλημάτων (PR) είναι έγκυρες, ο μηχανικός λειτουργιών θα πρέπει να αναπαράγει και να επαληθεύσει 
τα προβλήματα εκτελώντας τους κατάλληλους ελέγχους. Έλεγχοι ορισμένων πτυχών του λογισμικού στην παραγωγή μπορεί να είναι 
ιδιαίτερα προκλητικοί. Για παράδειγμα, όταν το λογισμικό εκτελεί κρίσιμες λειτουργίες, μπορεί να είναι δύσκολο να το θέσουμε 
εκτός σύνδεσης για έλεγχο. Γενικά, ο έλεγχος του λογισμικού στην παραγωγή είναι δύσκολη (μερικές φορές αδύνατη) και θα μπορούσε 
να απαιτήσει τη χρήση τεχνικών ελέγχων  όπως ο έλεγχος καναρινιού (canary testing) και σκοτεινές εκκινήσεις (dark launching). 
Το γνωστικό πεδίο του ελέγχου λογισμικού παρέχει πρόσθετες πληροφορίες και αναφορές σχετικά με τον έλεγχο λογισμικού.

### *Απόδοση, αξιοπιστία και Εξισορρόπηση φορτίου*

Οι μηχανικοί λειτουργιών λογισμικού σχεδιάζουν με στόχο την απόδοση, αξιοπιστία και εξισορρόπηση φορτίου νωρίς στα έργα 
λογισμικού για να διασφαλίσουν ότι πληρούν τις απαιτήσεις του έργου. (Βλέπε ενότητα 1.2 έως 1.7 του γνωστικού πεδίου απαιτήσεων 
λογισμικού). Μια τρέχουσα τάση είναι για οι μηχανικοί λογισμικού να σχεδιάζουν και να χρησιμοποιούν υπηρεσίες 
υποδομής/λειτουργίας για να προσαρμόζουν δυναμικά (π.χ. επεκτασιμότητα) την υποδομή ανάλογα με τη ζήτηση. Η χρήση πρακτικών 
DevOps επιτρέπει στους μηχανικούς λειτουργιών να προβλέπουν αυτές τις ανάγκες νωρίς και να παρέχουν υπηρεσίες υποδομής που οι 
μηχανικοί λογισμικού μπορούν να χρησιμοποιούν και να ελέγχουν στα στάδια ανάπτυξης ενός έργου.

##Προγραμματισμός λειτουργιών μηχανικής λογισμικού

Αυτό το θέμα εισάγει μερικές από τις γενικές τεχνικές που χρησιμοποιούνται στον σχεδιασμό λειτουργιών μηχανικής λογισμικού. 
Οι μηχανικοί λειτουργιών πρέπει να αντιμετωπίσουν έναν αριθμό βασικών ζητημάτων για να εξασφαλίσουν ότι το λογισμικό λειτουργεί 
αποτελεσματικά. Οι μηχανικοί λειτουργιών πρέπει να τεκμηριώνουν τα βήματα και τα εργαλεία τους αναφορικά με τη μηχανική 
λογισμικού, χρησιμοποιώντας κάθε τύπο, μορφή ή μέσο κατάλληλο για το σκοπό αυτό (π.χ. Wikis, έγγραφα και άλλα). Τα ακόλουθα 
θέματα τυπικά θεωρούνται κατάλληλα ως αποδεικτικά στοιχεία καλά τεκμηριωμένων λειτουργιών:
    * πολιτικές και σχέδια,
    * τεκμηρίωση υπηρεσιών,
    * διεργασίες,
    * διαδικασίες, και
    * αρχεία ελέγχου διαδικασιών.

### *Πλάνο λειτουργιών και Διαχείριση προμηθευτών*

Ο σχεδιασμός λειτουργιών μηχανικής λογισμικού θα πρέπει να αποτελεί μέρος της διαδικασίας μετάφρασης των απαιτήσεων του έργου 
και των αναγκών των προγραμματιστών και των συντηρητών σε υπηρεσίες, και θα πρέπει να παρέχει έναν οδηγό για την καθοδήγηση της 
προόδου. Αυτή η διαδικασία συχνά περιλαμβάνει τα προϊόντα και τις υπηρεσίες των προμηθευτών που πρέπει να είναι καλά 
συντονισμένες για να διασφαλιστεί η ποιότητα των υπηρεσιών. Το πρότυπο IEEE 20000 περιγράφει τις δραστηριότητες σχεδιασμού, 
καθώς και το πρότυπο ΙΕΕΕ 12207, το οποίο απαριθμεί τις δραστηριότητες με τις οποίες οι μηχανικοί λειτουργιών ασχολούνται από 
ανθρώπινες, τεχνικές και συστημικές οπτικές.

#### Πλάνο λειτουργιών

Ενώ η ανάπτυξη λογισμικού συνήθως διαρκεί από μερικούς μήνες έως μερικά χρόνια, η φάση της λειτουργίας διαρκεί συνήθως πολλά 
χρόνια. Ως εκ τούτου, η εκτίμηση των απαιτήσεων σε πόρους αποτελεί βασικό στοιχείο του λειτουργικού σχεδιασμού. Ο σχεδιασμός 
των λειτουργιών της μηχανικής λογισμικού οφείλει να ξεκινά με την απόφαση για την ανάπτυξη ενός νέου προϊόντος λογισμικού και 
θα πρέπει να εξετάζει τις απαιτήσεις συντήρησης και λειτουργίας νωρίς. Ένα έγγραφο ιδέας (concept document) θα πρέπει να 
αναπτυχθεί, ακολουθούμενο από ένα λειτουργικό σχέδιο και ένα σχέδιο συντήρησης [1,c7s2], και τα δύο θα πρέπει να καλύπτουν τα 
ακόλουθα:
    * Πεδίο εφαρμογής των λειτουργιών και του λογισμικού συντήρησης,
    * Προσαρμογή των διαδικασιών της μηχανικής λογισμικού λειτουργιών και των εργαλείων,
    * Προσδιορισμός του οργανισμού λειτουργιών μηχανικής λογισμικού,
    * Εκτίμηση του κόστους των λειτουργιών μηχανικής λογισμικού και συντήρησης.

Το επόμενο βήμα σχεδιασμού προτείνει την ανάπτυξη ενός σχεδίου λειτουργιών μηχανικής λογισμικού, ή ιδέα των λειτουργιών 
(CONOPS). Αυτό το πλάνο πρέπει να προετοιμάζεται κατά τη διάρκεια της ανάπτυξης λογισμικού και θα πρέπει να καθορίζει τον 
τρόπο με τον οποίο οι χρήστες θα ζητούν τροποποιήσεις λογισμικού και θα αναφέρουν προβλήματα ή ζητήματα όταν το λογισμικό θα 
είναι λειτουργικό. Ο σχεδιασμός λειτουργιών μηχανικής λογισμικού εξετάζεται στο πρότυπο IEEE 12207 [3] και 2675 [4]. Τα 
πρότυπα παρέχουν κατευθυντήριες γραμμές για το σχεδιασμό, εφαρμογή, συντήρηση, αυτοματοποίηση και υποστήριξη του λογισμικού 
παραγωγής. Τέλος, στο υψηλότερο επίπεδο σχεδιασμού, ο οργανισμός λειτουργιών πρέπει να διεξάγει τις επιχειρησιακές 
δραστηριότητες σχεδιασμού (π.χ., προϋπολογισμός, χρηματοοικονομικά και ανθρώπινοι πόροι), όπως ακριβώς και όλα τα άλλα τμήματα 
του οργανισμού (βλ. στο γνωστικό πεδίο διαχείρισης της μηχανικής λογισμικού). Το πρότυπο IEEE 20000 συνιστά ότι το σχέδιο 
λειτουργιών αντιμετωπίζει θέματα που σχετίζονται με διάφορες οπτικές σχεδιασμού, συμπεριλαμβανομένων των ακόλουθων:
    * Οι ρόλοι και οι αρμοδιότητες για την υλοποίηση, τη λειτουργία και συντήρησης της νέας ή αλλαγμένης υπηρεσίας,
    * Τις δραστηριότητες που πρέπει να εκτελούνται από τους πελάτες και τους προμηθευτές,
    * Αλλαγές στις υφιστάμενες υπηρεσίες,
    * Επικοινωνία με τα ενδιαφερόμενα μέρη,
    * Νέες ή τροποποιημένες συμβάσεις και συμφωνίες για την ευθυγράμμιση με τις αλλαγές στις επιχειρησιακές ανάγκες,
    * Απαιτήσεις στελέχωσης και πρόσληψης προσωπικού,
    * Απαιτήσεις δεξιοτήτων και κατάρτισης (π.χ., χρήστες, τεχνική υποστήριξη),
    * Διαδικασίες, μέτρα, μέθοδοι και εργαλεία που θα χρησιμοποιηθούν σε σχέση με τη νέα ή αλλαγμένη υπηρεσία,
    * Διαχείριση δυναμικότητας, οικονομική διαχείριση
    * Προϋπολογισμοί και χρονοδιαγράμματα,
    * Κριτήρια αποδοχής της υπηρεσίας, και
    * Τα αναμενόμενα αποτελέσματα από τη λειτουργία της νέας υπηρεσίας, εκφρασμένα σε μετρήσιμους όρους.

Το σχέδιο αυτό διασφαλίζει ότι μια λειτουργική στρατηγική ορίζεται, οι προϋποθέσεις για τη σωστήλειτουργία προσδιορίζονται 
και αξιολογούνται, το λογισμικό δοκιμάζεται σε κλίμακα για να λειτουργήσει στο προβλεπόμενο περιβάλλον, και η επιτήρηση είναι 
για τη διασφάλιση της ανταπόκρισης και της διαθεσιμότητας του λογισμικού, εξασφαλίζοντας συνεχή υποστήριξη. Κατόπιν ατομικού 
αιτήματος (π.χ., αίτημα δημοσίων σχέσεων και τροποποίησης (MR)) απαιτείται σχεδιασμός. Μόλις τα μεμονωμένα αιτήματα 
παραλαμβάνονται και επικυρώνονται, η δραστηριότητα σχεδιασμού έκδοσης απαιτεί ότι οι μηχανικοί λειτουργιών εκτελούν τις 
ακόλουθες εργασίες:
    * Προσδιορισμός των ημερομηνιών- στόχων διαθεσιμότητας των μεμονωμένων αιτημάτων,
    * Να συμφωνήσουν σχετικά με το περιεχόμενο των επακόλουθων εκδόσεων,
    * Εντοπισμός πιθανών συγκρούσεων και ανάπτυξη εναλλακτικών λύσεων,
    * Αξιολόγηση του κινδύνου μιας δεδομένης έκδοσης και ανάπτυξη ενός σχεδίου επαναφοράς και μετάβασης δεδομένων (βλ. ενότητα 3.2) σε περίπτωση προβλημάτων που ενδεχομένως προκύψουν,
    * Ενημέρωση όλων των ενδιαφερομένων μερών.

#### Διαχείριση προμηθευτών

Η διαχείριση των προμηθευτών διασφαλίζει ότι οι προμηθευτές του οργανισμού και η απόδοσή τους διαχειρίζονται καταλλήλως για να 
υποστηρίζεται η απρόσκοπτη παροχή ποιοτικών προϊόντων και υπηρεσιών. Το πρότυπο IEEE 12207 απαριθμεί τις δραστηριότητες που ο 
μηχανικός λειτουργιών θα πραγματοποιήσει για να καθιερώσει μια συμφωνία για την απόκτηση προϊόντων ή/και υπηρεσιών από 
προμηθευτές. Από τη σκοπιά του μηχανικού λειτουργιών, η φύση της σχέσης με τους προμηθευτές και η προσέγγιση θα πρέπει να 
καθορίζονται από τη φύση των προϊόντων και των υπηρεσιών που απαιτούνται σε ένα έργο. Η διαχείριση των προμηθευτών υπηρεσιών 
που σχετίζονται με το λειτουργικό λογισμικό περιλαμβάνει τη διαχείριση εξωτερικών υπηρεσιών (outsourced) και υπηρεσίες που 
παρέχονται από λογισμικό ως υπηρεσία (SaaS, PaaS και IaaS).

### *Περιβάλλοντα ανάπτυξης και λειτουργίας*

Η συνολική διαδικασία λογισμικού απαιτεί τη χρήση διαφορετικών περιβαλλόντων σε διαφορετικά στάδια. Αυτά συνήθως ορίζονται ως 
το περιβάλλον ανάπτυξης, το περιβάλλον ελέγχων ή περιβάλλον διασφάλισης ποιότητας (QA), το περιβάλλον προπαραγωγής, και το 
περιβάλλον παραγωγής. Για να δημιουργήσετε ποιότητα στο προϊόν και να μειωθούν οι κίνδυνοι που σχετίζονται με την κυκλοφορία 
του λογισμικού σε περιβάλλον παραγωγής (είτε η έκδοση σχετίζεται με νέα λειτουργικότητα ή με διόρθωση ελαττωμάτων), οι 
μηχανικοί πρέπει να διασφαλίζουν ότι τα διάφορα περιβάλλοντα είναι όλα συνεκτικά και συγχρονισμένα με το περιβάλλον παραγωγής.

Για το λόγο αυτό, το DevOps συνιστά ότι η δημιουργία όλων των διαφορετικών περιβαλλόντων να αυτοματοποιείται και να 
δημιουργείται από ένα ενιαίο αποθετήριο κώδικα. Στους ώριμους (από πλευράς DevOps) οργανισμούς, η δημιουργία των διαφορετικών 
περιβαλλόντων είναι πλήρως αυτοματοποιημένη και διατίθενται ως υπηρεσία. Επίσης, όλα τα περιβάλλοντα πρέπει να δημιουργούνται 
από τον ίδια πηγαίο κώδικα (ενιαία πηγή αλήθειας) για να διασφαλιστεί ότι όλα τα περιβάλλοντα είναι συγχρονισμένα με το 
περιβάλλον παραγωγής στο οποίο το λογισμικό έχει κυκλοφορήσει. Αυτό οδηγεί στην ιδέα του IaC.

### *Διαθεσιμότητα λογισμικού, συνέχιση και επίπεδα υπηρεσιών*

Η διαθεσιμότητα και η συνέχιση των υπηρεσιών πρέπει να διαχειρίζονται ώστε να διασφαλίζονται οι δεσμεύσεις προς τον πελάτη. 
Επειδή η διαθεσιμότητα υπηρεσιών και η συνέχιση ορίζονται ως μη λειτουργικές απαιτήσεις νωρίς σε ένα έργο (βλ. το γνωστικό 
πεδίο Ποιότητας λογισμικού), οι μηχανικοί λειτουργιών θα διασφαλίσουν ότι η κατάλληλη υποδομή προδιαγράφεται, σχεδιάζεται, 
υλοποιείται και δοκιμάζεται. Η διαθεσιμότητα λογισμικού μετριέται και καταγράφεται, και διερευνάται η απρογραμμάτιστη μη 
διαθεσιμότητα, και λαμβάνονται τα κατάλληλα μέτρα. Εκθέσεις υπηρεσιών παράγουν διαθεσιμότητα και συνέχιση των λειτουργικών 
υπηρεσιών έναντι στόχων σε επίπεδο υπηρεσιών.

Η διαδικασία διαχείρισης σε επίπεδο υπηρεσιών παρακολουθεί το συμφωνημένο επίπεδο υπηρεσιών του λογισμικού, συμπεριλαμβανομένων 
των χαρακτηριστικών του φόρτου εργασίας, απόδοσης και τάσης διαθεσιμότητας πληροφοριών, καθώς και την ικανοποίηση των πελατών. 
Καθορίζοντας και τεκμηριώνοντας συμφωνίες επιπέδου υπηρεσιών (SLAs) μπορεί να βοηθήσει στην αποσαφήνιση του πλήρους φάσματος 
των παρεχόμενων υποχρεώσεων των υπηρεσιών λειτουργίας.

### *Διαχείριση δυναμικότητας λογισμικού*

Το πρότυπο IEEE 20000 περιγράφει την ανάγκη διασφάλισης ότι το προϊόν λογισμικού διαθέτει τη δυναμικότητα, ανά πάσα στιγμή, να 
ανταποκρίνεται στις τρέχουσες και μελλοντικές συμφωνημένες απαιτήσεις που δημιουργούνται από το επιχειρησιακές ανάγκες του 
πελάτη. Οι τρέχουσες και αναμενόμενες επιχειρηματικές απαιτήσεις για υπηρεσίες θα πρέπει να γίνονται κατανοητές από την άποψη 
του τί η επιχείρηση χρειάζεται προκειμένου να παρέχει τα προϊόντα ή τις υπηρεσίες στους πελάτες της. Επιχειρηματικές προβλέψεις 
και εκτιμήσεις φόρτου εργασίας θα πρέπει να μεταφράζονται σε συγκεκριμένες απαιτήσεις και να τεκμηριωθούν. Η αντίδραση σε 
μεταβολές του φόρτου εργασίας ή του περιβάλλοντος θα πρέπει να είναι προβλέψιμη- δεδομένα σχετικά με τα τρέχοντα και τα 
προηγούμενα στοιχεία, καθώς και για τους πόρους χρήσης σε κατάλληλο επίπεδο, θα πρέπει να καταγράφονται και να αναλύονται για 
την υποστήριξη της διαδικασίας.

Η διαχείριση της δυναμικότητας είναι το κεντρικό σημείο για όλα τα ζητήματα απόδοσης και δυναμικότητας. Η διαδικασία θα πρέπει 
να υποστηρίζει άμεσα την ανάπτυξη νέων και αλλαγμένων υπηρεσιών με τη διαστασιολόγηση και τη μοντελοποίηση αυτών των υπηρεσιών. 
Ένα πλάνο δυναμικότητας που τεκμηριώνει την πραγματική απόδοση της υποδομής και τις αναμενόμενες απαιτήσεις θα πρέπει να 
παράγονται σε κατάλληλη συχνότητα (τουλάχιστον ετησίως), λαμβάνοντας υπόψη το ρυθμό μεταβολής των υπηρεσιών και του όγκου των 
υπηρεσιών, των πληροφοριών στις εκθέσεις διαχείρισης αλλαγών, και τις μεταβαλλόμενες επιχειρησιακές απαιτήσεις των πελατών. 
Το πλάνο δυναμικότητας θα πρέπει να τεκμηριώνει κοστολογημένες επιλογές για την ικανοποίηση των επιχειρηματικών απαιτήσεων.

### *Δημιουργία αντιγράφων ασφαλείας λογισμικού, καταστροφή, αποκατάσταση και επαναφορά από αποτυχία*

Το πρότυπο IEEE 20000 προτείνει ότι, για να εξασφαλιστεί η συνέχιση σχεδιασμού και ελέγχου, αντίγραφα ασφαλείας των δεδομένων, 
εγγράφων και λογισμικού, καθώς και κάθε είδους εξοπλισμός και προσωπικό που είναι απαραίτητα για την αποκατάσταση της 
υπηρεσίας, θα πρέπει να είναι γρήγορα διαθέσιμα μετά από μια σημαντική αποτυχία υπηρεσίας ή καταστροφή. Η δημιουργία αντιγράφων 
ασφαλείας και η ανάκτηση δεδομένων είναι η επιτυχής ανάκτηση είναι ιδιαίτερα ζωτικής σημασίας. Η ανάγκη για επιτυχή ανάκτηση 
πρέπει να επηρεάσει το ποιο αντίγραφο ασφαλείας και ποιες μεθόδους ανάκτησης θα πρέπει να χρησιμοποιούνται (πλήρη ή 
επαυξητική), το πόσο συχνά τα σημεία επαναφοράς δημιουργούνται, πού αποθηκεύονται, και πόσο καιρό διατηρούνται.

Προετοιμασία και τακτική δοκιμή των αντιγράφων ασφαλείας, αποκατάστασης από καταστροφές και επαναφοράς σε περίπτωση αποτυχίας 
θα πρέπει να διεξάγονται συνεχώς, καθώς δημιουργούνται αλλαγές στο περιβάλλον παραγωγής. Αυτό είναι άλλη μια ουσιαστική 
δραστηριότητα που ενεργοποιείται όταν γίνονται αξιολογήσεις διακοπών. Έλεγχοι αποκατάστασης από καταστροφή απαιτούν τη διακοπή 
της υπηρεσίας, προσδιορίζοντας την κατάσταση στο σημείο ελέγχου και την ενεργοποίηση της διαδικασίας αποκατάστασης αποτυχίας. 
Οι μηχανικοί λογισμικού πρέπει να κατανοήσουν ότι η αποτυχία είναι αναπόφευκτη και ότι οι δαίμονες αυτοματοποιημένης 
επαναφοράς αποτυχίας μπορούν να μειώσουν το χρόνο αποκατάστασης δραστικά. Για να επιτευχθεί αυτό, οι0 εφαρμογές λογισμικού θα 
πρέπει να περιλαμβάνουν λογική αντιμετώπισης αποτυχιών- αυτό θα πρέπει να σχεδιάζεται κατά τη διάρκεια της ανάπτυξης. Τα DevOps 
μπορούν να βοηθήσουν οργανισμούς που θέλουν να μειώσουν τις ανατροπές αποτυχίας και τις καταστροφές με την αυτοματοποίηση και 
τους ελέγχους εκκίνησης όσο το δυνατόν συχνότερα για να διασφαλιστεί η ετοιμότητα σε περίπτωση αποτυχίας ή καταστροφικού 
συμβάντος.

### *Ασφάλεια λογισμικού και δεδομένων, ασφάλεια, ακεραιότητα, προστασία και έλεγχοι*

Η ανάγκη διαχείρισης της ασφάλειας των πληροφοριών στο πλαίσιο όλων των δραστηριοτήτων μιας υπηρεσίας περιγράφεται στο πρότυπο 
IEEE 20000. Αυτό επιτυγχάνεται με τη διενέργεια εκτίμησης κινδύνου λογισμικού όσο αναφορά στην ασφάλεια και στη διαθεσιμότητα 
των πληροφοριών.Οι μηχανικοί λειτουργιών πρέπει να επιδιώκουν να επιβάλλουν τους ακόλουθους ελέγχους:
    * Η ανώτερη διοίκηση θα πρέπει να καθορίσει την πολιτική ασφάλειας των πληροφοριών, να την  επικοινωνεί στο προσωπικό και στους πελάτες, και να 
    ενεργεί για να διασφαλίσει την αποτελεσματική εφαρμογή της,
    * Οι ρόλοι της διαχείρισης της ασφάλειας των πληροφοριών και οι αρμοδιότητες θα πρέπει να καθοριστούν και κατανέμονται στους κατόχους των θέσεων,
    * Ένας εκπρόσωπος της διοικητικής ομάδας θα πρέπει να έχει την αρμοδιότητα της παρακολούθησης και διατήρησης της αποτελεσματικότητας της πολιτικής 
    ασφάλειας των πληροφοριών,
    * Το προσωπικό με σημαντικούς ρόλους αναφορικά με την ασφάλεια θα πρέπει να λαμβάνει εκπαίδευση στην ασφάλεια πληροφοριών,
    * Όλο το προσωπικό θα πρέπει να ενημερωθεί για την πολιτική ασφάλειας των πληροφοριών,
    * Η βοήθεια εμπειρογνωμόνων για την αξιολόγηση των κινδύνων και την εφαρμογή του ελέγχου θα πρέπει να διαθέσιμη,
    * Οι αλλαγές δεν θα πρέπει να θέτουν σε κίνδυνο την αποτελεσματική λειτουργία των ελέγχων, και
    * Τα περιστατικά σχετικά με την ασφάλεια πληροφοριών θα πρέπει να αναφέρονται μετά τις διαδικασίες διαχείρισης των συμβάντων, και θα πρέπει να 
    δρομολογείται η αντίστοιχη ανταπόκριση.

## **Παράδοση λειτουργιών μηχανικής λογισμικού**

Αυτό το θέμα εισάγει μερικές από τις γενικά αποδεκτές διαδικασίες που χρησιμοποιούνται κατά τη διάρκεια της παράδοσης λειτουργιών 
μηχανικής λογισμικού (πρότυπο IEEE 20000): SLA, αναφορά υπηρεσιών, συνέχεια υπηρεσιών, διαχείριση διαθεσιμότητας, προϋπολογισμός 
και λογιστική για υπηρεσίες τεχνολογίας πληροφορικής, διαχείριση χωρητικότητας και διαχείριση της ασφάλειας πληροφοριών.

### *Λειτουργικές δοκιμές, επαλήθευση και αποδοχή*

Οι μηχανικοί λογισμικού σχεδιάζουν και εκτελούν την επαλήθευση του λογισμικού όσο το δυνατόν νωρίτερα, χρησιμοποιώντας τις τεχνικές 
της ανάπτυξης με γνώμονα τη δοκιμή (TDD) και της ανάπτυξης με γνώμονα τη δοκιμή αποδοχής (ATDD) και εργαλεία που εξασφαλίζουν ότι 
οι λειτουργικές δοκιμές είναι συνεχείς κατά τη διάρκεια της ανάπτυξης του λογισμικού, όχι μόνο στο τέλος ενός έργου. Το DevOps 
διαδραματίζει σημαντικό ρόλο στην ανάπτυξη και αυτοματοποίηση των υπηρεσιών δοκιμών λογισμικού και την ενσωμάτωση διαφορετικών 
εργαλείων για την ενίσχυση της παραγωγικότητας και της ποιότητας του λογισμικού. (Βλέπε TDD και ATDD στο γνωστικό πεδίο Έλεγχος λογισμικού).

### *Μηχανική ανάπτυξης/έκδοσης*

Η κύρια αποστολή ενός μηχανικού λειτουργιών λογισμικού αφορά την ανάπτυξη και την έκδοση του λογισμικού, ώστε να διασφαλίζεται η 
συνεχής απόδοσή του. Όπως ορίζεται στο [2*], "η ανάπτυξη (deployment) είναι η εγκατάσταση μίας συγκεκριμένης έκδοσης λογισμικού 
σε ένα δεδομένο περιβάλλον (π.χ., ανάπτυξη κώδικα σε ένα περιβάλλον ελέγχου ολοκλήρωσης ή η ανάπτυξη κώδικα στην παραγωγή)", ενώ 
η "έκδοση είναι όταν κάνουμε ένα χαρακτηριστικό (ή ένα σύνολο χαρακτηριστικών) διαθέσιμο σε όλους τους πελάτες μας ή σε ένα τμήμα 
των πελατών (π.χ., δίνουμε τη δυνατότητα στο χαρακτηριστικό να χρησιμοποιείται από το 5% της πελατειακής μας βάσης)". Οι 
διαδικασίες έκδοσης περιλαμβάνουν όλες τις δραστηριότητες που σχετίζονται με τη διαχείριση της έκδοσης. Το πρότυπο ISO 12207 [3] 
απαριθμεί τις δραστηριότητες ελέγχου της έκδοσης και εξηγεί την ανάγκη εντοπισμού και καταγραφής των αιτημάτων έκδοσης, τον 
προσδιορισμό των στοιχείων του συστήματος λογισμικού σε μια έκδοση, ακολουθούμενη από την έγκριση, και να παρακολουθούνται οι 
εκδόσεις στα καθορισμένα περιβάλλοντα.
Το DevOps υποστηρίζει την ενσωμάτωση της ανάπτυξης και των λειτουργιών στην ίδια ομάδα για τη βελτίωση της αποτελεσματικότητας 
των λειτουργιών της μηχανικής λογισμικού. Στις παραδοσιακές διαδικασίες λογισμικού, όταν μια εφαρμογή είναι έτοιμη για ανάπτυξη, 
μεταφέρεται από μια ομάδα ανάπτυξης σε μια ομάδα λειτουργίας που είναι υπεύθυνη για την ανάπτυξη, η οποία γίνεται ως επί το πλείστον 
χειροκίνητα. Αυτό έχει ως αποτέλεσμα διαδικασίες που είναι αναποτελεσματικές τόσο από πλευράς χρόνου όσο και από πλευράς ποιότητας. 
Για να βελτιωθεί η αποτελεσματικότητα της διαδικασίας ανάπτυξης, το DevOps απαιτεί την αυτοματοποίηση των διαφόρων βημάτων ανάπτυξης, 
συμπεριλαμβανομένης της συσκευασίας του κώδικα, της δημιουργίας αρχείων διαμόρφωσης, την επανεκκίνηση των εξυπηρετητών, τη διαμόρφωση 
των εξυπηρετητών και των βάσεων δεδομένων, την εγκατάσταση του λογισμικού στους διάφορους εξυπηρετητές, την εκκίνηση της εκτέλεσης 
της εφαρμογής και την εκτέλεση δοκιμών καπνού.
Διαφορετικές στρατηγικές μηχανικής έκδοσης μπορούν να χρησιμοποιηθούν για τη μείωση των κινδύνων που συνδέονται με τις εκδόσεις 
λογισμικού. Αυτές οι στρατηγικές μπορούν ομαδοποιηθούν σε δύο κύριες κατηγορίες: στρατηγικές έκδοσης βασισμένες στο περιβάλλον 
και στρατηγικές έκδοσης που βασίζονται στην εφαρμογή. Οι στρατηγικές έκδοσης που βασίζονται στο περιβάλλον χρησιμοποιούν ένα 
περιβάλλον σταδιοποίησης για την υποστήριξη μιας νέας έκδοσης μιας εφαρμογής. Με άλλα λόγια, η βασική στρατηγική περιλαμβάνει 
την ανάπτυξη της νέας έκδοσης της εφαρμογής σε ένα περιβάλλον σταδιοποίησης. Οι στρατηγικές έκδοσης με βάση την εφαρμογή βασίζονται 
στη χρήση εναλλαγών (π.χ. χαρακτηριστικά toggles) που καθιστούν δυνατή την ενεργοποίηση ή απενεργοποίηση συγκεκριμένων τμημάτων 
του κώδικα (π.χ. ένα χαρακτηριστικό) χρησιμοποιώντας παραμέτρους διαμόρφωσης.
Η ανάπτυξη και η έκδοση υποστηρίζονται από τεχνικές και εργαλεία αυτοματοποίησης. Η τεχνική ελέγχου έκδοσης καναρινιού (canary) είναι 
μια μερική και χρονικά περιορισμένη ανάπτυξη μιας αλλαγής στην υπηρεσία και μια αξιολόγηση αυτής της αλλαγής. Αυτή η αξιολόγηση βοηθά 
μηχανικούς λειτουργιών να αποφασίσουν αν θα προχωρήσουν με μια πλήρη ανάπτυξη. Ομοίως, τα εργαλεία που διαχειρίζονται την εγκατάσταση 
νέου λογισμικού συνήθως παρατηρούν τον νεοεκτεθέντα εξυπηρετητή για λίγο, διασφαλίζοντας ότι ο εξυπηρετητής δεν έχει συντριβεί ή 
συμπεριφέρεται με άλλο τρόπο. Η ίδια τεχνική είναι χρήσιμη για την παρατήρηση πρόσφατων αλλαγών- αν δεν περνούν την περίοδο επικύρωσης, 
μπορούν να ανακληθούν αυτόματα πίσω. Το γνωστικό πεδίο της διαχείρισης διαμόρφωσης του λογισμικού παρέχει περισσότερες πληροφορίες 
σχετικά με τις διαδικασίες έκδοσης. Μόλις αναπτυχθεί η πλατφόρμα εφαρμογών στο στοχευμένο περιβάλλον παραγωγής, η απόφαση για τη διάθεσή 
της στους χρήστες (έκδοση) γίνεται επιχειρηματική απόφαση.

### *Επαναφορά και μετάβαση δεδομένων*

Η *επαναφορά(rollback)* και η *μετάπτωση(migration)* δεδομένων είναι όροι που χρησιμοποιούνται για να περιγράψουν τη διαδικασία επιστροφής 
λογισμικού και της βάσης δεδομένων του σε μια κατάσταση όπου λειτουργούν σωστά. Οι μηχανικοί λογισμικού διασφαλίζουν ότι όταν μια νέα 
έκδοση του λογισμικού και των βάσεων δεδομένων έχει τροποποιηθεί και αναπτυχθεί στην παραγωγή, θα μπορούν εύκολα και γρήγορα να ανακληθούν 
σε περίπτωση που η νέα έκδοση προκαλεί ελαττώματα ή υποβάθμιση του προϊόντος στην παραγωγή. Αυτό σημαίνει ότι μια προγραμματισμένη και 
προβαρισμένη επαναφορά γίνεται πριν από μια νέα έκδοση του λογισμικού αναπτυχθεί στην παραγωγή. Οι DevOps διαδικασίες αυτοματοποιούν αυτή 
τη διαδικασία για να την κάνουν γρηγορότερα, στην πραγματικότητα η αυτοματοποιημένη επιτήρηση μπορεί να προκαλέσει επαναφορά και μετάπτωση 
δεδομένων σε μια προηγούμενη κατάσταση τόσο γρήγορα ώστε ο τελικός χρήστης δεν αντιλαμβάνεται ότι υπήρξε πρόβλημα. Και οι δύο κατηγορίες 
στρατηγικής έκδοσης (που περιγράφονται στην ενότητα 3.2) - έκδοση με βάση το περιβάλλον και έκδοση με βάση την εφαρμογή - μπορούν να 
χρησιμοποιηθούν για την υποστήριξη της επαναφοράς.

###  *Διαχείριση αλλαγών*

Αυτή η διαδικασία λειτουργιών διασφαλίζει ότι όλες οι αλλαγές αξιολογούνται, εγκρίνονται, εφαρμόζονται και επανεξετάζονται με ελεγχόμενο 
τρόπο. Όλα τα αιτήματα αλλαγών καταγράφονται και ταξινομούνται (π.χ. επείγοντα, σημαντικά και δευτερεύοντα). Η διαδικασία αυτή αξιολογεί 
τον κίνδυνο μιας αλλαγής και την ανάγκη μιας στρατηγικής επαναφοράς σε περίπτωση αποτυχίας. Μεγάλα συστήματα μπορεί να απαιτούν την 
κατάρτιση ενός χρονοδιαγράμματος αλλαγών με τον υπεύθυνο προϊόντος (product manager) και τους τελικούς χρήστες.
Ενώ στις παραδοσιακές διαδικασίες παράδοσης λογισμικού (ή μοντέλα κύκλου ζωής λογισμικού), όλες οι αλλαγές παραδίδονται ως μέρος των 
νέων εκδόσεων λογισμικού (που περιέχουν πολλαπλές αλλαγές που σχετίζονται με διαφορετικές πτυχές της εφαρμογή ή του συστήματος) που 
εκδίδονται σε σταθερά χρονικά διαστήματα (π.χ. κάθε τρεις μήνες). Το DevOps στοχεύει στην παράδοση μικρών αλλαγών (μία μόνο νέα 
λειτουργικότητα ή υπηρεσία, ή διόρθωση ελαττωμάτων, αντί για μια νέα έκδοση μιας εφαρμογής που περιέχει πολλαπλές αλλαγές) κατά 
παραγγελία και ανεξάρτητα η μία από την άλλη. Για το σκοπό αυτό, οι εφαρμογές λογισμικού (ή οι υπηρεσίες) πρέπει να είναι σχεδιασμένες 
έτσι ώστε να επιτρέπουν μικρές, ανεξάρτητες αναπτύξεις λογισμικού.

### *Διαχείριση προβλημάτων*

Ο στόχος αυτής της διαδικασίας λειτουργιών είναι η ελαχιστοποίηση της διαταραχής της λειτουργίας της λειτουργίας μέσω του εντοπισμού και 
της ανάλυσης της αιτίας των περιστατικών και προβλημάτων στο λογισμικό και στα συστήματα. Η προσέγγιση αυτή μπορεί να απαιτεί τη συμμετοχή 
μιας διεπιστημονικής ομάδας, της οποίας οι μηχανικοί λογισμικού και οι μηχανικοί λειτουργίας διερευνούν, για παράδειγμα, επαναλαμβανόμενα 
προβλήματα παραγωγής που μπορεί να έχουν ως υποκείμενη αιτία την υποδομή λογισμικού και στοιχεία του συστήματος. Αυτό μπορεί να απαιτεί 
παρακολούθηση, καταγραφή και σκιαγράφηση του λογισμικού και της συμπεριφοράς της υποδομής του.

## **Έλεγχος λειτουργιών μηχανικής λογισμικού**

Αυτό το θέμα εισάγει ορισμένα γενικά αποδεκτές τεχνικές που χρησιμοποιούνται στο λογισμικό ελέγχου των λειτουργιών της μηχανικής λογισμικού.

### *Διαχείριση περιστατικών*

Η διαχείριση περιστατικών είναι η διαδικασία καταγραφής, ιεράρχησης και αξιολόγησης των επιπτώσεων στη λειτουργία , την επίλυση, την 
κλιμάκωση και το κλείσιμο των περιστατικών λογισμικού. Η σύγχρονη προσέγγιση DevOps αυτοματοποιεί την επιτήρηση για τα συμβάντα λογισμικού 
με τη χρήση ειδοποιήσεων και αρχείων καταγραφής για την πρόληψη από το να γίνουν σημαντικά περιστατικά

### *Παρακολούθηση, μέτρηση και επιτήρηση*

Δραστηριότητες λειτουργιών μηχανικής λογισμικού παρακολουθούν τη χωρητικότητα, τη συνέχιση και τη διαθεσιμότητα. Σε μια νοοτροπία DevOps, 
η ελπίδα δεν θα πρέπει να αποτελεί στρατηγική- αντίθετα, οι μηχανικοί θα πρέπει να ενημερώνονται για την ποιότητα του συστήματος και τη 
λειτουργική υγεία με αποδεικτικά στοιχεία, όπως οι ακόλουθοι βασικοί δείκτες απόδοσης (KPIs), οι οποίοι είναι διαθέσιμοι στα ενδιαφερόμενα 
μέρη σε πραγματικό χρόνο:
    * Παρακολούθηση του συστήματος παραγωγής και τηλεμετρία προϊόντων,
    * Επαληθεύσεις και αποτελέσματα επικύρωσης πριν και μετά την έκδοση στην παραγωγή,
    * Δραστηριότητα από τον τελικό χρήστη και χρήση πόρων, 
    * Αποτελέσματα ανάλυσης αντίπτυπου,
    * Δια- και ενδο-σχετικές εξαρτήσεις που απαιτούνται για τη λειτουργία του συστήματος,
    * Αλλαγές διαμόρφωσης που δεν σχετίζονται με εγκεκριμένες εργασίες ανάπτυξης, και
    * Επιδόσεις ικανότητας ασφάλειας και ανθεκτικότητας.

### *Υποστήριξη λειτουργίας*

Τα πρότυπα IEEE 12207 [3], IEEE 20000 [1] και IEEE 2675 [4] προσδιορίζουν τις πρωταρχικές δραστηριότητες λειτουργιών μηχανικής λογισμικού 
πουυποστηρίζουν τις διαδικασίες λειτουργιών - δραστηριότητες που λειτουργούν το προϊόν λογισμικού στο προβλεπόμενο περιβάλλον του - και 
τις πρωταρχικές δραστηριότητες που παρέχουν υποστήριξη στους πελάτες των προϊόντων λογισμικού. Οι δραστηριότητες υποστήριξης λειτουργίας 
ξεκινούν στο στάδιο σχεδιασμού του έργου και στη συνέχεια εκτελούνται, γεγονός που συχνά απαιτεί τεχνικές και εργαλεία για να παρακολουθούνται 
προληπτικά το προϊόν και οι υπηρεσίες και να αντιδράσουν γρήγορα σε συμβάντα και περιστατικά. Δραστηριότητες υποστήριξης περιγράφονται συχνά σε SLAs.

### *Αναφορές υπηρεσιών λειτουργιών*

Η υποβολή αναφορών υπηρεσιών αποσκοπεί στην παραγωγή συμφωνημένων, έγκαιρων, αξιόπιστων και ακριβών πληροφοριών για τη λήψη αποφάσεων. Κάθε αναφορά 
υπηρεσίας συμβάλλει στην επίδειξη του τρόπου με τον οποίο μια λειτουργική υπηρεσία έχει επιτελέσει και αν έχει επιτύχει κάποιο δηλωμένο και 
συμφωνημένο στόχο για τον τελικό χρήστη. Τυπικές αναφορές υπηρεσιών αφορούν την απόδοση σε σχέση με στόχους επιπέδου υπηρεσίας, καθώς και τις 
παραβιάσεις ασφάλειας , τον όγκο των συναλλαγών και τη χρήση πόρων, τα περιστατικά και τις αποτυχίες, καθώς και την ανάλυση ικανοποίησης. Οι 
μηχανικοί λειτουργιών πρέπει να καθορίσουν αυτοματοποιημένα συστήματα και εργαλεία για μετρήσεις για να κάνουν τα εξής:
   * Να προσδιορίζουν αν τα μέτρα είναι ήδη διαθέσιμα ή πρόσθετα όργανα για τη συλλογή, ανάλυση και υποβολή εκθέσεων
   * Να επιλέξει ή να αναπτύξει ένα πλαίσιο και εργαλεία που θα επιτρέψουν το συντονισμό της συλλογής μετρήσεων για ανάλυση, την υποβολή εκθέσεων και τον έλεγχο

## **Πρακτικές εκτιμήσεις**

Αυτό το θέμα εισάγει πρακτικές εκτιμήσεις για τις λειτουργίες μηχανικής λογισμικού.

### *Πρόληψη περιστατικών και προβλημάτων*

Η συνολική λειτουργική διαδικασία πρέπει να είναι αυτοματοποιημένη όσο το δυνατόν περισσότερο για την πρόληψη περιστατικών και προβλημάτων, 
και αυτοματοποιημένοι έλεγχοι πρέπει να ενσωματωθούν σε όλη τη διαδικασία. Επίσης, η τηλεμετρία του προϊόντος θα πρέπει να εφαρμοστεί με τις 
κατάλληλες τεχνικές αναλυτικής (analytics) για την έγκαιρη ανίχνευση προβλημάτων ώστε να προλαμβάνονται τα περιστατικά. Για το σκοπό αυτό, τα 
δεδομένα που συλλέγονται σε όλα τα επίπεδα του προϊόντος (συμπεριλαμβανομένου του επιπέδου εφαρμογής, του επιπέδου λειτουργικού συστήματος και 
του επιπέδου υποδομής) πρέπει να συλλέγονται και να αναλύονται. Η χρήση τηλεμετρίας προϊόντος όχι μόνο επιτρέπει στους μηχανικούς να εντοπίζουν 
πιθανά προβλήματα, αλλά και να παρέχει τα θεμέλια για τον εντοπισμό της πηγής του προβλήματος.

### *Διαχείριση λειτουργικού κινδύνου*

Οι μηχανικοί λειτουργιών πρέπει να διαχειρίζονται διάφορους κινδύνους. Το πρότυπο IEEE 2675 [4] ορίζει τη συνεχή διαχείριση κινδύνων ως μια συνεχή 
διαδικασία που μπορεί να αυτοματοποιηθεί για να παρακολουθεί συνεχώς τις λειτουργίες για κινδύνους που μπορούν να επηρεάσουν τη διαθεσιμότητα του 
λογισμικού, την επεκτασιμότητα και την ασφάλειά του. Οι μηχανικοί λειτουργίας μπορούν να λαμβάνουν μέτρα για την αυτοματοποίηση των ειδοποιήσεων. 
Για να αποφασίσουν ποια συμβάντα θα ενεργοποιήσουν μια ειδοποίηση, χρειάζονται να μιλήσουν με τους ιδιοκτήτες προϊόντων και τους μηχανικούς 
λογισμικού για να καθορίσουν ένα συμφωνημένο επίπεδο ανοχής κινδύνου. Άλλες προοπτικές είναι να επιλέξουν τη διαδικασία ανάπτυξης που είναι 
κατάλληλη για το προφίλ κινδύνου μιας δεδομένης υπηρεσίας και τους κινδύνους από την έκθεση ιδιωτικών δεδομένων.

### *Αυτοματοποίηση λειτουργιών μηχανικής λογισμικού*

Η αυτοματοποίηση έχει καταλάβει σημαντική θέση τα τελευταία χρόνια στις σύγχρονες λειτουργίες. Οι μηχανικοί λογισμικού επιτυγχάνουν τα καλύτερα 
αποτελέσματα όταν συνδέουν εφαρμογές και λειτουργίες σε αυτοματοποίηση. Παρόλο που ο αυτοματισμός κατά κύριο λόγο επικεντρώνεται στη διαχείριση 
του κύκλου ζωής ενός συστήματος ή υποδομής (π.χ., δημιουργία λογαριασμού χρήστη , παροχή περιβαλλόντων και εξυπηρετητών , αλλαγές στις ρυθμίσεις 
παραμέτρων εκτέλεσης), μπορεί επίσης να είναι χρήσιμη σε άλλες περιπτώσεις χρήσης όπου μπορούν να αναπτυχθούν υπηρεσίες για να βοηθήσουν τους 
μηχανικούς λογισμικού να αναπτύσσουν, να δοκιμάζουν και να αποσφαλματώνουν κατά τη διάρκεια της ανάπτυξης. Τάσεις (trends) στις λειτουργίες 
αυτοματοποίησης στοχεύουν στη μείωση της πολυπλοκότητας, την επιτάχυνση της παροχής υποδομών, να προσφέρουν σενάρια υπηρεσιών λειτουργίας σε 
προγραμματιστές, να καθορίζουν εφαρμογές, να αυτοματοποιούν την ανάπτυξη και τις ροές εργασίας δοκιμών.

### *Λειτουργίες μηχανικής λογισμικού για μικρούς οργανισμούς*

Οι πολύ μικροί οργανισμοί (οργανισμοί έως 25 άτομα) δυσκολεύονται να εφαρμόσουν πρότυπα που έχουν αναπτυχθεί από και για μεγάλους οργανισμούς, 
καθώς οι απαιτήσεις τους μπορεί να υπερβαίνουν τις δυνατότητες των μικρών οργανισμών. Σε αυτό το σημείο το πρότυπο ISO/IEC 29110 είναι χρήσιμο, 
καθώς παρέχει πρότυπα και κατευθυντήριες γραμμές προσαρμοσμένες σε πολύ μικρούς οργανισμούς για τη διασφάλιση της ποιότητας των δραστηριοτήτων 
τους στον τομέα της μηχανικής λογισμικού [7]. Οι μηχανικοί λογισμικού θα πρέπει να γνωρίζουν ότι οι διαδικασίες λειτουργίας μπορούν να προσαρμοστούν 
σε μικρούς οργανισμούς και ότι το πρότυπο ISO/IEC 29110 είναι διαθέσιμο για το σκοπό αυτό.

## **Εργαλεία λειτουργιών μηχανικής λογισμικού**

Το θέμα αυτό περιλαμβάνει εργαλεία που είναι ιδιαίτερα σημαντικά στο λογισμικό για τη μεγιστοποίηση της αποδοτικής χρήση του προσωπικού. Η 
αυτοματοποίηση ανάπτυξης, συντήρησης και εργασιών που σχετίζονται με τη λειτουργία εξοικονομεί πόρους μηχανικής και βελτιώνει την ποιότητα 
και την απόδοση. Όταν εφαρμόζονται κατάλληλα, οι εν λόγω αυτοματοποιημένες εργασίες είναι γενικά ταχύτερες, ευκολότερες και πιο αξιόπιστες 
από ό,τι θα ήταν αν επιχειρούνταν χειροκίνητα από μηχανικούς λογισμικού και μηχανικούς λειτουργίας. Το DevOps υποστηρίζει τέτοιου είδους 
αυτοματοποίηση για την ενσωμάτωση, την κατασκευή, τη συσκευασία και την ανάπτυξη αξιόπιστων και ασφαλών συστημάτων. Συνδυάζει την ανάπτυξη, 
τη συντήρηση ,πόρους και διαδικασίες λειτουργίας για να εκτελεί CI, παράδοση, δοκιμές και ανάπτυξη.
    * Η συνεχής παράδοση* (CD) είναι μία πρακτική της μηχανικής λογισμικού που χρησιμοποιεί αυτοματοποιημένα εργαλεία για την παροχή συχνών εκδόσεων νέων συστημάτων (συμπεριλαμβανομένου του λογισμικού) σε σταδιοποίηση (staging) ή διάφορα περιβάλλοντα δοκιμών. Η CD συνεχώς συγκεντρώνει τον πιο πρόσφατο κώδικα και τη διαμόρφωση από την κεφαλή σε υποψήφιες εκδόσεις.
    * O συνεχής έλεγχος* είναι μια πρακτική ελέγχου λογισμικού που περιλαμβάνει τη δοκιμή του λογισμικού σε κάθε στάδιο του κύκλου ζωής της ανάπτυξης λογισμικού. Η συνεχής δοκιμή έχει ως στόχο την αξιολόγηση της ποιότητας του λογισμικού σε κάθε στάδιο της διαδικασίας CD, ελέγχοντας νωρίς και συχνά. Η συνεχής δοκιμή περιλαμβάνει διάφορα ενδιαφερόμενα μέρη, όπως προγραμματιστές, DevOps προσωπικό, QA και τελικοί χρήστες.
    * Η συνεχής ανάπτυξη* (ή αλλιώς CD) είναι μια αυτοματοποιημένη διαδικασία ανάπτυξης αλλαγών σε παραγωγή με την επαλήθευση των προβλεπόμενων χαρακτηριστικών και επικυρώσεις για τη μείωση του κινδύνου. Ο Jez Humble και ο David Farley [8] επεσήμαναν ότι "[τ]ο μεγαλύτερος κίνδυνος για κάθε προσπάθεια λογισμικού είναι ότι καταλήγεις να κατασκευάζεις κάτι που δεν είναι χρήσιμο. Όσο νωρίτερα και συχνότερα έχετε λειτουργικό λογισμικό μπροστά σε πραγματικούς χρήστες, τόσο γρηγορότερα λαμβάνετε ανατροφοδότηση για να μάθετε πόσο πολύτιμο είναι πραγματικά".

### *Δοχεία και εικονικοποίηση*

Διαφορετικές τεχνολογίες δοχείων/εικονικοποίησης και εργαλεία διαχείρισης (που ονομάζονται και ενορχηστρωτές) είναι διαθέσιμα για μηχανικούς 
λειτουργιών για να βελτιώσουν την επεκτασιμότητα των εφαρμογών και την τυποποίηση της ανάπτυξης λογισμικού σε πολλαπλούς προμηθευτές 
υπολογιστών και εξυπηρετητών. [4,c6,s6.4.12] Οι μηχανικοί λειτουργιών χρησιμοποιούν τις γνώσεις τους σχετικά με το μέγεθος και την 
πολυπλοκότητα κάθε έργου για να προσδιορίσουν το καλύτερο εργαλείο για ευελιξία, ασφάλεια και παρακολούθηση.

### *Ανάπτυξη (Deployment)*

Διαφορετικές τεχνολογίες και εργαλεία μπορούν να χρησιμοποιηθούν για τη διαχείριση των αναπτύξεων λογισμικού σε διαφορετικά περιβάλλοντα. 
[4, c5s5.1] Επίσης, διαφορετικά εργαλεία συνήθως συνδυάζονται για να καλύψουν τις διάφορες φάσεις και πτυχές της ανάπτυξης λογισμικού, που 
κυμαίνονται από την προδιαγραφή της ανάπτυξης και διαμόρφωσης με τη χρήση αρχείων περιγραφής έως την αυτοματοποιημένη ανάπτυξη και διαχείριση 
των πόρων του περιβάλλοντος παραγωγής.

### *Αυτοματοποιημένος έλεγχος*

Για να είναι δυνατή η γρήγορη και συνεχής ανατροφοδότηση των προγραμματιστών, οι έλεγχοι πρέπει να είναι αυτοματοποιημένοι όσο το δυνατόν περισσότερο 
σε όλη τη διάρκεια της διαδικασίας παράδοσης λογισμικού, συμπεριλαμβανομένων της ανάπτυξης και των λειτουργιών. Για το σκοπό αυτό, μια στρατηγική 
ελέγχου που καλύπτει τους διάφορους τύπους ελέγχων (έλεγχος μονάδας, έλεγχος ολοκλήρωσης, έλεγχος συστήματος, έλεγχος χρήστη, έλεγχος αποδοχής) 
πρέπει να καθοριστούν, και πρέπει να επιλεγούν εργαλεία για την υποστήριξη και την αυτοματοποίηση των διαφόρων φάσεων δοκιμών. Η αυτοματοποίηση 
του ελέγχου είναι κρίσιμη για την παροχή συνεχούς ανατροφοδότησης στους μηχανικούς λογισμικού που αναπτύσσουν κώδικα και συνεπώς για τη βελτίωση 
στην ποιότητα του λογισμικού.

### *Παρακολούθηση και τηλεμετρία*

Η παρακολούθηση και η τηλεμετρία είναι βασικές πτυχές των λειτουργιών της μηχανικής λογισμικού. Συλλέγουν δεδομένα σε όλα τα επίπεδα του λογισμικού 
συστήματος (συμπεριλαμβανομένης της εφαρμογής, του λειτουργικού συστήματος και εξυπηρετητή) και εξάγουν πληροφορίες που μπορούν να χρησιμοποιηθούν 
για την ανάλυση και την παρακολούθηση διάφορων πτυχών του συστήματος για την ανίχνευση ζητημάτων,  και να παρακολουθεί την εξέλιξη των διαφόρων 
ιδιοτήτων. Ο James Turnbull [9] περιγράφει μια γενική αρχιτεκτονική πλαισίου παρακολούθησης που χρησιμοποιείται από λειτουργίες μηχανικής σε πολλούς 
τεχνολογικούς οργανισμούς. Εφαρμογή των λύσεων παρακολούθησης απαιτεί το συνδυασμό διαφορετικών τεχνικών και εργαλείων για τη συλλογή δεδομένων σε 
διαφορετικά επίπεδα. Αυτό περιλαμβάνει τα αρχεία καταγραφής στο επίπεδο εφαρμογής, ίχνη εκτέλεσης σε επίπεδο λειτουργικού συστήματος και τη χρήση πόρων 
(όπως η χρήση της CPU και της μνήμης) σε επίπεδο εξυπηρετητή. Στη συνέχεια, με βάση τα συλλεχθέντα δεδομένα, διάφορες τεχνικές ανάλυσης 
(π.χ. στατιστική ανάλυση και τεχνικές μηχανικής μάθησης) μπορούν να χρησιμοποιηθούν για να εξαχθούν σχετικές πληροφορίες. Τέλος, πίνακες ελέγχου 
μπορούν να χρησιμοποιηθούν για την οπτικοποίηση των πληροφοριών που εξάγονται- διαφορετικά ταμπλό μπορούν να αναπτυχθούν για να εμφανίζουν τις σχετικές 
πληροφορίες σε διάφορα ενδιαφερόμενα μέρη.
