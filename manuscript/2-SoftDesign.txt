# Σχεδιασμός λογισμικού

## Ακρωνύμια

|CBD 	|Component-Based Design 		      |
|MVC	|Model View Controller		      	      |


## Εισαγωγή


Σχεδιασμός ορίζεται τόσο ως «η διαδικασία καθορισμού της αρχιτεκτονικής,
των  συστατικών, της διεπαφής, αλλά και άλλων χαρακτηριστικών του
συστήματος ή του εξαρτήματος/συστατικού» και «το αποτέλεσμα της [εν
λόγω] διαδικασίας». Με την προσέγγιση της διεργασίας, η σχεδίαση λογισμικού
θεωρείται η δραστηριότητα του κύκλου ζωής της τεχνολογίας του λογισμικού,
μέσα στην οποία οι απαιτήσεις του λογισμικού αναλύονται προκειμένου
να παραχθεί μια περιγραφή της εσωτερικής δομής του λογισμικού, που
θα χρησιμεύσει ως βάση για την κατασκευή του. Με την προσέγγιση της
διαδικασίας, η σχεδίαση λογισμικού περιγράφει την αρχιτεκτονική του
λογισμικού, δηλαδή, πώς το λογισμικό αποσυντίθεται και οργανώνεται
σε συστατικά, και την διεπαφή μεταξύ των συστατικών του.
Θα πρέπει επίσης να περιγράφουν τα συστατικά σε ένα επίπεδο λεπτομέρειας,
που να καθίσταται δυνατή η κατασκευή τους.

Ο σχεδιασμός λογισμικού παίζει σημαντικό ρόλο στην ανάπτυξη λογισμικού.
Κατά τον σχεδιασμό λογισμικού οι μηχανικοί λογισμικού παράγουν διάφορα
μοντέλα, τα οποία αποτελούν ένα είδος προσχέδιου της λύσης που θα
εφαρμοστεί. Μπορούμε να αναλύσουμε και να αξιολογήσουμε αυτά τα μοντέλα
για να καθοριστεί εάν ή όχι θα μας επιτραπεί να εκπληρώσουμε τις διάφορες
απαιτήσεις. Μπορούμε, επίσης, να εξετάσουμε και να αξιολογήσουμε εναλλακτικές
λύσεις και συμβιβασμούς.
Τέλος, μπορούμε να χρησιμοποιήσουμε τα μοντέλα αποτελεσμάτων για να
σχεδιάσουμε τις επόμενες  δραστηριότητες ανάπτυξης, όπως την επαλήθευση
και την επικύρωση του συστήματος, καθώς και να τα χρησιμοποιήσουμε
σαν στοιχεία εισόδου και εναρκτήρια στοιχεία της κατασκευής και των
ελέγχων.

Σε μια τυπική λίστα των διαδικασιών του κύκλου ζωής του λογισμικού,
όπως αυτή της ISO/IEC/IEEE Std.
12207 Διεργασίες στον Κύκλου Ζωής του Λογισμικό, ο σχεδιασμός λογισμικού
αποτελείται από δύο δραστηριότητες, που «βρίσκονται» ανάμεσα της ανάλυσης
απαιτήσεων λογισμικού και της κατασκευής του λογισμικού:

  * Σχεδιασμός της αρχιτεκτονικής λογισμικού (μερικές φορές ονομάζεται
  υψηλού επιπέδου σχέδιο): αναπτύσσει υψηλού επιπέδου δομή και οργάνωση
  του λογισμικού και προσδιορίζει τα διάφορα συστατικά
  * Λεπτομερής σχεδίαση λογισμικού: προσδιορίζει κάθε συστατικό με επαρκείς
  λεπτομέρειες για τη διευκόλυνση της κατασκευής.

Το γνωστικό πεδίο του Σχεδιασμού Λογισμικού δεν συζητά κάθε θέμα που
περιλαμβάνει τη λέξη «σχεδιασμός». Στην ορολογία του Tom DeMarco,
τα θέματα που συζητήθηκαν σχετικά με το γνωστικό πεδίο ασχολούνται
κυρίως  με D-design (διασπαστικός σχεδιασμός), ο στόχος του οποίου
είναι να διασπάσει το λογισμικό σε συστατικά κομμάτια. Ωστόσο, λόγω
της σημασίας του τομέα της αρχιτεκτονικής λογισμικού, θα ονοματίσουμε,
επίσης, τον FP-design (οικογενειακό πρότυπο σχεδιασμού), ο στόχος
του οποίου είναι να καθορίσει τα εκμεταλλεύσιμα κοινά στοιχεία σε
μια οικογένεια προϊόντων λογισμικού. Το γνωστικό πεδίο δεν απευθύνεται
στην I-design (εφεύρεση σχεδιασμού), η οποία πραγματοποιείται συνήθως
κατά τη διάρκεια της διαδικασίας απαιτήσεων του λογισμικού με στόχο
την σύλληψη και το προσδιορισμό του λογισμικού, ώστε να ικανοποιήσει
τις νέες ανάγκες και απαιτήσεις, δεδομένου ότι αυτή η διαδικασία θεωρείται
κομμάτι της αναγνώρισης απαιτήσεων (βλ. στο γνωστικό πεδίο [Απαιτήσεις
λογισμικού](#softreq)).

Το γνωστικό πεδίο του Σχεδιασμού λογισμικού σχετίζεται συγκεκριμένα
με τις Απαιτήσεις λογισμικού, την Κατασκευή λογισμικού, την Διοίκηση
τεχνολογίας λογισμικού, τα Μοντέλα και μέθοδοι τεχνολογίας λογισμικού,
την Ποιότητα λογισμικού και τα Θεμέλια πληροφορικής/Computing Foundations
(το όποιο θα βρείτε στον οδηγό SWEBOK).

## Κατανομή των θεμάτων για το σχεδιασμό λογισμικού

{id="fig-softdesign-tree"}
![Σχήμα 2.1 Κατανομή των θεμάτων στο γνωστικό πεδίο Σχεδιασμός λογισμικού.](images/2-SoftDesign.png)

Η κατανομή των θεμάτων για τα γνωστικά πεδία του σχεδιασμού λογισμικού
απεικονίζεται στο [Σχήμα 2.1](#fig-softdesign-tree).

## Βασικές αρχές στο σχεδιασμό λογισμικού

Οι έννοιες, οι αντιλήψεις και ορολογία που εισάγεται εδώ αποτελούν
μια βάση για την κατανόηση του ρόλου και του πεδίο εφαρμογής του σχεδιασμού
λογισμικού.

### Γενική δομή σχεδιασμού

Γενικά, ο σχεδιασμός μπορεί να θεωρηθεί ως μια μορφή επίλυσης προβλημάτων.
Για παράδειγμα, η έννοια του πονηρού  προβλήματος, δηλαδή, ένα πρόβλημα
με καμία οριστική λύση, είναι ενδιαφέρουσα από την άποψη της κατανόησης
των ορίων του σχεδιασμού.
Ένα σύνολο από έννοιες και αντιλήψεις είναι επίσης ενδιαφέρουσες προκειμένου να κατανοηθεί ο σχεδιασμός στη γενικότητά του:
στόχοι, περιορισμοί, εναλλακτικές, αναπαραστάσεις και λύσεις.

### Περιεχόμενο σχεδιασμού λογισμικού

Ο σχεδιασμός λογισμικού είναι ένα σημαντικό κομμάτι της διαδικασίας
ανάπτυξης του. Για να καταλάβουμε το ρόλο του σχεδιασμού λογισμικού,
πρέπει να δούμε πως υφίσταται ο σχεδιασμός μέσα στον κύκλο ζωής της
ανάπτυξης λογισμικού.
Ως εκ τούτου, είναι σημαντικό να καταλάβουμε τα βασικά συστατικά της
ανάλυσης των απαιτήσεων λογισμικού, του σχεδιασμού λογισμικού, της
κατασκευής λογισμικού, του ελέγχου λογισμικού και της συντήρησης λογισμικού.

### Διαδικασία σχεδιασμού λογισμικού

Ο σχεδιασμός λογισμικού περιλαμβάνει δύο βασικές διαδικασίες:

  * Ο αρχιτεκτονικός σχεδιασμός: (ονομάζεται και ως υψηλού επιπέδου
  και κορυφαίου επιπέδου σχεδιασμός) που περιγράφει πως το λογισμικό
  οργανώνεται σε συστατικά
  * Ο λεπτομερειακός σχεδιασμός: που περιγράφει την επιθυμητή  συμπεριφορά
  των συστατικών.

Τα αποτελέσματα αυτών των δύο διαδικασιών είναι ένα σύνολο μοντέλων
και αντικειμένων, τα οποία επηρεάζουν  τις βασικές αποφάσεις που λαμβάνουμε
και την αιτιολόγηση του σκεπτικού μας για κάθε μη τετριμμένη απόφαση
μας.
Με την καταγραφή της αιτιολόγησης βελτιώνεται η μακροχρόνια διατήρηση
του λογισμικού του προϊόντος.

### Αρχές σχεδιασμού λογισμικού {#principl-design}

Μια αρχή είναι «ένας ολοκληρωμένος και θεμελιώδης νόμος, ένα δόγμα,
ή μια παραδοχή». Οι αρχές του σχεδιασμού λογισμικού είναι βασικές
έννοιες που παρέχουν τη βάση για πολλές διαφορετικές προσεγγίσεις
και έννοιες για το σχεδιασμό του λογισμικού.
Οι αρχές του σχεδιασμού λογισμικού περιλαμβάνουν:  αφαίρεση, σύζευξη
και συνεκτικότητα, αποσύνθεση και τμηματικότητα, ενθυλάκωση και απόκρυψη
πληροφοριών, διαχωρισμός της διεπαφής από την υλοποίηση, πληρότητα,
οικονομία, απλότητα και διαχωρισμό ευθυνών.

  * Αφαίρεση είναι «μια οπτική αντικειμένου που εστιάζει στις πληροφορίες που σχετίζονται με ένα συγκεκριμένο σκοπό και αγνοεί τις υπόλοιπες πληροφορίες». Στο πλαίσιο του σχεδιασμού λογισμικού, δυο βασικοί μηχανισμοί αφαίρεσης είναι η παραμετροποίηση και οι προδιαγραφές. Η αφαίρεση μέσω παραμετροποίησης αγνοεί τις λεπτομέρειες των αναπαραστάσεων των δεδομένων μέσω της αντιπροσώπευσης των δεδομένων καθορισμένες ως παραμέτρους.
  Η αφαίρεση μέσω προδιαγραφών οδηγεί σε τρία βασικά είδη αφαίρεσης:
  αφαίρεση διαδικασιών, αφαίρεση δεδομένων και αφαίρεση δομών ελέγχου
  (επανάληψη).

  * Σύζευξη και συνεκτικότητα: Σύζευξη ορίζεται ως «μία μετρική της
  αλληλεξάρτησης των τμημάτων σε ένα πρόγραμμα υπολογιστή», ενώ η συνεκτικότητα
  ορίζεται ως «μία μετρική της ισχύς των σχέσεων των στοιχείων μέσα
  σε ένα τμήμα».

  * Αποσύνθεση και τμηματικότητα: Αποσύνθεση και τμηματικότητα σημαίνει
  ότι μεγάλα λογισμικά χωρίζονται σε έναν αριθμό μικρότερων, γνωστά
  ως συστατικά, τα οποία έχουν καλώς ορισμένες διασυνδέσεις, οι οποίες
  περιγράφουν τις αλληλεπιδράσεις των συστατικών.
  Συνήθως ο στόχος είναι να θέσουμε διαφορετικές λειτουργίες και αρμοδιότητες
  σε διαφορετικές συνιστώσες.

  * Ενθυλάκωση και απόκρυψη πληροφοριών {#encap} σημαίνει ομαδοποίηση και ενθυλάκωση
   των εσωτερικών λεπτομερειών της αφαίρεσης και κάνοντας αυτές τις
  λεπτομέρειες απρόσιτες σε εξωτερικούς φορείς.

  * Διαχωρισμός της διεπαφής από την υλοποίηση: Ο διαχωρισμός της
  διεπαφής από την υλοποίηση περιλαμβάνει τον ορισμό ενός συστατικού
  καθορίζοντας μια δημόσια διεπαφή (γνωστή στους πελάτες), η οποία είναι
  διαχωρισμένη από τις λεπτομέρειες για το πώς πραγματοποιείται το συστατικό
  στοιχείο (βλ. [Ενθυλάκωση και απόκρυψη πληροφορίας](#encap) ).

  * Πληρότητα, οικονομία, απλότητα: Η επίτευξη της αποδοτικότητας
   και πληρότητας σημαίνει να διασφαλίζουμε ότι ένα στοιχείο λογισμικού
  καταγράφει όλα τα σημαντικά χαρακτηριστικά της αφαίρεσης και τίποτα
  περισσότερο.
  Απλότητα σημαίνει ότι ο σχεδιασμός πρέπει να βασίζεται σε πρότυπα
  που είναι εύκολο να εφαρμοστούν.

  * Διαχωρισμό των αρμοδιοτήτων:  Μια αρμοδιότητα είναι μια «περιοχή
  ενδιαφέροντος σε σχέση με το σχεδιασμό του λογισμικού». Μια αρμοδιότητα
  στον σχεδιασμό είναι μια περιοχή του σχεδιασμού που είναι σχετική
  με ένα ή περισσότερα από τα ενδιαφερόμενα μέρη. Κάθε όψη της αρχιτεκτονικής
  κρύβει μία ή περισσότερες ανησυχίες.
  Ο διαχωρισμός των αρμοδιοτήτων σε όψεις επιτρέπει στους ενδιαφερομένους
  να επικεντρωθούν σε λίγα πράγματα κάθε στιγμή και προσφέρει ένα μέσο
  για τη διαχείριση της περιπλοκότητας.




## Βασικά θέματα σχεδιασμού λογισμικού

Κατά το σχεδιασμό του λογισμικού πρέπει να αντιμετωπιστούν μια σειρά
από βασικά ζητήματα. Μερικά από αυτά τα ζητήματα σχετίζονται με ανησυχίες για την ποιότητα
που όλο το λογισμικό πρέπει να αντιμετωπίσει,
για παράδειγμα, επιδόσεις, ασφάλεια, αξιοπιστία, χρηστικότητα κ.λπ.
. Ένα άλλο σημαντικό ζήτημα είναι το πώς θα αποσυντεθούν, θα οργανωθούν
και θα πακεταριστούν τα στοιχεία του λογισμικού. Είναι θεμελιώδους
σημασίας, ότι όλες οι προσεγγίσεις  σχεδίασης του λογισμικού θα αντιμετωπίζουν
όλα αυτά τα ζητήματα με τον έναν ή τον άλλον τρόπο. (βλ. παράγραφο
[Αρχές σχεδιασμού λογισμικού](#principl-design), και ενότητα [Στρατηγικές και μέθοδοι
σχεδιασμού λογισμικού](#strat-meth-design)). Εν αντιθέσει, άλλα ζητήματα «αντιμετωπίζουν
κάποιες πτυχές της συμπεριφοράς του λογισμικού, που δεν είναι στον
τομέα της εφαρμογής, αλλά απευθύνονται σε υποστηρικτικούς τομείς».
Τέτοια ζητήματα, τα οποία συχνά δημιουργούν πρόβλημα στην λειτουργικότητα
του συστήματος, έχουν παραπεμφθεί ως περιστατικά, τα οποία «τείνουν
να μην είναι μονάδες της λειτουργικής αποσύνθεσης του λογισμικού,
αλλά περισσότερο είναι ιδιότητες που επηρεάζουν την απόδοση ή τη σημασία
των στοιχείων με συστημικό τρόπο».
Ένας αριθμός από αυτά τα εγκάρσια ζητήματα συζητούνται στα ακόλουθες
παραγράφους (παρουσιάζονται με αλφαβητική σειρά).




### Ταυτοχρονικότητα (Συνδρομή)

Ο σχεδιασμός για την ταυτοχρονικότητα ασχολείται με την ανάλυση του λογισμικού
σε διεργασίες, εργασίες και θέματα και αντιμετωπίζει συναφή θέματα
της αποτελεσματικότητας, ατομικότητας, συγχρονισμού και προγραμματισμού.

### Έλεγχος και χειρισμός γεγονότων

Το συγκεκριμένο θέμα του σχεδιασμού ασχολείται με το πώς οργανώνονται
τα δεδομένα και οι ροές ελέγχου, καθώς και το χειρισμό των αντιδράσεων
και των πρόσκαιρων γεγονότων μέσα από διάφορους μηχανισμούς, όπως
σιωπηρή επίκληση ή αναδρομές.

### Αποθήκευση δεδομένων

Το συγκεκριμένο θέμα του σχεδιασμού ασχολείται με το πώς χειρίζονται
τα μακροχρόνια δεδομένα.

### Κατανομή των αρθρωμάτων

Το συγκεκριμένο θέμα του σχεδιασμού ασχολείται με το πώς να διανείμει
το λογισμικό σε όλο το υλικό (συμπεριλαμβανομένων των υλικό του υπολογιστή
και το υλικό δικτύου), πώς τα αρθρώματα επικοινωνούν, και πώς το ενδιάμεσο
λογισμικό μπορεί να χρησιμοποιηθεί για να αντιμετωπίσει ετερογενές
λογισμικό.

### Χειρισμός λαθών και εξαιρέσεων και Βλαβοανοχή (ανοχή σε σφάλματα)

Το συγκεκριμένο θέμα του σχεδιασμού ασχολείται με το πώς να προληφθούν
,να  γίνουν ανεκτά  και να διαχειριστούν τα λάθη καθώς και τον χειρισμό
των εξαιρέσεων.

### Τεχνολογία διεπαφής χρήστη και εμφάνισης

Το συγκεκριμένο θέμα του σχεδιασμού ασχολείται με το πώς να δομήσει
και να οργανώσει τη διεπαφή, καθώς και να εμφανίσει τις πληροφορίες
(για παράδειγμα, διαχωρισμό της εμφάνισης και της επιχειρηματικής
λογικής χρησιμοποιώντας την προσέγγιση Model View Controller). Σημειώστε
ότι αυτό το θέμα δεν διευκρινίζει τα λεπτομερή στοιχεία της διεπαφής
του χρήστη, τα οποία είναι το έργο του σχεδιασμού διεπαφής του χρήστη
(βλ. ενότητα [Σχεδίαση διεπαφής χρήστη](#design-us-interface)).

### Ασφάλεια

Ο σχεδιασμός για την ασφάλεια ασχολείται με το πώς να αποτρέψει μη εγκεκριμένες
αποκαλύψεις, τη δημιουργία, την αλλαγή, διαγραφή ή άρνηση πρόσβασης
σε πληροφορίες και άλλους πόρους. Επίσης, ασχολείται με το πώς θα
αντιμετωπίζουμε την μη διαφύλαξη της και ανάκτηση της ασφάλειας, καθώς
και τις επιθέσεις ή τις παραβιάσεις της ασφάλειας με περιορισμένη
ζημία, συνεχή υπηρεσία, γρήγορη επανόρθωση και αποκατάσταση, καθώς
και παραλείποντας και ανακτώντας την ασφάλεια.
Ο έλεγχος πρόσβασης είναι μια θεμελιώδης έννοια της ασφάλειας και
θα πρέπει επίσης να εξασφαλιστεί η απαραίτητη χρήση της κρυπτογραφίας.

## Δομή και αρχιτεκτονική λογισμικού

Με την αυστηρή έννοια του όρου, η αρχιτεκτονική λογισμικού είναι «το σύνολο των δομών
που απαιτούνται για ένα σύστημα, το οποίο περιλαμβάνει τα στοιχεία
λογισμικού, τις σχέσεις μεταξύ τους και τις ιδιότητες και των δύο».
Κατά τη διάρκεια της δεκαετίας του 1990, όμως, η αρχιτεκτονική λογισμικού
άρχισε να αναδύεται ως μια ευρύτερη επιστήμη που εμπλεκόταν στη μελέτη
των δομών και των αρχιτεκτονικών λογισμικού με πιο γενικό τρόπο. Αυτό
έδωσε αφορμή για μια σειρά από ενδιαφέρουσες έννοιες στην σχεδίαση
λογισμικού σε διάφορα επίπεδα της αφαίρεσης. Μερικές από αυτές τις
έννοιες μπορεί να είναι χρήσιμες κατά τη διάρκεια του αρχιτεκτονικού
σχεδιασμού (για παράδειγμα, αρχιτεκτονικά στυλ), καθώς και κατά τη
διάρκεια του λεπτομερούς σχεδιασμού (για παράδειγμα, τα σχεδιαστικά
πρότυπα). Αυτές οι έννοιες του σχεδιασμού μπορούν επίσης να χρησιμοποιηθούν
για των σχεδιασμό οικογενειών λογισμικών (γνωστές και ως σειρές προϊόντων).
Είναι ενδιαφέρον ότι οι περισσότερες από αυτές τις έννοιες μπορεί
να θεωρηθούν ως μια προσπάθεια να περιγράψουμε, και ως εκ τούτου να
επανεξετάσουμε, την γνώση γύρω από τον σχεδιασμό.

### Αρχιτεκτονικές δομές και σχεδιαστικές οπτικές

Διαφορετικές πτυχές υψηλού επιπέδου του σχεδιασμού λογισμικού μπορεί
να περιγραφούν και να τεκμηριωθούν. Αυτές οι πτυχές καλούνται συχνά
οπτικές: «Μια οπτική αντιπροσωπεύει μια μερική πτυχή μιας αρχιτεκτονικής
λογισμικού, η οποία εμφανίζει συγκεκριμένες ιδιότητες ενός συστήματος
λογισμικού». Οι οπτικές αφορούν διαφορετικά ζητήματα, τα οποία σχετίζονται
με τον σχεδιασμό λογισμικού, για παράδειγμα, η λογική οπτική (την
ικανοποίηση των λειτουργικών απαιτήσεων) εναντίον της οπτικής της
διεργασίας (θέματα ιδιοτήτων συνδρομής) έναντι της φυσικής οπτικής
(θέματα διανομής) εναντίον της οπτικής του σχεδίου ανάπτυξης (πώς
ο σχεδιασμός είναι κατανεμημένος σε μονάδες εφαρμογής με ρητή αναπαράσταση
των εξαρτήσεων μεταξύ των μονάδων). Διάφοροι συγγραφείς χρησιμοποιούν
διαφορετικές ορολογίες, όπως συμπεριφορικές έναντι λειτουργικών
έναντι διαρθρωτικών οπτικές έναντι οπτικών μοντελοποίησης δεδομένων.
Εν ολίγοις, ο σχεδιασμός του λογισμικού είναι ένα πολύπλευρο τεχνούργημα
που παράγεται από τη διεργασία σχεδιασμού και αποτελείται γενικά από
σχετικά ανεξάρτητες και ορθογώνιες όψεις.

### Αρχιτεκτονικές τεχνικές

Η αρχιτεκτονική τεχνική είναι «μία ειδίκευση στοιχείων  και σχεσιακών
τύπων, μαζί με ένα σύνολο περιορισμών σχετικά με το πώς μπορούν να
χρησιμοποιηθούν». Μία αρχιτεκτονική τεχνική μπορεί έτσι να θεωρηθεί
ως μια παροχή οργάνωσης υψηλού επιπέδου του λογισμικού.
Διάφοροι συγγραφείς έχουν εντοπίσει μια σειρά σημαντικών αρχιτεκτονικών
τεχνικών:

  * Γενικές δομές (για παράδειγμα, επίπεδα, σωληνώσεις και φίλτρα,
  μαυροπίνακας)
  * Κατανεμημένα συστήματα (για παράδειγμα, πελάτη-εξυπηρετητή, τριών
  επιπέδων, ομότιμων πελατών)
  * Διαδραστικά συστήματα (για παράδειγμα, Μοντέλο - Οπτική - Έλεγχος
  (MVC))
  * Προσαρμοσμένο σύστημα (για παράδειγμα, μικροπυρήνα, ανάκλαση)
  * Άλλα (για παράδειγμα, διερμηνευτής, έλεγχος από δεδομένα)

### Σχεδιαστικά πρότυπα

Συνοπτικά περιγράφεται ένα πρότυπο ως «μια κοινή λύση σε ένα κοινό
πρόβλημα σε ένα γνωστό πλαίσιο». Ενώ αρχιτεκτονική τεχνική μπορεί
να θεωρηθεί ως ένα πρότυπο που περιγράφει την οργάνωση υψηλού επιπέδου
του λογισμικού, άλλα πρότυπα σχεδιασμού μπορούν να χρησιμοποιηθούν
για την περιγραφή των λεπτομερειών χαμηλότερου επιπέδου.
Τα χαμηλού επιπέδου σχεδιαστικά πρότυπα είναι τα ακόλουθα:

  * Δημιουργικά πρότυπα (για παράδειγμα, Builder, Factory, Prototype,
  Singleton)
  * Δομικά πρότυπα (για παράδειγμα, Adapter, Bridge, Composite, Decorator,
  Facade, Flighweight Proxy)
  * Συμπεριφορικά πρότυπα (για παράδειγμα, Command, Interpreter, Iterator,
  Mediator).

### Αποφάσεις σχεδίασης αρχιτεκτονικών

Ο αρχιτεκτονικός σχεδιασμός είναι μια δημιουργική διαδικασία. Κατά
την διάρκεια της διεργασίας του σχεδιασμού, οι σχεδιαστές λογισμικού
έχουν να πάρουν μια σειρά από θεμελιώδεις αποφάσεις, που επηρεάζουν
βαθιά το λογισμικό και την διεργασία ανάπτυξης. Είναι χρήσιμο να αντιμετωπίζουμε
την διεργασία σχεδιασμού αρχιτεκτονικής με την προοπτική μιας διαδικασίας
λήψης αποφάσεων παρά με την προοπτική μιας δραστηριότητας.
Συχνά, το αντίκτυπο στην ποιότητα των χαρακτηριστικών και στο αντιστάθμισμα
μεταξύ της ποιότητας των ανταγωνιστικών χαρακτηριστικών είναι η βάση
για τη λήψη αποφάσεων σχεδιασμού.

### Οικογένειες προγραμμάτων και λογισμικό-πλαίσιο

Μία προσέγγιση που παρέχει την επαναχρησιμοποίηση του σχεδιασμού λογισμικού
και των αρθρωμάτων είναι να σχεδιάζονται οικογένειες προγραμμάτων,
γνωστές και ως σειρές προϊόντων λογισμικού.
Αυτό μπορεί να γίνει με τον εντοπισμό των ομοιοτήτων μεταξύ των μελών
των οικογενειών αυτών και με το σχεδιασμό επαναχρησιμοποιήσιμων και
προσαρμοσμένων στοιχείων για συμβολή της μεταβλητότητας μεταξύ των
μελών της οικογένειας.

Σε αντικειμενοστραφή προγραμματισμό, μια βασική έννοια είναι εκείνη
του λογισμικού-πλαισίου: ένα μερικώς ολοκληρωμένο σύστημα λογισμικού
που μπορεί να επεκταθεί με κατάλληλες εξειδικευμένες επεκτάσεις (όπως
plug-in).

## Σχεδίαση διεπαφής χρήστη {#design-us-interface}

Ο σχεδιασμός διεπαφής χρήστη είναι ένα ουσιαστικό μέρος της διεργασίας
σχεδιασμού λογισμικού. Ο σχεδιασμός διεπαφής χρήστη θα πρέπει να διασφαλίζει
ότι η αλληλεπίδραση μεταξύ του ανθρώπου και της μηχανής παρέχει αποτελεσματική
λειτουργία και έλεγχο της μηχανής.
Το λογισμικό για να επιτύχει κατά το μέγιστο δυνατό θα πρέπει η διεπαφή
του χρήστη να σχεδιαστεί για να ταιριάζει με τις δεξιότητες, την εμπειρία
και τις προσδοκίες του χρήστη.

### Γενικές αρχές του περιβάλλοντος διεπαφής χρήστη

  * Εύκολη μάθηση: Το λογισμικό θα πρέπει να είναι εύκολο να μαθευτεί,
  έτσι ώστε ο χρήστης μπορεί να ξεκινήσει γρήγορα να εργάζεται με το
  λογισμικό.
  * Υιοθέτηση γνωστών τρόπων διεπαφής: Η διεπαφή θα πρέπει να χρησιμοποιεί
  όρους και έννοιες που προέρχονται από τις εμπειρίες των ανθρώπων που
  θα χρησιμοποιούν το λογισμικό.
  * Συνέπεια: Η διεπαφή θα πρέπει να είναι συνεπής, έτσι ώστε να είναι
  συγκρίσιμη με τις λειτουργίες που ενεργοποιούνται κατά τον ίδιο
τρόπο.
  * Ελάχιστη έκπληξη: Η συμπεριφορά του λογισμικού δεν πρέπει να εκπλήσσει
  τους χρήστες.
  * Ανάκτησιμότητα: Η διεπαφή θα πρέπει να παρέχει μηχανισμούς που
  θα επιτρέπουν στους χρήστες να ανακτήσουν μια κατάσταση μετά από κάποιο
  λάθος.
  * Καθοδήγηση του χρήστη: Η διεπαφή θα πρέπει να δώσει ουσιαστική
  ανατροφοδότηση όταν συμβαίνουν λάθη και να παρέχονται στους χρήστες
  τα πλαίσια, που μπορούν να τους βοηθήσουν.
  * Μέριμνα για όλους τους χρήστες: Η διεπαφή θα πρέπει να παρέχει
  κατάλληλους μηχανισμούς αλληλεπίδρασης για διαφορετικούς τύπους χρηστών
  και για τους χρήστες με διαφορετικές δυνατότητες (αόμματοι, με δυσκολίες
  στην όραση, κωφών, με προβλήματα αχρωματοψίας κ.λπ.).

### Σημαντικά θέματα στον σχεδιασμό διεπαφής χρήστη

Ο σχεδιασμός διεπαφής χρήστη θα πρέπει να λύσει δύο βασικά ζητήματα:

  * Πώς θα πρέπει ο χρήστης να αλληλεπιδρά με το λογισμικό;
  * Πώς θα παρουσιάζεται η πληροφορία από το  λογισμικό στο χρήστη;

Ο σχεδιασμός διεπαφής χρήστη πρέπει να ενσωματώσει την αλληλεπίδραση
του χρήστη και την παρουσίαση της πληροφορίας.
Ο σχεδιασμός διεπαφής του χρήστη θα πρέπει να περιλαμβάνει το συμβιβασμό
ανάμεσα στο καταλληλότερο στυλ αλληλεπίδρασης και παρουσίασης για
το λογισμικό, το φόντο και την εμπειρία των χρηστών του λογισμικού,
καθώς και των διαθέσιμων συσκευών.

### Τρόποι σχεδιασμού διεπαφής χρήστη

Η αλληλεπίδραση του χρήστη περιλαμβάνει την χρήση εντολών και την
παροχή δεδομένων σχετικών με το λογισμικό.
Το μοτίβο αλληλεπίδρασης του χρήστη μπορεί να κατηγοριοποιηθεί στους
ακόλουθους βασικούς τρόπους διεπαφής:

  * Ερώτηση -- απάντηση: Η αλληλεπίδραση ουσιαστικά περιορίζεται σε
  μία μόνο ανταλλαγή  ερώτησης -- απάντησης μεταξύ του χρήστη και του
  λογισμικού.
  Ο χρήστης θέτει μία ερώτηση στο λογισμικό, και το λογισμικό επιστρέφει
  την απάντηση στην ερώτηση.
  * Άμεσος χειρισμός: Οι χρήστες αλληλεπιδρούν με αντικείμενα στην
  οθόνη του υπολογιστή.
  Ο απευθείας χειρισμός συχνά περιλαμβάνει μια συσκευή κατάδειξης (όπως
  ένα ποντίκι, ιχνόσφαιρα ή δείκτη για οθόνες αφής) που χειρίζεται
  ένα αντικείμενο και επικαλείται τις δράσεις που καθορίζουν τι θα πρέπει
  να γίνει με αυτό το αντικείμενο.
  * Επιλογή από μενού: Ο χρήστης επιλέγει μια εντολή από μια λίστα
  μενού εντολών.
  * Συμπλήρωση Φόρμας: Ο χρήστης συμπληρώνει τα πεδία μίας φόρμας.
  Μερικές φορές τα πεδία περιλαμβάνουν μενού, σε κάθε περίπτωση η φόρμα
  έχει κουμπιά δράσης για να αναλάβει δράση ο χρήστης.
  * Γλώσσα εντολών: Ο χρήστης χρησιμοποιεί μια εντολή και παρέχει
  τις σχετικές παραμέτρους για να κατευθύνει το λογισμικό ως προς το τι να κάνει.
  * Φυσικής γλώσσας. Ο χρήστης εκδίδει μια εντολή σε φυσική γλώσσα.
  Δηλαδή, η φυσική η γλώσσα είναι ένα αρχικό κομμάτι σε μια γλώσσα εντολών
  και αναλύεται και μεταφράζεται σε εντολές λογισμικού.

### Σχεδιασμός της παρουσίασης πληροφοριών

Η παρουσίαση πληροφοριών μπορεί να είναι υπό μορφή κειμένου ή γραφικών
σε φυσική μορφή. Ένας καλός σχεδιασμός κρατά την παρουσίαση της πληροφορίας
διαχωρισμένη από την ίδια την πληροφορία.
Η προσέγγιση MVC (Model-View-Controller) είναι ένας αποτελεσματικός
τρόπος για να κρατηθεί η παρουσίαση πληροφοριών ξεχωριστά από την
πληροφορία που παρουσιάζεται.

Οι μηχανικοί λογισμικού συνυπολογίζουν κατά το σχεδιασμό παρουσίασης
των πληροφοριών τον χρόνο που χρειάζεται για την απόκριση και την
ανατροφοδότηση του λογισμικού. Ο χρόνος απόκρισης γενικά μετριέται
από την στιγμή που ένας χρήστης εκτελεί μια συγκεκριμένη δράση ελέγχου
μέχρι το λογισμικό να ανταποκριθεί. Μια ένδειξη προόδου είναι επιθυμητή,
ενώ το λογισμικό προετοιμάζει την απόκριση.
Ανατροφοδότηση μπορεί να παρέχεται, με την εμφάνιση των στοιχείων
που εισήγαγε ο χρήστης, ενώ η επεξεργασία έχει ολοκληρωθεί.

Αφηρημένες απεικονίσεις μπορούν να χρησιμοποιηθούν, όταν πρέπει να
παρουσιάζονται μεγάλα ποσά πληροφοριών.

Σύμφωνα με τη μορφή της παρουσίασης των πληροφοριών, οι σχεδιαστές
μπορούν επίσης να χρησιμοποιήσουν χρώμα για να βελτιώσουν την διεπαφή.
Υπάρχουν πολλές σημαντικές κατευθυντήριες γραμμές:

  * Περιορίστε τον αριθμό των χρωμάτων που χρησιμοποιούνται.
  * Χρησιμοποιήστε αλλαγή χρώματος για να απεικονίσετε την αλλαγή της
  κατάστασης του λογισμικού.
  * Χρησιμοποιήστε χρωματική κωδικοποίηση για να υποστηρίξετε το έργο
  του χρήστη.
  * Χρησιμοποιήστε χρωματική κωδικοποίηση με προσοχή και συνέπεια.
  * Χρησιμοποιήστε χρώματα για να διευκολύνετε την πρόσβαση των ατόμων
  με αχρωματοψία ή με προβλήματα ανεπάρκειας χρώματος (π.χ.
  χρησιμοποιήστε την αλλαγή του κορεσμού χρώματος και της φωτεινότητας
  χρώματος, προσπαθήστε να αποφύγετε συνδυασμούς του μπλε και του
κόκκινου)
  * Μην εξαρτάται μόνο από τα χρώμα η μεταλαμπάδευση των σημαντικών
  πληροφοριών στους χρήστες με διαφορετικές δυνατότητες (τύφλωση, αχρωματοψία,
  κ.λπ.).

### Διεργασία σχεδιασμού διεπαφής χρήστη

Ο σχεδιασμός διεπαφής του χρήστη είναι μια επαναληπτική διεργασία.
Τα πρωτότυπα διεπαφής συχνά χρησιμοποιούνται για τον προσδιορισμό
των προσδιοριστικών, την οργάνωση, και την εμφάνιση διεπαφής του λογισμικού.
Η διεργασία αυτή περιλαμβάνει τρεις βασικές δραστηριότητες:

  * Ανάλυση χρήστη: Σε αυτή τη φάση, ο σχεδιαστής αναλύει τις εργασίες
  των χρηστών, το περιβάλλον εργασίας, άλλα λογισμικά, και πώς οι χρήστες
  αλληλεπιδρούν με άλλους ανθρώπους.
  * Υλοποίηση πρωτοτύπων λογισμικού: Η ανάπτυξη πρωτοτύπων βοηθά τους
  χρήστες να καθοδηγήσουν την εξέλιξη της διεπαφής.
  * Αξιολόγηση διεπαφής: Οι σχεδιαστές μπορούν να παρατηρήσουν τις
  εμπειρίες των χρηστών με την εξέλιξη της διεπαφής.

### Διεθνοποίηση και τοπικοποίηση

Ο σχεδιασμός διεπαφής του χρήστη πρέπει συχνά να ασχολείται με την
διεθνοποίηση και την τοπικοποίηση, τα οποία είναι μέσα για την προσαρμογή
του λογισμικού στις διάφορες γλώσσες, περιφερειακές διαφορές, καθώς
και οι τεχνικές απαιτήσεις της αγοράς-στόχου. Η διεθνοποίηση είναι
η διεργασία σχεδιασμού μιας εφαρμογής λογισμικού, έτσι ώστε να μπορεί
να προσαρμοστεί σε διάφορες γλώσσες και περιοχές χωρίς μεγάλες τεχνικές
αλλαγές. Η τοπικοποίηση είναι η διαδικασία προσαρμογής των διεθνοποιημένων
λογισμικών για μια συγκεκριμένη περιοχή ή γλώσσα, με την προσθήκη
συγκεκριμένων στοιχείων βασισμένα στην τοπικότητα και τη μετάφραση
του κειμένου.
Η τοπικοποίηση και η διεθνοποίηση θα πρέπει να ασχολούνται με παράγοντες
όπως σύμβολα, αριθμούς, νόμισμα, μονάδες χρόνου, και τη μονάδες μέτρησης.

### Αλληγορίες και εννοιολογικά μοντέλα

Οι σχεδιαστές διεπαφών μπορούν να χρησιμοποιήσουν αλληγορίες και εννοιολογικά
μοντέλα για τη δημιουργία αντιστοιχίσεων μεταξύ λογισμικών και κάποιων
συστημάτων αναφοράς, τα οποία είναι γνωστά στους χρήστες στον πραγματικό
κόσμο, που μπορούν να βοηθήσουν τους χρήστες πιο άμεσα να μάθουν και
να χρησιμοποιούν τη διεπαφή.
Για παράδειγμα, η λειτουργία «διαγραφή του αρχείου» μπορεί να γίνει
με μια μεταφορά χρησιμοποιώντας το εικονίδιο του κάδου απορριμμάτων.

Κατά το σχεδιασμό μιας διεπαφής, οι μηχανικοί λογισμικού πρέπει να προσέξουν
να μην χρησιμοποιήσουν παραπάνω από μια αλληγορία για κάθε έννοια.
Οι αλληγορίες παρουσιάζουν επίσης πιθανά προβλήματα σε σχέση με τη
διεθνοποίηση, δεδομένου ότι δεν έχουν όλες οι μεταφορές νόημα ή δεν
εφαρμόζονται με τον ίδιο τρόπο σε όλους τους πολιτισμούς.

## Ανάλυση και αξιολόγηση της ποιότητας σχεδιασμού λογισμικού

Η ενότητα αυτή περιλαμβάνει μια σειρά θεμάτων ανάλυσης και αξιολόγησης
της ποιότητας, που είναι ειδικά σχετιζόμενα με το σχεδιασμό του λογισμικού.

### Χαρακτηριστικά ποιότητας

Διάφορα γνωρίσματα συμβάλλουν στην ποιότητα σχεδίασης ενός λογισμικού,
συμπεριλαμβανομένων των παρακάτω: συντηρησιμότητα, μεταφερσιμότητα,
ελεγξιμότητα, χρηστικότητα, καθώς και ορθότητα, ευρωστία.
Υπάρχει μια ενδιαφέρουσα διάκριση μεταξύ των χαρακτηριστικών ποιότητας,
τα οποία είναι  ευδιάκριτα κατά το χρόνο εκτέλεσης (για παράδειγμα,
η επίδοση, η ασφάλεια, η διαθεσιμότητα, η λειτουργικότητα, η χρηστικότητα),
σε σχέση με εκείνα που δεν μπορούν να διακριθούν κατά το χρόνο εκτέλεσης
(για παράδειγμα, δυνατότητα τροποποίησης, μεταφερσιμότητα, την επαναχρησιμοποίηση,
ελεγξιμότητα), και εκείνα που σχετίζονται με τις εγγενείς ιδιότητες
της αρχιτεκτονικής (για παράδειγμα, την εννοιολογική ακεραιότητα, ορθότητα,
πληρότητα).

### Ανάλυση ποιότητας και τεχνικές αξιολόγησης

Διάφορα εργαλεία και τεχνικές μπορούν να βοηθήσουν στην ανάλυση και
την αξιολόγηση της ποιότητας του σχεδιασμού λογισμικού.

  * Επιθεωρήσεις σχεδιασμού λογισμικού: Άτυπες και επίσημες τεχνικές
  για τον

προσδιορισμό της ποιότητας των αντικειμένων σχεδιασμού (για παράδειγμα:
επιθεωρήσεις αρχιτεκτονικής, επιθεωρήσεις σχεδιασμού και έλεγχοι,
τεχνικές
βασισμένες σε σενάριο, ιχνηλάτηση απαιτήσεων).
Οι επιθεωρήσεις του σχεδιασμού
λογισμικού μπορούν επίσης να αξιολογήσουν την ασφάλεια.
Οι ενισχύσεις για την
εγκατάσταση, τη λειτουργία και τη χρήση (για παράδειγμα, εγχειρίδια
και αρχεία
βοήθειας) μπορούν να ελεγχθούν.

  * Στατική ανάλυση: Επίσημη ή ημιεπίσημη στατική (μη εκτελέσιμη)
  ανάλυση που

μπορεί να χρησιμοποιηθεί για την αξιολόγηση μιας σχεδίασης, για παράδειγμα,
δέντρο υπαιτιότητας (fault tree) ανάλυσης ή αυτοματοποιημένη διασταύρωση.
Ανάλυση ευπάθειας σχεδιασμού (για παράδειγμα, στατική ανάλυση για
τις αδυναμίες ασφαλείας)
μπορεί να πραγματοποιηθεί, αν η ασφάλεια αποτελεί μέλημα.
Η επίσημη
ανάλυση σχεδιασμού χρησιμοποιεί μαθηματικά μοντέλα, που επιτρέπουν
στους
σχεδιαστές να προβλέψουν την συμπεριφορά και επικυρώνουν την απόδοση
του λογισμικού, αντί να χρειάζεται να βασίζονται εξ ολοκλήρου σε δοκιμές.
Η
επίσημη ανάλυση σχεδιασμού μπορεί να χρησιμοποιηθεί για την ανίχνευση
εναπομεινάντων προδιαγραφών και λαθών κατά την σχεδίαση, που ίσως
προκλήθηκαν από την ανακρίβεια, ασάφεια, ή είναι άλλα είδη λαθών.

  * Προσομοίωση και προτυποποίηση: Δυναμικές τεχνικές για την αξιολόγηση
  ενός σχεδίου (για παράδειγμα, απόδοση της προσομοίωσης ή εφικτότητα
  πρωτοτύπων).

### Μετρικές

Οι μετρικές μπορούν να χρησιμοποιηθούν για την αξιολόγηση ή την ποσοτική
εκτίμηση
διαφόρων πτυχών της σχεδίασης ενός λογισμικού: Για παράδειγμα, το
μέγεθος, τη δομή ή την
ποιότητα. Οι περισσότερες μετρικές που έχουν προταθεί εξαρτώνται
από την προσέγγιση που χρησιμοποιείται για την παραγωγή του σχεδιασμού.
Οι μετρικές αυτές έχουν ταξινομηθεί σε δύο ευρείες κατηγορίες:

  * Βάσει λειτουργίας (δομημένη) μετρική σχεδιασμού: Μέτρα που προκύπτουν

από την ανάλυση της λειτουργικής αποσύνθεσης, απεικονίζονται γενικά
χρησιμοποιώντας ένα
διάγραμμα δομής (μερικές φορές ονομάζεται ιεραρχικό διάγραμμα), στο
οποίο
διάφορες μετρικές μπορούν να υπολογιστούν.

  * Αντικειμενοστραφείς μετρικές σχεδιασμού: Η δομή του σχεδιασμού
 παριστάνεται

τυπικά ως ένα διάγραμμα κλάσεων, στο οποίο διάφορες μετρικές μπορούν
να
υπολογιστούν.
Τα μέτρα σχετικά με τις ιδιότητες του εσωτερικού περιεχόμενου της
κάθε κατηγορίας μπορούν επίσης να υπολογιστούν.

## Συμβολισμοί σχεδίασης λογισμικού

Υπάρχουν πολλοί συμβολισμοί που εκπροσωπούν αντικείμενα της σχεδίασης
του
λογισμικού.
Μερικοί χρησιμοποιούνται για να περιγράψουν τη διαρθρωτική οργάνωση
ενός σχεδίου, άλλοι για να εκπροσωπήσουν την συμπεριφορά του λογισμικού.
Ορισμένοι
συμβολισμοί χρησιμοποιούνται ως επί το πλείστον για τον αρχιτεκτονικό
σχεδιασμό, άλλοι κυρίως κατά τον λεπτομερή σχεδιασμό, παρ' όλα αυτά
κάποιοι μπορούν να χρησιμοποιηθούν και για τους δύο λόγους. Επιπλέον,
μερικοί συμβολισμοί χρησιμοποιούνται κυρίως στο πλαίσιο συγκεκριμένων
μεθόδων σχεδίασης. Παρακαλώ σημειώστε ότι η σχεδίαση λογισμικού συχνά
επιτυγχάνεται με τη χρήση πολλαπλών συμβολισμών.
Εδώ, κατηγοριοποιούνται σε συμβολισμούς για την περιγραφή της διαρθρωτικής
(στατικής) οπτικής έναντι της συμπεριφορικής οπτικής.

### Διαρθρωτικές Περιγραφές (Στατική Όψη)

Οι ακόλουθοι συμβολισμοί, κατά κύριο λόγο αλλά όχι πάντοτε γραφικά,
περιγράφουν και αναπαριστούν τις διαρθρωτικές πτυχές ενός σχεδιασμού
λογισμικού, δηλαδή, χρησιμοποιούνται για να περιγράψουν τα κύρια συστατικά
και πώς αυτά συνδέονται μεταξύ τους (στατική άποψη):

  * Αρχιτεκτονική περιγραφή γλωσσών: κείμενο, συχνά επίσημο, γλώσσες
  που χρησιμοποιούνται για να περιγράφουν την αρχιτεκτονική λογισμικού
  σε όρους εξαρτημάτων και των συνδέσεων.
  * Διαγράμματα κλάσεων και αντικειμένων: χρησιμοποιούνται για να
 αναπαραστήσουν

ένα σύνολο κλάσεων (και αντικειμένων) και τις εσωτερικές συσχετίσεις
τους.

  * Διαγράμματα εξαρτημάτων: χρησιμοποιούνται για να αναπαραστήσουν
  ένα σύνολο στοιχείων και τις αλληλεξαρτήσεις τους («φυσικά μέρη και
  μέρη, που μπορούν να  αντικατασταθούν από ένα σύστημα, που προωθεί
  την υλοποίηση ενός συνόλου διεπαφών και συμμορφώνεται σε αυτό»).
  * Κάρτες «class, responsibility, collaborator» (CRC): χρησιμοποιούνται
  για να υποδηλώσουν τα ονόματα των συστατικών (κλάσεων), τις αρμοδιότητές
  τους, και τα συνεργαζόμενα συστατικά.
  * Διαγράμματα διάπτυξης: χρησιμοποιούνται για να αναπαραστήσουν ένα
  σετ (φυσικών) κόμβων και των μεταξύ τους σχέσεων και, έτσι, να προπλάσει
  τις φυσικές πτυχές του λογισμικού.
  * Διαγράμματα οντοτήτων συσχετίσεων (ERD): χρησιμοποιούνται για να
  εκπροσωπήσουν αφηρημένα μοντέλα των δεδομένων που είναι αποθηκευμένα
  σε αποθετήρια πληροφοριών.
  * Γλώσσες περιγραφής διεπαφής (IDLs): προγραμματισμός, όπως γλώσσες
  που χρησιμοποιούνται για τον καθορισμό των συνδέσμων των στοιχείων
  λογισμικού (ονόματα και τύποι των πράξεων που διεκπεραιώνονται).
  * Διαγράμματα Δομής: χρησιμοποιούνται για να περιγράψουν τη δομή
  των προγραμμάτων.

### Συμπεριφορικές Περιγραφές (Δυναμική Όψη))

Οι ακόλουθοι συμβολισμοί και γλώσσες, μερικές γραφικές και κάποιες
με μορφή κειμένου, χρησιμοποιούνται για να περιγράψουν τη δυναμική
συμπεριφορά των συστημάτων λογισμικού και των συστατικών τους. Πολλοί
από αυτούς τους συμβολισμούς είναι χρήσιμοι κυρίως, αλλά όχι αποκλειστικά,
κατά τη διάρκεια του λεπτομερούς σχεδιασμού.
Επιπλέον, η συμπεριφορική περιγραφή μπορεί να περιλαμβάνει ένα σκεπτικό
για την απόφαση του σχεδιασμού, όπως το πώς ένα σχέδιο θα πληροί τις
απαιτήσεις ασφαλείας.

  * Διαγράμματα δραστηριοτήτων: χρησιμοποιούνται για να δείξουν τον
  έλεγχο της ροής από δραστηριότητα σε δραστηριότητα.
  Μπορούν να χρησιμοποιηθούν για να απεικονίσουν ταυτόχρονες δραστηριότητες.
  * Διαγράμματα επικοινωνίας: χρησιμοποιούνται για την εμφάνιση των
  αλληλεπιδράσεων που συμβαίνουν ανάμεσα σε μια ομάδα αντικειμένων.
  Δίνεται έμφαση στα αντικείμενα, στους συνδέσμους, και τα μηνύματα
  που ανταλλάσσουν οι δεσμοί αυτοί.
  * Διαγράμματα ροής δεδομένων (DFDs): χρησιμοποιείται για την εμφάνιση
  της ροής των δεδομένων μεταξύ των στοιχείων. Ένα διάγραμμα ροής δεδομένων
  παρέχει "μια περιγραφή που βασίζεται στην μοντελοποίηση της ροής
  των πληροφοριών γύρω από ένα δίκτυο επιχειρησιακών στοιχείων, με
  κάθε στοιχείο να κάνει χρήση ή τροποποίηση των πληροφοριών που ρέουν
  σε αυτό».
  Οι ροές δεδομένων (και ως εκ τούτου τα διαγράμματα ροών δεδομένων)
  μπορεί να χρησιμοποιούνται για την ανάλυση της ασφάλειας, δεδομένου
  ότι προάγουν των καθορισμό πιθανών διόδων για επίθεση και αποκάλυψη
  εμπιστευτικών πληροφοριών.
  * Πίνακες αποφάσεων και διαγράμματα: χρησιμοποιούνται για να απεικονίσουν
  πολύπλοκους συνδυασμούς συνθηκών και δράσεων.
  * Διαγράμματα ροής: χρησιμοποιούνται για να απεικονίσουν τη ροή του
  ελέγχου και των σχετικών ενεργειών που πρέπει να εκτελούνται.
  * Διαγράμματα ακολουθίας: χρησιμοποιούνται για να δείξουν τις αλληλεπιδράσεις

ανάμεσα σε μια ομάδα αντικειμένων, με έμφαση στον χρόνο παραγγελίας
των μηνυμάτων που ανταλλάσσονται μεταξύ των αντικειμένων.

  * Μεταβατικά και σχηματικά διαγράμματα: χρησιμοποιούνται για να δείξουν
  τη ροή του ελέγχου από κατάσταση σε κατάσταση και πώς η συμπεριφορά
  ενός συστατικού μπορεί να δημιουργήσει αλλαγές με βάση την τρέχουσα κατάσταση
  σε μια μηχανή.
  * Γλώσσες τυπικών προδιαγραφών: γλώσσες κειμένου που χρησιμοποιούν
  τις βασικές έννοιες των μαθηματικών (για παράδειγμα, τη λογική, σετ,
  αλληλουχία) για να καθορίσουν αυστηρά και αφηρημένα τη διεπαφή και
  τη συμπεριφορά των συστατικών του λογισμικού, συχνά σε όρους της προ-και
  μετά συνθηκών.
  *  Ψευδοκώδικας και Γλώσσες σχεδιασμού του προγράμματος: Δομημένος
  προγραμματισμός, όπως γλώσσες που χρησιμοποιούνται για να περιγράψει
  κάποιος, σε γενικές γραμμές το στάδιο του λεπτομερούς σχεδιασμού, τη
  συμπεριφορά μιας διαδικασίας ή μιας μεθόδου.

## Στρατηγικές και μέθοδοι του σχεδιασμού λογισμικού {#strat-meth-design}

Υπάρχουν διάφορες γενικές στρατηγικές για να βοηθήσουν και να καθοδηγήσουν
τη διεργασία σχεδιασμού. Σε αντίθεση με τις γενικές στρατηγικές, οι
μέθοδοι είναι πιο συγκεκριμένες, όταν γενικά παρέχουν ένα σύνολο από
στοιχεία που θα χρησιμοποιηθούν από τη μέθοδο, μια περιγραφή της
διαδικασίας που πρέπει χρησιμοποιηθεί για να ακολουθείται η μέθοδος και
ένα σύνολο από κατευθυντήριες γραμμές για τη χρήση της μεθόδου.
Τέτοιες μέθοδοι είναι χρήσιμες ως ένα κοινό πλαίσιο για τις ομάδες
των μηχανικών λογισμικού.


### Γενικές στρατηγικές

Μερικά συχνά παραδείγματα των γενικών στρατηγικών χρήσιμα στη διαδικασία
σχεδιασμού περιλαμβάνουν το «Διαίρει και Βασίλευε» και τη Σταδιακή
Εκλέπτυνση, στρατηγικές από πάνω προς τα κάτω (top-down) ή από την
βάση στην κορυφή(bottom-up), και στρατηγικές κάνοντας χρήση των ευρετικών
στοιχείων, χρήση προτύπων και γλωσσών των προτύπων και χρήση μιας
επαναληπτικής και αυξητικής προσέγγισης.

### Λειτουργικά προσανατολισμένος σχεδιασμός

Αυτή είναι μία από τις κλασικές μεθόδους του σχεδιασμού λογισμικού,
όπου η αποσύνθεση συγκλίνει στον εντοπισμό των βασικών λειτουργιών
του λογισμικού και, στη συνέχεια, την επεξεργασία και τον εξευγενισμό
με έναν ιεραρχημένο τρόπο από πάνω προς τα κάτω (top-down). Μετά τη
δομημένη ανάλυση χρησιμοποιείται γενικά δομημένη σχεδίαση, δημιουργώντας
έτσι (μεταξύ άλλων) διαγράμματα ροής δεδομένων και περιγραφές συσχετισμένων
διεργασιών.
Ερευνητές έχουν προτείνει διάφορες στρατηγικές (για παράδειγμα, ανάλυση
μετασχηματισμού, ανάλυση συναλλαγών) και των ευρετικών μεθόδων (για
παράδειγμα, fan-in/fan-out, το πεδίο ισχύος εναντίον του πεδίου εφαρμογής
του ελέγχου) για να μετατρέψουν ένα διάγραμμα ροής δεδομένων σε αρχιτεκτονική
λογισμικού, που γενικά παριστάνεται ως διάγραμμα δομής.

### Αντικειμενοστραφής σχεδιασμός

Έχουν προταθεί πολυάριθμοι μέθοδοι σχεδιασμού βασισμένοι σε αντικείμενα.
Το πεδίο έχει εξελιχθεί από τις αρχές του αντικειμενοστραφούς σχεδιασμού
στα μέσα της δεκαετία του 1980 (ουσιαστικό = αντικείμενο, ρήμα = μέθοδος,
επίθετο = χαρακτηριστικό), όπου η κληρονομικότητα και ο πολυμορφισμός
διαδραματίζουν καθοριστικό ρόλο, στον τομέα του σχεδιασμού βάσει εξαρτημάτων
(component-based), όπου οι μετα-πληροφορίες μπορούν να οριστούν και
να γίνουν προσβάσιμες (μέσω αντανάκλασης, για παράδειγμα).
Αν και ο αντικειμενοστραφής σχεδιασμός έχει ρίζες, που προέρχονται
από την έννοια της αφαιρετικότητας δεδομένων, ο σχεδιασμός με γνώμονα
την υπευθυνότητα έχει προταθεί ως εναλλακτική προσέγγιση στον αντικειμενοστραφή
σχεδιασμό.

### Σχεδιασμός δομής δεδομένων

Ο σχεδιασμός της δομής δεδομένων ξεκινά από τις δομές των δεδομένων
που χειρίζεται ένα πρόγραμμα και όχι από τη λειτουργία που εκτελεί.
Ο μηχανικός λογισμικού περιγράφει, αρχικά, τις δομές δεδομένων εισόδου
και εξόδου και στη συνέχεια αναπτύσσει τη δομή ελέγχου του προγράμματος
με βάση αυτά τα διαγράμματα δομής των δεδομένων. Διάφορες ευρετικές
έχουν προταθεί να αντιμετωπίσουν τις ειδικές περιπτώσεις, όπως για παράδειγμα,
όταν υπάρχει αναντιστοιχία μεταξύ των δομών εισόδου και εξόδου.

### Σχεδιασμός με βάση τα εξαρτήματα

Ένα εξάρτημα/συστατικό του λογισμικού είναι μια ανεξάρτητη μονάδα,
που έχει σαφώς ορισμένες διασυνδέσεις και εξαρτήσεις, που μπορούν
να συμμορφώνονται και να αναπτύσσονται ανεξάρτητα. Ο σχεδιασμός βάσει
συστατικών στοιχείων (Component-baseddesign, CBD)
διαχειρίζεται θέματα που σχετίζονται με την παροχή, ανάπτυξη, και
ενσωμάτωση συστατικών, προκειμένου να βελτιωθεί η επαναχρησιμοποίηση.
Τα επαναχρησιμοποιημένα και τα off-the-shelf εξαρτήματα του λογισμικού
πρέπει να πληρούν τις ίδιες απαιτήσεις ασφάλειας ως νέο λογισμικό.
Η διαχείριση εμπιστοσύνης είναι μία ανησυχία του σχεδιασμού.
Τα εξαρτήματα, που αντιμετωπίζονται σαν να έχουν ένα συγκεκριμένο
βαθμό αξιοπιστίας, πρέπει να μην εξαρτώνται από λιγότερο αξιόπιστα
στοιχεία ή υπηρεσίες.

### Άλλες μέθοδοι

Επίσης υπάρχουν κι άλλες ενδιαφέρουσες προσεγγίσεις. Επαναληπτικές
και προσαρμοστικές μέθοδοι εφαρμόζουν προσαυξήσεις λογισμικού και
μειώνουν την έμφαση σε αυστηρές απαιτήσεις και σχεδιασμούς λογισμικού.
Ο σχεδιασμός βάσει πτυχής είναι μια μέθοδος με την οποία το λογισμικό
κατασκευάζεται χρησιμοποιώντας πτυχές, στις οποίες πρέπει να εφαρμόσουν
εγκάρσιες ευθύνες και επεκτάσεις, που προσδιορίζονται κατά τις απαιτήσεις
του λογισμικού. Η αρχιτεκτονική βάσει υπηρεσίας είναι ένας τρόπος
για να οικοδομήσουμε λογισμικό που διανέμεται μέσω web υπηρεσιών,
που εκτελούνται σε ξεχωριστούς υπολογιστές.
Τα συστήματα λογισμικού κατασκευάζονται συχνά με τη χρήση των υπηρεσιών
από διάφορους παρόχους, επειδή καθορισμένα πρωτόκολλα (όπως HTTP,
HTTPS, SOAP) έχουν σχεδιαστεί για να υποστηρίζουν την επικοινωνία
και την ανταλλαγή πληροφοριών των υπηρεσιών.

## Εργαλεία σχεδιασμού λογισμικού

Εργαλεία σχεδιασμού λογισμικού μπορεί να χρησιμοποιηθούν για την υποστήριξη
της δημιουργίας των αντικειμένων σχεδίασης λογισμικού κατά τη διάρκεια
της διεργασίας ανάπτυξης λογισμικού.
Μπορούν να υποστηρίξουν κάποιο μέρος ή το σύνολο των ακόλουθων δραστηριοτήτων:

  * να μεταφράσουν το μοντέλο απαιτήσεων σε μία απεικόνιση του σχεδιασμού
  * να παράσχουν υποστήριξη για την αναπαράσταση λειτουργικών στοιχείων
  και των διεπαφών τους
  * να εφαρμόσουν την ευρετική βελτιστοποίηση και στεγανοποίηση
  * να παράσχουν κατευθυντήριες γραμμές για την αξιολόγηση της ποιότητας.
